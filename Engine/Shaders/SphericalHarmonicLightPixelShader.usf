/*=============================================================================
	SphericalHarmonicLightPixelShader.usf: Lights an object using a single SH environment.
	Copyright 1998-2009 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#undef WORLD_COORDS
#define WORLD_COORDS 1

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"
#include "SphericalHarmonicCommon.usf"

void Main(
	in FVertexFactoryInterpolants FactoryInterpolants,
	in float3 CameraVector : TEXCOORD6,
	in float4 PixelPosition : TEXCOORD7,
	OPTIONAL_FacingSign
	out float4 OutColor : COLOR0
	)
{
	FMaterialParameters MaterialParameters = GetMaterialParameters(FactoryInterpolants);
	CalcMaterialParameters(MaterialParameters,FacingSign,CameraVector,PixelPosition,float3(0,0,1));

	// Allow the material to mask out pixels.
	GetMaterialClipping(MaterialParameters);

	// Transform the surface normal and the reflected camera vector into world-space.
	float3 WorldNormal = TransformTangentVectorToWorld(MaterialParameters, MaterialParameters.TangentNormal);

	OutColor.rgb = ComputeSHLighting(WorldNormal, MaterialParameters);
	OutColor.a = 0.0f;
	OutColor = RETURN_COLOR(AccumulateSceneColor(OutColor));
}
