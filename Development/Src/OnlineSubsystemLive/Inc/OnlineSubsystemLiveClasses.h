/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

enum ESystemLinkState
{
    SLS_NotUsingSystemLink  =0,
    SLS_Hosting             =1,
    SLS_Searching           =2,
    SLS_MAX                 =3,
};

#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName ONLINESUBSYSTEMLIVE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(OnArbitrationRegistrationComplete)
AUTOGENERATE_NAME(OnConnectionStatusChange)
AUTOGENERATE_NAME(OnContentChange)
AUTOGENERATE_NAME(OnControllerChange)
AUTOGENERATE_NAME(OnCreateOnlineGameComplete)
AUTOGENERATE_NAME(OnDestroyOnlineGameComplete)
AUTOGENERATE_NAME(OnDeviceSelectionComplete)
AUTOGENERATE_NAME(OnEndOnlineGameComplete)
AUTOGENERATE_NAME(OnExternalUIChange)
AUTOGENERATE_NAME(OnFindOnlineGamesComplete)
AUTOGENERATE_NAME(OnFlushOnlineStatsComplete)
AUTOGENERATE_NAME(OnFriendsChange)
AUTOGENERATE_NAME(OnGameInviteAccepted)
AUTOGENERATE_NAME(OnJoinOnlineGameComplete)
AUTOGENERATE_NAME(OnKeyboardInputComplete)
AUTOGENERATE_NAME(OnLinkStatusChange)
AUTOGENERATE_NAME(OnLoginCancelled)
AUTOGENERATE_NAME(OnLoginChange)
AUTOGENERATE_NAME(OnMutingChange)
AUTOGENERATE_NAME(OnPlayerTalking)
AUTOGENERATE_NAME(OnProfileDataChanged)
AUTOGENERATE_NAME(OnQueryAvailableDownloadsComplete)
AUTOGENERATE_NAME(OnReadContentComplete)
AUTOGENERATE_NAME(OnReadFriendsComplete)
AUTOGENERATE_NAME(OnReadOnlineStatsComplete)
AUTOGENERATE_NAME(OnReadProfileSettingsComplete)
AUTOGENERATE_NAME(OnRecognitionComplete)
AUTOGENERATE_NAME(OnRegisterPlayerComplete)
AUTOGENERATE_NAME(OnStartOnlineGameComplete)
AUTOGENERATE_NAME(OnUnlockAchievementComplete)
AUTOGENERATE_NAME(OnUnregisterPlayerComplete)
AUTOGENERATE_NAME(OnWriteProfileSettingsComplete)

#ifndef NAMES_ONLY

struct FFriendsListCache
{
    TArrayNoInit<struct FOnlineFriend> Friends;
    BYTE ReadState;
    FScriptDelegate ReadCompleteDelegate;

    /** Constructors */
    FFriendsListCache() {}
    FFriendsListCache(EEventParm)
    {
        appMemzero(this, sizeof(FFriendsListCache));
    }
};

struct FLoginDelegates
{
    TArrayNoInit<FScriptDelegate> Delegates;

    /** Constructors */
    FLoginDelegates() {}
    FLoginDelegates(EEventParm)
    {
        appMemzero(this, sizeof(FLoginDelegates));
    }
};

struct FContentListCache
{
    TArrayNoInit<struct FOnlineContent> Content;
    BYTE ReadState;
    FScriptDelegate ContentChangeDelegate;
    FScriptDelegate ReadCompleteDelegate;
    INT NewDownloadCount;
    INT TotalDownloadCount;
    FScriptDelegate QueryDownloadsDelegate;

    /** Constructors */
    FContentListCache() {}
    FContentListCache(EEventParm)
    {
        appMemzero(this, sizeof(FContentListCache));
    }
};

struct FDeviceIdCache
{
    INT DeviceID;
    FScriptDelegate DeviceSelectionMulticast;
    TArrayNoInit<FScriptDelegate> DeviceSelectionDelegates;

    /** Constructors */
    FDeviceIdCache() {}
    FDeviceIdCache(EEventParm)
    {
        appMemzero(this, sizeof(FDeviceIdCache));
    }
};

struct FProfileSettingsCache
{
    class UOnlineProfileSettings* Profile;
    FScriptDelegate ReadDelegate;
    TArrayNoInit<FScriptDelegate> ReadDelegates;
    FScriptDelegate WriteDelegate;

    /** Constructors */
    FProfileSettingsCache() {}
    FProfileSettingsCache(EEventParm)
    {
        appMemzero(this, sizeof(FProfileSettingsCache));
    }
};

struct FTalkerPriority
{
    INT CurrentPriority;
    INT LastPriority;
};

struct FLocalTalker
{
    BITFIELD bHasVoice:1;
    BITFIELD bUseLoopback:1;
    BITFIELD bWasTalking:1;
};

struct FRemoteTalker
{
    struct FTalkerPriority LocalPriorities[4];
    struct FUniqueNetId TalkerId;
    INT NumberOfMutes;
    BITFIELD bWasTalking:1;
};

struct FInviteData
{
    FScriptDelegate InviteDelegate;
    XINVITE_INFO* InviteData;
    class UOnlineGameSearch* InviteSearch;

    /** Constructors */
    FInviteData() {}
    FInviteData(EEventParm)
    {
        appMemzero(this, sizeof(FInviteData));
    }
};

struct OnlineSubsystemLive_eventOnFlushOnlineStatsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnFlushOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadOnlineStatsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnRecognitionComplete_Parms
{
    OnlineSubsystemLive_eventOnRecognitionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnPlayerTalking_Parms
{
    struct FUniqueNetId Player;
    OnlineSubsystemLive_eventOnPlayerTalking_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnQueryAvailableDownloadsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnQueryAvailableDownloadsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadContentComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadContentComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnContentChange_Parms
{
    OnlineSubsystemLive_eventOnContentChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnGameInviteAccepted_Parms
{
    class UOnlineGameSettings* InviteSettings;
    OnlineSubsystemLive_eventOnGameInviteAccepted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadFriendsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadFriendsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnArbitrationRegistrationComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnArbitrationRegistrationComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnEndOnlineGameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnEndOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnStartOnlineGameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnStartOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnProfileDataChanged_Parms
{
    OnlineSubsystemLive_eventOnProfileDataChanged_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnUnlockAchievementComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnUnlockAchievementComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnDeviceSelectionComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnDeviceSelectionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnWriteProfileSettingsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnWriteProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadProfileSettingsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnUnregisterPlayerComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnUnregisterPlayerComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnRegisterPlayerComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnRegisterPlayerComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnJoinOnlineGameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnJoinOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFindOnlineGamesComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnFindOnlineGamesComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnDestroyOnlineGameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnDestroyOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnCreateOnlineGameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnCreateOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnConnectionStatusChange_Parms
{
    BYTE ConnectionStatus;
    OnlineSubsystemLive_eventOnConnectionStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnControllerChange_Parms
{
    INT ControllerId;
    UBOOL bIsConnected;
    OnlineSubsystemLive_eventOnControllerChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnExternalUIChange_Parms
{
    UBOOL bIsOpening;
    OnlineSubsystemLive_eventOnExternalUIChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLinkStatusChange_Parms
{
    UBOOL bIsConnected;
    OnlineSubsystemLive_eventOnLinkStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnKeyboardInputComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnKeyboardInputComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFriendsChange_Parms
{
    OnlineSubsystemLive_eventOnFriendsChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnMutingChange_Parms
{
    OnlineSubsystemLive_eventOnMutingChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLoginCancelled_Parms
{
    OnlineSubsystemLive_eventOnLoginCancelled_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLoginChange_Parms
{
    OnlineSubsystemLive_eventOnLoginChange_Parms(EEventParm)
    {
    }
};
class UOnlineSubsystemLive : public UOnlineSubsystem
{
public:
    //## BEGIN PROPS OnlineSubsystemLive
    void* NotificationHandle;
    FSecureSessionInfo* SessionInfo;
    INT NumLogins;
    BYTE CurrentNotificationPosition;
    BYTE CurrentGameState;
    BYTE SystemLinkState;
    BYTE SystemLinkNonce[8];
    BYTE QoSPacket[512];
    TArrayNoInit<FLiveAsyncTask*> AsyncTasks;
    class UOnlineGameSettings* GameSettings;
    class UOnlineGameSearch* GameSearch;
    struct FFriendsListCache FriendsCache[4];
    struct FLoginDelegates PlayerLoginDelegates[4];
    struct FLoginDelegates AllLoginDelegates;
    INT LastSignInMask;
    struct FUniqueNetId LastXuids[4];
    struct FContentListCache ContentCache[4];
    INT SystemLinkAnnouncePort;
    FSystemLinkBeacon* SysLinkSocket;
    FLOAT SystemLinkQueryTimeLeft;
    FLOAT SystemLinkQueryTimeout;
    FStringNoInit KeyboardInputResults;
    struct FDeviceIdCache DeviceCache[4];
    struct FProfileSettingsCache ProfileCache[4];
    FVoiceInterface* VoiceEngine;
    INT MaxLocalTalkers;
    INT MaxRemoteTalkers;
    struct FLocalTalker LocalTalkers[4];
    TArrayNoInit<struct FRemoteTalker> RemoteTalkers;
    TArrayNoInit<FScriptDelegate> TalkingDelegates;
    FScriptDelegate SpeechRecognitionDelegates[4];
    BITFIELD bIsUsingSpeechRecognition:1;
    BITFIELD bIsInSignInUI:1;
    BITFIELD bShouldLogArbitrationData:1;
    BITFIELD bShouldLogStatsData:1;
    FScriptDelegate AchievementDelegates[4];
    class UOnlineStatsRead* CurrentStatsRead;
    TArrayNoInit<FScriptDelegate> LoginCancelledDelegates;
    TArrayNoInit<FScriptDelegate> FindOnlineGamesCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ReadOnlineStatsCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ExternalUIChangeDelegates;
    TArrayNoInit<FScriptDelegate> ControllerChangeDelegates;
    INT LastInputDeviceConnectedMask;
    TArrayNoInit<FScriptDelegate> ConnectionStatusChangeDelegates;
    TArrayNoInit<FScriptDelegate> LinkStatusChangeDelegates;
    TArrayNoInit<struct FOnlineArbitrationRegistrant> ArbitrationList;
    struct FInviteData InviteCache[4];
    FScriptDelegate ProfileDataChangedDelegates[4];
    FScriptDelegate __OnLoginChange__Delegate;
    FScriptDelegate __OnLoginCancelled__Delegate;
    FScriptDelegate __OnMutingChange__Delegate;
    FScriptDelegate __OnFriendsChange__Delegate;
    FScriptDelegate __OnKeyboardInputComplete__Delegate;
    FScriptDelegate __OnLinkStatusChange__Delegate;
    FScriptDelegate __OnExternalUIChange__Delegate;
    FScriptDelegate __OnControllerChange__Delegate;
    FScriptDelegate __OnConnectionStatusChange__Delegate;
    FScriptDelegate __OnCreateOnlineGameComplete__Delegate;
    FScriptDelegate __OnDestroyOnlineGameComplete__Delegate;
    FScriptDelegate __OnFindOnlineGamesComplete__Delegate;
    FScriptDelegate __OnJoinOnlineGameComplete__Delegate;
    FScriptDelegate __OnRegisterPlayerComplete__Delegate;
    FScriptDelegate __OnUnregisterPlayerComplete__Delegate;
    FScriptDelegate __OnReadProfileSettingsComplete__Delegate;
    FScriptDelegate __OnWriteProfileSettingsComplete__Delegate;
    FScriptDelegate __OnDeviceSelectionComplete__Delegate;
    FScriptDelegate __OnUnlockAchievementComplete__Delegate;
    FScriptDelegate __OnProfileDataChanged__Delegate;
    FScriptDelegate __OnStartOnlineGameComplete__Delegate;
    FScriptDelegate __OnEndOnlineGameComplete__Delegate;
    FScriptDelegate __OnArbitrationRegistrationComplete__Delegate;
    FScriptDelegate __OnReadFriendsComplete__Delegate;
    FScriptDelegate __OnGameInviteAccepted__Delegate;
    FScriptDelegate __OnContentChange__Delegate;
    FScriptDelegate __OnReadContentComplete__Delegate;
    FScriptDelegate __OnQueryAvailableDownloadsComplete__Delegate;
    FScriptDelegate __OnPlayerTalking__Delegate;
    FScriptDelegate __OnRecognitionComplete__Delegate;
    FScriptDelegate __OnReadOnlineStatsComplete__Delegate;
    FScriptDelegate __OnFlushOnlineStatsComplete__Delegate;
    //## END PROPS OnlineSubsystemLive

    virtual UBOOL Init();
    virtual UBOOL ShowLoginUI(UBOOL bShowOnlineOnly=FALSE);
    virtual BYTE GetLoginStatus(BYTE LocalUserNum);
    virtual UBOOL GetUniquePlayerId(BYTE LocalUserNum,struct FUniqueNetId& PlayerID);
    virtual FString GetPlayerNickname(BYTE LocalUserNum);
    virtual BYTE CanPlayOnline(BYTE LocalUserNum);
    virtual BYTE CanCommunicate(BYTE LocalUserNum);
    virtual BYTE CanDownloadUserContent(BYTE LocalUserNum);
    virtual BYTE CanPurchaseContent(BYTE LocalUserNum);
    virtual BYTE CanViewPlayerProfiles(BYTE LocalUserNum);
    virtual BYTE CanShowPresenceInformation(BYTE LocalUserNum);
    virtual UBOOL IsFriend(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL AreAnyFriends(BYTE LocalUserNum,TArray<struct FFriendsQuery>& Query);
    virtual UBOOL IsMuted(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowFriendsUI(BYTE LocalUserNum);
    virtual UBOOL ShowFriendsInviteUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowFeedbackUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowGamerCardUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowMessagesUI(BYTE LocalUserNum);
    virtual UBOOL ShowAchievementsUI(BYTE LocalUserNum);
    virtual UBOOL ShowPlayersUI(BYTE LocalUserNum);
    virtual UBOOL ShowKeyboardUI(BYTE LocalUserNum,const FString& TitleText,const FString& DescriptionText,UBOOL bShouldValidate=TRUE,const FString& DefaultText=TEXT(""),INT MaxResultLength=256);
    virtual UBOOL HasLinkConnection();
    virtual void SetNetworkNotificationPosition(BYTE NewPos);
    virtual UBOOL IsControllerConnected(INT ControllerId);
    virtual BYTE GetNATType();
    virtual UBOOL CreateOnlineGame(BYTE HostingPlayerNum,class UOnlineGameSettings* NewGameSettings);
    virtual UBOOL DestroyOnlineGame();
    virtual UBOOL FindOnlineGames(BYTE SearchingPlayerNum,class UOnlineGameSearch* SearchSettings);
    virtual void FreeSearchResults();
    virtual UBOOL JoinOnlineGame(BYTE PlayerNum,const struct FOnlineGameSearchResult& DesiredGame);
    virtual UBOOL GetResolvedConnectString(FString& ConnectInfo);
    virtual UBOOL RegisterPlayer(struct FUniqueNetId PlayerID,UBOOL bWasInvited);
    virtual UBOOL UnregisterPlayer(struct FUniqueNetId PlayerID);
    virtual UBOOL ReadProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL WriteProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual void SetRichPresence(BYTE LocalUserNum,INT PresenceMode,const TArray<struct FLocalizedStringSetting>& LocalizedStringSettings,const TArray<struct FSettingsProperty>& Properties);
    virtual UBOOL ShowInviteUI(BYTE LocalUserNum,const FString& InviteText=TEXT(""));
    virtual UBOOL ShowContentMarketplaceUI(BYTE LocalUserNum);
    virtual UBOOL ShowMembershipMarketplaceUI(BYTE LocalUserNum);
    virtual UBOOL ShowDeviceSelectionUI(BYTE LocalUserNum,INT SizeNeeded,UBOOL bForceShowUI=FALSE);
    virtual INT GetDeviceSelectionResults(BYTE LocalPlayerNum,FString& DeviceName);
    virtual UBOOL IsDeviceValid(INT DeviceID);
    virtual UBOOL UnlockAchievement(BYTE LocalUserNum,INT AchievementId);
    virtual UBOOL UnlockGamerPicture(BYTE LocalUserNum,INT PictureId);
    virtual UBOOL StartOnlineGame();
    virtual UBOOL EndOnlineGame();
    virtual UBOOL RegisterForArbitration();
    virtual UBOOL WriteArbitrationData();
    virtual UBOOL AcceptGameInvite(BYTE LocalUserNum);
    virtual UBOOL ReadFriendsList(BYTE LocalUserNum,INT Count=0,INT StartingAt=0);
    virtual BYTE GetFriendsList(BYTE LocalUserNum,TArray<struct FOnlineFriend>& Friends,INT Count=0,INT StartingAt=0);
    virtual UBOOL ReadContentList(BYTE LocalUserNum);
    virtual BYTE GetContentList(BYTE LocalUserNum,TArray<struct FOnlineContent>& ContentList);
    virtual UBOOL QueryAvailableDownloads(BYTE LocalUserNum);
    virtual UBOOL RegisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL UnregisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL RegisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL UnregisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL IsLocalPlayerTalking(BYTE LocalUserNum);
    virtual UBOOL IsRemotePlayerTalking(struct FUniqueNetId PlayerID);
    virtual UBOOL IsHeadsetPresent(BYTE LocalUserNum);
    virtual UBOOL SetRemoteTalkerPriority(BYTE LocalUserNum,struct FUniqueNetId PlayerID,INT Priority);
    virtual UBOOL MuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL UnmuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL StartSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL StopSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL GetRecognitionResults(BYTE LocalUserNum,TArray<FSpeechRecognizedWord>& Words);
    virtual UBOOL ReadOnlineStats(const TArray<struct FUniqueNetId>& Players,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsForFriends(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead,INT StartIndex=1,INT NumToRead=100);
    virtual UBOOL ReadOnlineStatsByRankAroundPlayer(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead,INT NumRows=10);
    virtual void FreeStats(class UOnlineStatsRead* StatsRead);
    virtual UBOOL WriteOnlineStats(struct FUniqueNetId Player,class UOnlineStatsWrite* StatsWrite);
    virtual UBOOL FlushOnlineStats();
    DECLARE_FUNCTION(execInit)
    {
        P_FINISH;
        *(UBOOL*)Result=Init();
    }
    DECLARE_FUNCTION(execShowLoginUI)
    {
        P_GET_UBOOL_OPTX(bShowOnlineOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=ShowLoginUI(bShowOnlineOnly);
    }
    DECLARE_FUNCTION(execGetLoginStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=GetLoginStatus(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetUniquePlayerId)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT_REF(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=GetUniquePlayerId(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execGetPlayerNickname)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(FString*)Result=GetPlayerNickname(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanPlayOnline)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanPlayOnline(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanCommunicate)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanCommunicate(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanDownloadUserContent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanDownloadUserContent(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanPurchaseContent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanPurchaseContent(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanViewPlayerProfiles)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanViewPlayerProfiles(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanShowPresenceInformation)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanShowPresenceInformation(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=IsFriend(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execAreAnyFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FFriendsQuery,Query);
        P_FINISH;
        *(UBOOL*)Result=AreAnyFriends(LocalUserNum,Query);
    }
    DECLARE_FUNCTION(execIsMuted)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=IsMuted(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowFriendsUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ShowFriendsUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowFriendsInviteUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=ShowFriendsInviteUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowFeedbackUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=ShowFeedbackUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowGamerCardUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=ShowGamerCardUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowMessagesUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ShowMessagesUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowAchievementsUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ShowAchievementsUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowPlayersUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ShowPlayersUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowKeyboardUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(TitleText);
        P_GET_STR(DescriptionText);
        P_GET_UBOOL_OPTX(bShouldValidate,TRUE);
        P_GET_STR_OPTX(DefaultText,TEXT(""));
        P_GET_INT_OPTX(MaxResultLength,256);
        P_FINISH;
        *(UBOOL*)Result=ShowKeyboardUI(LocalUserNum,TitleText,DescriptionText,bShouldValidate,DefaultText,MaxResultLength);
    }
    DECLARE_FUNCTION(execHasLinkConnection)
    {
        P_FINISH;
        *(UBOOL*)Result=HasLinkConnection();
    }
    DECLARE_FUNCTION(execSetNetworkNotificationPosition)
    {
        P_GET_BYTE(NewPos);
        P_FINISH;
        SetNetworkNotificationPosition(NewPos);
    }
    DECLARE_FUNCTION(execIsControllerConnected)
    {
        P_GET_INT(ControllerId);
        P_FINISH;
        *(UBOOL*)Result=IsControllerConnected(ControllerId);
    }
    DECLARE_FUNCTION(execGetNATType)
    {
        P_FINISH;
        *(BYTE*)Result=GetNATType();
    }
    DECLARE_FUNCTION(execCreateOnlineGame)
    {
        P_GET_BYTE(HostingPlayerNum);
        P_GET_OBJECT(UOnlineGameSettings,NewGameSettings);
        P_FINISH;
        *(UBOOL*)Result=CreateOnlineGame(HostingPlayerNum,NewGameSettings);
    }
    DECLARE_FUNCTION(execDestroyOnlineGame)
    {
        P_FINISH;
        *(UBOOL*)Result=DestroyOnlineGame();
    }
    DECLARE_FUNCTION(execFindOnlineGames)
    {
        P_GET_BYTE(SearchingPlayerNum);
        P_GET_OBJECT(UOnlineGameSearch,SearchSettings);
        P_FINISH;
        *(UBOOL*)Result=FindOnlineGames(SearchingPlayerNum,SearchSettings);
    }
    DECLARE_FUNCTION(execFreeSearchResults)
    {
        P_FINISH;
        FreeSearchResults();
    }
    DECLARE_FUNCTION(execJoinOnlineGame)
    {
        P_GET_BYTE(PlayerNum);
        P_GET_STRUCT_REF(struct FOnlineGameSearchResult,DesiredGame);
        P_FINISH;
        *(UBOOL*)Result=JoinOnlineGame(PlayerNum,DesiredGame);
    }
    DECLARE_FUNCTION(execGetResolvedConnectString)
    {
        P_GET_STR_REF(ConnectInfo);
        P_FINISH;
        *(UBOOL*)Result=GetResolvedConnectString(ConnectInfo);
    }
    DECLARE_FUNCTION(execRegisterPlayer)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL(bWasInvited);
        P_FINISH;
        *(UBOOL*)Result=RegisterPlayer(PlayerID,bWasInvited);
    }
    DECLARE_FUNCTION(execUnregisterPlayer)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=UnregisterPlayer(PlayerID);
    }
    DECLARE_FUNCTION(execReadProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=ReadProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execWriteProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=WriteProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execSetRichPresence)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(PresenceMode);
        P_GET_TARRAY_REF(struct FLocalizedStringSetting,LocalizedStringSettings);
        P_GET_TARRAY_REF(struct FSettingsProperty,Properties);
        P_FINISH;
        SetRichPresence(LocalUserNum,PresenceMode,LocalizedStringSettings,Properties);
    }
    DECLARE_FUNCTION(execShowInviteUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR_OPTX(InviteText,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=ShowInviteUI(LocalUserNum,InviteText);
    }
    DECLARE_FUNCTION(execShowContentMarketplaceUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ShowContentMarketplaceUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowMembershipMarketplaceUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ShowMembershipMarketplaceUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowDeviceSelectionUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(SizeNeeded);
        P_GET_UBOOL_OPTX(bForceShowUI,FALSE);
        P_FINISH;
        *(UBOOL*)Result=ShowDeviceSelectionUI(LocalUserNum,SizeNeeded,bForceShowUI);
    }
    DECLARE_FUNCTION(execGetDeviceSelectionResults)
    {
        P_GET_BYTE(LocalPlayerNum);
        P_GET_STR_REF(DeviceName);
        P_FINISH;
        *(INT*)Result=GetDeviceSelectionResults(LocalPlayerNum,DeviceName);
    }
    DECLARE_FUNCTION(execIsDeviceValid)
    {
        P_GET_INT(DeviceID);
        P_FINISH;
        *(UBOOL*)Result=IsDeviceValid(DeviceID);
    }
    DECLARE_FUNCTION(execUnlockAchievement)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(AchievementId);
        P_FINISH;
        *(UBOOL*)Result=UnlockAchievement(LocalUserNum,AchievementId);
    }
    DECLARE_FUNCTION(execUnlockGamerPicture)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(PictureId);
        P_FINISH;
        *(UBOOL*)Result=UnlockGamerPicture(LocalUserNum,PictureId);
    }
    DECLARE_FUNCTION(execStartOnlineGame)
    {
        P_FINISH;
        *(UBOOL*)Result=StartOnlineGame();
    }
    DECLARE_FUNCTION(execEndOnlineGame)
    {
        P_FINISH;
        *(UBOOL*)Result=EndOnlineGame();
    }
    DECLARE_FUNCTION(execRegisterForArbitration)
    {
        P_FINISH;
        *(UBOOL*)Result=RegisterForArbitration();
    }
    DECLARE_FUNCTION(execWriteArbitrationData)
    {
        P_FINISH;
        *(UBOOL*)Result=WriteArbitrationData();
    }
    DECLARE_FUNCTION(execAcceptGameInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=AcceptGameInvite(LocalUserNum);
    }
    DECLARE_FUNCTION(execReadFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(UBOOL*)Result=ReadFriendsList(LocalUserNum,Count,StartingAt);
    }
    DECLARE_FUNCTION(execGetFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FOnlineFriend,Friends);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(BYTE*)Result=GetFriendsList(LocalUserNum,Friends,Count,StartingAt);
    }
    DECLARE_FUNCTION(execReadContentList)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ReadContentList(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetContentList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FOnlineContent,ContentList);
        P_FINISH;
        *(BYTE*)Result=GetContentList(LocalUserNum,ContentList);
    }
    DECLARE_FUNCTION(execQueryAvailableDownloads)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=QueryAvailableDownloads(LocalUserNum);
    }
    DECLARE_FUNCTION(execRegisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=RegisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execUnregisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=UnregisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execRegisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=RegisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execUnregisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=UnregisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execIsLocalPlayerTalking)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=IsLocalPlayerTalking(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsRemotePlayerTalking)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=IsRemotePlayerTalking(PlayerID);
    }
    DECLARE_FUNCTION(execIsHeadsetPresent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=IsHeadsetPresent(LocalUserNum);
    }
    DECLARE_FUNCTION(execSetRemoteTalkerPriority)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_INT(Priority);
        P_FINISH;
        *(UBOOL*)Result=SetRemoteTalkerPriority(LocalUserNum,PlayerID,Priority);
    }
    DECLARE_FUNCTION(execMuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=MuteRemoteTalker(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execUnmuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=UnmuteRemoteTalker(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execStartSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=StartSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=StopSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetRecognitionResults)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(FSpeechRecognizedWord,Words);
        P_FINISH;
        *(UBOOL*)Result=GetRecognitionResults(LocalUserNum,Words);
    }
    DECLARE_FUNCTION(execReadOnlineStats)
    {
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStats(Players,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsForFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStatsForFriends(LocalUserNum,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRank)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(StartIndex,1);
        P_GET_INT_OPTX(NumToRead,100);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStatsByRank(StatsRead,StartIndex,NumToRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRankAroundPlayer)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(NumRows,10);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStatsByRankAroundPlayer(LocalUserNum,StatsRead,NumRows);
    }
    DECLARE_FUNCTION(execFreeStats)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        FreeStats(StatsRead);
    }
    DECLARE_FUNCTION(execWriteOnlineStats)
    {
        P_GET_STRUCT(struct FUniqueNetId,Player);
        P_GET_OBJECT(UOnlineStatsWrite,StatsWrite);
        P_FINISH;
        *(UBOOL*)Result=WriteOnlineStats(Player,StatsWrite);
    }
    DECLARE_FUNCTION(execFlushOnlineStats)
    {
        P_FINISH;
        *(UBOOL*)Result=FlushOnlineStats();
    }
    void delegateOnFlushOnlineStatsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnFlushOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFlushOnlineStatsComplete,&__OnFlushOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnReadOnlineStatsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadOnlineStatsComplete,&__OnReadOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnRecognitionComplete()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnRecognitionComplete,&__OnRecognitionComplete__Delegate,NULL);
    }
    void delegateOnPlayerTalking(struct FUniqueNetId Player)
    {
        OnlineSubsystemLive_eventOnPlayerTalking_Parms Parms(EC_EventParm);
        Parms.Player=Player;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnPlayerTalking,&__OnPlayerTalking__Delegate,&Parms);
    }
    void delegateOnQueryAvailableDownloadsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnQueryAvailableDownloadsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnQueryAvailableDownloadsComplete,&__OnQueryAvailableDownloadsComplete__Delegate,&Parms);
    }
    void delegateOnReadContentComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadContentComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadContentComplete,&__OnReadContentComplete__Delegate,&Parms);
    }
    void delegateOnContentChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnContentChange,&__OnContentChange__Delegate,NULL);
    }
    void delegateOnGameInviteAccepted(class UOnlineGameSettings* InviteSettings)
    {
        OnlineSubsystemLive_eventOnGameInviteAccepted_Parms Parms(EC_EventParm);
        Parms.InviteSettings=InviteSettings;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnGameInviteAccepted,&__OnGameInviteAccepted__Delegate,&Parms);
    }
    void delegateOnReadFriendsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadFriendsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadFriendsComplete,&__OnReadFriendsComplete__Delegate,&Parms);
    }
    void delegateOnArbitrationRegistrationComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnArbitrationRegistrationComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnArbitrationRegistrationComplete,&__OnArbitrationRegistrationComplete__Delegate,&Parms);
    }
    void delegateOnEndOnlineGameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnEndOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnEndOnlineGameComplete,&__OnEndOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnStartOnlineGameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnStartOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnStartOnlineGameComplete,&__OnStartOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnProfileDataChanged()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnProfileDataChanged,&__OnProfileDataChanged__Delegate,NULL);
    }
    void delegateOnUnlockAchievementComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnUnlockAchievementComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnUnlockAchievementComplete,&__OnUnlockAchievementComplete__Delegate,&Parms);
    }
    void delegateOnDeviceSelectionComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnDeviceSelectionComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnDeviceSelectionComplete,&__OnDeviceSelectionComplete__Delegate,&Parms);
    }
    void delegateOnWriteProfileSettingsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnWriteProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnWriteProfileSettingsComplete,&__OnWriteProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnReadProfileSettingsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadProfileSettingsComplete,&__OnReadProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnUnregisterPlayerComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnUnregisterPlayerComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnUnregisterPlayerComplete,&__OnUnregisterPlayerComplete__Delegate,&Parms);
    }
    void delegateOnRegisterPlayerComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnRegisterPlayerComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnRegisterPlayerComplete,&__OnRegisterPlayerComplete__Delegate,&Parms);
    }
    void delegateOnJoinOnlineGameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnJoinOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnJoinOnlineGameComplete,&__OnJoinOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnFindOnlineGamesComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnFindOnlineGamesComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFindOnlineGamesComplete,&__OnFindOnlineGamesComplete__Delegate,&Parms);
    }
    void delegateOnDestroyOnlineGameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnDestroyOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnDestroyOnlineGameComplete,&__OnDestroyOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnCreateOnlineGameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnCreateOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnCreateOnlineGameComplete,&__OnCreateOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnConnectionStatusChange(BYTE ConnectionStatus)
    {
        OnlineSubsystemLive_eventOnConnectionStatusChange_Parms Parms(EC_EventParm);
        Parms.ConnectionStatus=ConnectionStatus;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnConnectionStatusChange,&__OnConnectionStatusChange__Delegate,&Parms);
    }
    void delegateOnControllerChange(INT ControllerId,UBOOL bIsConnected)
    {
        OnlineSubsystemLive_eventOnControllerChange_Parms Parms(EC_EventParm);
        Parms.ControllerId=ControllerId;
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnControllerChange,&__OnControllerChange__Delegate,&Parms);
    }
    void delegateOnExternalUIChange(UBOOL bIsOpening)
    {
        OnlineSubsystemLive_eventOnExternalUIChange_Parms Parms(EC_EventParm);
        Parms.bIsOpening=bIsOpening ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnExternalUIChange,&__OnExternalUIChange__Delegate,&Parms);
    }
    void delegateOnLinkStatusChange(UBOOL bIsConnected)
    {
        OnlineSubsystemLive_eventOnLinkStatusChange_Parms Parms(EC_EventParm);
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLinkStatusChange,&__OnLinkStatusChange__Delegate,&Parms);
    }
    void delegateOnKeyboardInputComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnKeyboardInputComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : 0;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnKeyboardInputComplete,&__OnKeyboardInputComplete__Delegate,&Parms);
    }
    void delegateOnFriendsChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFriendsChange,&__OnFriendsChange__Delegate,NULL);
    }
    void delegateOnMutingChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnMutingChange,&__OnMutingChange__Delegate,NULL);
    }
    void delegateOnLoginCancelled()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLoginCancelled,&__OnLoginCancelled__Delegate,NULL);
    }
    void delegateOnLoginChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLoginChange,&__OnLoginChange__Delegate,NULL);
    }
    DECLARE_CLASS(UOnlineSubsystemLive,UOnlineSubsystem,0|CLASS_Config,OnlineSubsystemLive)
    static const TCHAR* StaticConfigName() {return TEXT("Engine");}

    #include "UOnlineSubsystemLive.h"
};

#endif

AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFlushOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execWriteOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFreeStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStatsByRankAroundPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStatsByRank);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStatsForFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetRecognitionResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStopSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStartSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnmuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execMuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetRemoteTalkerPriority);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsHeadsetPresent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsRemotePlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsLocalPlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnregisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnregisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execQueryAvailableDownloads);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetContentList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadContentList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execAcceptGameInvite);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execWriteArbitrationData);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterForArbitration);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execEndOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStartOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnlockGamerPicture);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnlockAchievement);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsDeviceValid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetDeviceSelectionResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowDeviceSelectionUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowMembershipMarketplaceUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowContentMarketplaceUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowInviteUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetRichPresence);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execWriteProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnregisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetResolvedConnectString);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execJoinOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFreeSearchResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFindOnlineGames);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execDestroyOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCreateOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetNATType);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsControllerConnected);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetNetworkNotificationPosition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execHasLinkConnection);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowKeyboardUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowPlayersUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowAchievementsUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowMessagesUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowGamerCardUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowFeedbackUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowFriendsInviteUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowFriendsUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsMuted);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execAreAnyFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanShowPresenceInformation);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanViewPlayerProfiles);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanPurchaseContent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanDownloadUserContent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanCommunicate);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanPlayOnline);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetPlayerNickname);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetUniquePlayerId);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetLoginStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowLoginUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execInit);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ONLINESUBSYSTEMLIVE_NATIVE_DEFS
#define ONLINESUBSYSTEMLIVE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(OnlineSubsystemLive,UOnlineSubsystemLive);

#define AUTO_INITIALIZE_REGISTRANTS_ONLINESUBSYSTEMLIVE \
	UOnlineSubsystemLive::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindOnlineSubsystemLiveUOnlineSubsystemLiveNative; \

#endif // ONLINESUBSYSTEMLIVE_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UOnlineSubsystemLive) GOnlineSubsystemLiveUOnlineSubsystemLiveNatives[] = 
{ 
	MAP_NATIVE(UOnlineSubsystemLive,execFlushOnlineStats)
	MAP_NATIVE(UOnlineSubsystemLive,execWriteOnlineStats)
	MAP_NATIVE(UOnlineSubsystemLive,execFreeStats)
	MAP_NATIVE(UOnlineSubsystemLive,execReadOnlineStatsByRankAroundPlayer)
	MAP_NATIVE(UOnlineSubsystemLive,execReadOnlineStatsByRank)
	MAP_NATIVE(UOnlineSubsystemLive,execReadOnlineStatsForFriends)
	MAP_NATIVE(UOnlineSubsystemLive,execReadOnlineStats)
	MAP_NATIVE(UOnlineSubsystemLive,execGetRecognitionResults)
	MAP_NATIVE(UOnlineSubsystemLive,execStopSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemLive,execStartSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemLive,execUnmuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execMuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execSetRemoteTalkerPriority)
	MAP_NATIVE(UOnlineSubsystemLive,execIsHeadsetPresent)
	MAP_NATIVE(UOnlineSubsystemLive,execIsRemotePlayerTalking)
	MAP_NATIVE(UOnlineSubsystemLive,execIsLocalPlayerTalking)
	MAP_NATIVE(UOnlineSubsystemLive,execUnregisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execRegisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execUnregisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execRegisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execQueryAvailableDownloads)
	MAP_NATIVE(UOnlineSubsystemLive,execGetContentList)
	MAP_NATIVE(UOnlineSubsystemLive,execReadContentList)
	MAP_NATIVE(UOnlineSubsystemLive,execGetFriendsList)
	MAP_NATIVE(UOnlineSubsystemLive,execReadFriendsList)
	MAP_NATIVE(UOnlineSubsystemLive,execAcceptGameInvite)
	MAP_NATIVE(UOnlineSubsystemLive,execWriteArbitrationData)
	MAP_NATIVE(UOnlineSubsystemLive,execRegisterForArbitration)
	MAP_NATIVE(UOnlineSubsystemLive,execEndOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive,execStartOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive,execUnlockGamerPicture)
	MAP_NATIVE(UOnlineSubsystemLive,execUnlockAchievement)
	MAP_NATIVE(UOnlineSubsystemLive,execIsDeviceValid)
	MAP_NATIVE(UOnlineSubsystemLive,execGetDeviceSelectionResults)
	MAP_NATIVE(UOnlineSubsystemLive,execShowDeviceSelectionUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowMembershipMarketplaceUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowContentMarketplaceUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowInviteUI)
	MAP_NATIVE(UOnlineSubsystemLive,execSetRichPresence)
	MAP_NATIVE(UOnlineSubsystemLive,execWriteProfileSettings)
	MAP_NATIVE(UOnlineSubsystemLive,execReadProfileSettings)
	MAP_NATIVE(UOnlineSubsystemLive,execUnregisterPlayer)
	MAP_NATIVE(UOnlineSubsystemLive,execRegisterPlayer)
	MAP_NATIVE(UOnlineSubsystemLive,execGetResolvedConnectString)
	MAP_NATIVE(UOnlineSubsystemLive,execJoinOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive,execFreeSearchResults)
	MAP_NATIVE(UOnlineSubsystemLive,execFindOnlineGames)
	MAP_NATIVE(UOnlineSubsystemLive,execDestroyOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive,execCreateOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive,execGetNATType)
	MAP_NATIVE(UOnlineSubsystemLive,execIsControllerConnected)
	MAP_NATIVE(UOnlineSubsystemLive,execSetNetworkNotificationPosition)
	MAP_NATIVE(UOnlineSubsystemLive,execHasLinkConnection)
	MAP_NATIVE(UOnlineSubsystemLive,execShowKeyboardUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowPlayersUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowAchievementsUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowMessagesUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowGamerCardUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowFeedbackUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowFriendsInviteUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowFriendsUI)
	MAP_NATIVE(UOnlineSubsystemLive,execIsMuted)
	MAP_NATIVE(UOnlineSubsystemLive,execAreAnyFriends)
	MAP_NATIVE(UOnlineSubsystemLive,execIsFriend)
	MAP_NATIVE(UOnlineSubsystemLive,execCanShowPresenceInformation)
	MAP_NATIVE(UOnlineSubsystemLive,execCanViewPlayerProfiles)
	MAP_NATIVE(UOnlineSubsystemLive,execCanPurchaseContent)
	MAP_NATIVE(UOnlineSubsystemLive,execCanDownloadUserContent)
	MAP_NATIVE(UOnlineSubsystemLive,execCanCommunicate)
	MAP_NATIVE(UOnlineSubsystemLive,execCanPlayOnline)
	MAP_NATIVE(UOnlineSubsystemLive,execGetPlayerNickname)
	MAP_NATIVE(UOnlineSubsystemLive,execGetUniquePlayerId)
	MAP_NATIVE(UOnlineSubsystemLive,execGetLoginStatus)
	MAP_NATIVE(UOnlineSubsystemLive,execShowLoginUI)
	MAP_NATIVE(UOnlineSubsystemLive,execInit)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(OnlineSubsystemLive,UOnlineSubsystemLive);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(U,OnlineSubsystemLive,NotificationHandle)
VERIFY_CLASS_OFFSET_NODIE(U,OnlineSubsystemLive,__OnFlushOnlineStatsComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineSubsystemLive)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY
