/**
 * Copyright © 1998-2007 Epic Games, Inc. All Rights Reserved.
 */
class UTInvulnerability extends UTTimedPowerup;

/** ambient sound */
var SoundCue InvulnerabilitySound;
/** sound played when the Invulnerability is running out */
var SoundCue InvulnerabilityFadingSound;
/** overlay material applied to owner */
var MaterialInstance OverlayMaterialInstance;

function GivenTo(Pawn NewOwner, bool bDoNotActivate)
{
	local UTPawn P;

	Super.GivenTo(NewOwner, bDoNotActivate);

	P = UTPawn(NewOwner);
	if (P != None)
	{
		// make invulnerable
		P.bIsInvulnerable = true;

		// apply Invulnerability overlay
		P.SetOverlayMaterial(OverlayMaterialInstance);

		// set ambient sound
		P.SetPawnAmbientSound(InvulnerabilitySound);
	}
	if ( UTGame(WorldInfo.Game) != None )
		UTGame(WorldInfo.Game).bTempForceRespawn = true;

	// set timer for ending sounds
	SetTimer(TimeRemaining - 3.0, false, 'PlayInvulnerabilityFadingSound');
}

reliable client function ClientGivenTo(Pawn NewOwner, bool bDoNotActivate)
{
	Super.ClientGivenTo(NewOwner, bDoNotActivate);

	if (UTPawn(NewOwner) != None)
	{
		UTPawn(NewOwner).RemainingBodyMatDuration = 0.0;
	}
}

function ItemRemovedFromInvManager()
{
	local UTPawn P;

	P = UTPawn(Owner);
	if (P != None)
	{
		P.bIsInvulnerable = false;
		P.SetOverlayMaterial(none);
		P.SetPawnAmbientSound(None);
	}
	SetTimer(0.0, false, 'PlayInvulnerabilityFadingSound');
	if ( UTGame(WorldInfo.Game) != None )
		UTGame(WorldInfo.Game).bTempForceRespawn = false;
}

/** called on a timer to play Invulnerability ending sound */
function PlayInvulnerabilityFadingSound()
{
	// reset timer if time got added
	if (TimeRemaining > 3.0)
	{
		SetTimer(TimeRemaining - 3.0, false, 'PlayInvulnerabilityFadingSound');
	}
	else
	{
		Instigator.PlaySound(InvulnerabilityFadingSound);
		SetTimer(0.75, false, 'PlayInvulnerabilityFadingSound');
	}
}

simulated function RenderOverlays(HUD H)
{
	/***** FIX ME JOE
	local float Scale, LeftPos, TopPos, XL, YL, Width, Height;
	local UTHUD UTH;

	UTH = UTHUD(H);
	if (UTH != None)
	{
		Scale = UTH.Canvas.ClipX / 1024.0;

		UTH.SizeInt(88.0, XL, YL, Scale);
		Width = XL + (42.0 * Scale) + (30.0 * Scale);
		Height = (63.0 * Scale);

		LeftPos = UTH.Canvas.ClipX - Width - 5.0;
		TopPos = 0.5 * (UTH.Canvas.ClipY - Height) - 100*Scale;

		TopPos += (10.0 * Scale);
		LeftPos += (10.0 * Scale);

		UTH.Canvas.SetDrawColor(255, 255, 0, 255);
		UTH.Canvas.SetPos(LeftPos, TopPos);
		UTH.Canvas.DrawTile(UTH.HudTexture, 50.0 * Scale, 50.0 * Scale, 0.0, 168.0, 76.0, 80.0);

		UTH.Canvas.SetDrawColor(255, 0, 0, 255);
		LeftPos += (55.0 * Scale);
		TopPos += (10.0 * Scale);
		UTH.DrawInt(Max(0.0, TimeRemaining), LeftPos, TopPos, Scale);
	}
	*/
}

defaultproperties
{
	Begin Object Class=StaticMeshComponent Name=MeshComponentA
		StaticMesh=StaticMesh'Pickups.Invulnerability.S_Invulnerability'
		AlwaysLoadOnClient=true
		AlwaysLoadOnServer=true
		CastShadow=false
		bForceDirectLightMap=true
		bCastDynamicShadow=false
		bAcceptsLights=false
		CollideActors=false
		Scale3D=(X=0.7,Y=0.7,Z=0.7)
		Materials(0)=Material'Pickups.Invulnerability.M_Invulnerability'
		CullDistance=8000
		bUseAsOccluder=FALSE
	End Object
	DroppedPickupMesh=MeshComponentA
	PickupFactoryMesh=MeshComponentA

	bReceiveOwnerEvents=true
	bRenderOverlays=true
	MaxDesireability=5.0
	RespawnTime=120.000000
	PickupSound=SoundCue'A_Pickups_Powerups.PowerUps.A_Powerup_Invulnerability_PickupCue'

	InvulnerabilitySound=SoundCue'A_Pickups_Powerups.PowerUps.A_Powerup_Invulnerability_PowerLoopCue'
	InvulnerabilityFadingSound=SoundCue'A_Pickups_Powerups.PowerUps.A_Powerup_Invulnerability_WarningCue'
	PowerupOverSound=SoundCue'A_Pickups_Powerups.PowerUps.A_Powerup_Invulnerability_EndCue'
	OverlayMaterialInstance=Material'Pickups.Invulnerability.M_Invulnerability_Overlay'
	HudIndex=3
}
