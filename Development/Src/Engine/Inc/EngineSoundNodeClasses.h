/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2007 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ENGINE_SOUNDNODE_ENUMS
#define INCLUDED_ENGINE_SOUNDNODE_ENUMS 1

enum ETTSSpeaker
{
    TTSSPEAKER_Paul         =0,
    TTSSPEAKER_Harry        =1,
    TTSSPEAKER_Frank        =2,
    TTSSPEAKER_Dennis       =3,
    TTSSPEAKER_Kit          =4,
    TTSSPEAKER_Betty        =5,
    TTSSPEAKER_Ursula       =6,
    TTSSPEAKER_Rita         =7,
    TTSSPEAKER_Wendy        =8,
    TTSSPEAKER_MAX          =9,
};

#endif // !INCLUDED_ENGINE_SOUNDNODE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_ENGINE_SOUNDNODE_CLASSES
#define INCLUDED_ENGINE_SOUNDNODE_CLASSES 1

struct FSubtitleCue
{
    FStringNoInit Text;
    FLOAT Time;

    /** Constructors */
    FSubtitleCue() {}
    FSubtitleCue(EEventParm)
    {
        appMemzero(this, sizeof(FSubtitleCue));
    }
};

class USoundNodeWave : public USoundNode
{
public:
    //## BEGIN PROPS SoundNodeWave
    INT CompressionQuality;
    BITFIELD bForceRealtimeDecompression:1;
    BITFIELD UseTTS:1;
    BITFIELD bAlwaysLocalise:1;
    BITFIELD bMature:1;
    BITFIELD bManualWordWrap:1;
    BITFIELD bDynamicResource:1;
    BITFIELD bOneTimeUse:1;
    BYTE TTSSpeaker GCC_BITFIELD_MAGIC;
    FStringNoInit SpokenText;
    FLOAT Volume;
    FLOAT Pitch;
    FLOAT Duration;
    INT NumChannels;
    INT SampleRate;
    INT SampleDataSize;
    TArrayNoInit<INT> ChannelOffsets;
    TArrayNoInit<INT> ChannelSizes;
    FByteBulkData RawData;
    SWORD* RawPCMData;
    FByteBulkData CompressedPCData;
    FByteBulkData CompressedXbox360Data;
    FByteBulkData CompressedPS3Data;
    INT ResourceID;
    INT ResourceSize;
    const BYTE* ResourceData;
    TArrayNoInit<struct FSubtitleCue> Subtitles;
    FStringNoInit Comment;
    //## END PROPS SoundNodeWave

    DECLARE_CLASS(USoundNodeWave,USoundNode,0,Engine)
	/** UObject interface. */
	virtual void Serialize( FArchive& Ar );

	/** 
	 * Frees up all the resources allocated in this class
	 */
	void FreeResources( void );

	/**
	 * Frees the sound resource data.
	 */
	virtual void FinishDestroy( void );

	/**
	 * Outside the Editor, uploads resource to audio device and performs general PostLoad work.
	 *
	 * This function is being called after all objects referenced by this object have been serialized.
	 */
	virtual void PostLoad( void );

	/** 
	 * Invalidate compressed data
	 */
	virtual void PostEditChange( UProperty* PropertyThatChanged );

	/** 
	 * Copy the compressed audio data from the bulk data
	 */
	void InitAudioResource( FByteBulkData& CompressedData );

	/** 
	 * Remove the compressed audio data associated with the passed in wave
	 */
	void RemoveAudioResource( void );

	/** 
	 * USoundNode interface.
	 */
	virtual void ParseNodes( UAudioDevice* AudioDevice, USoundNode* Parent, INT ChildIndex, class UAudioComponent* AudioComponent, TArray<FWaveInstance*>& WaveInstances );
	
	/** 
	 * 
	 */
	virtual INT GetMaxChildNodes( void ) 
	{ 
		return( 0 );  
	}
	
	/** 
	 * Gets the time in seconds of the associated sound data
	 */	
	virtual FLOAT GetDuration( void );

	/** 
	 * Get the name of the class used to help out when handling events in UnrealEd.
	 * @return	String name of the helper class.
	 */
	virtual const FString GetEdHelperClassName( void ) const
	{
		return FString( TEXT("UnrealEd.SoundNodeWaveHelper") );
	}

	/**
	 * Returns whether this wave file is a localized resource.
	 *
	 * @return TRUE if it is a localized resource, FALSE otherwise.
	 */
	virtual UBOOL IsLocalizedResource( void );

	/**
	 * Returns the size of the object/ resource for display to artists/ LDs in the Editor.
	 *
	 * @return size of resource as to be displayed to artists/ LDs in the Editor.
	 */
	virtual INT GetResourceSize( void );

	/** 
	 * Returns the name of the exporter factory used to export this object
	 * Used when multiple factories have the same extension
	 */
	virtual FName GetExporterName( void );

	/** 
	 * Returns a one line description of an object for viewing in the thumbnail view of the generic browser
	 */
	virtual FString GetDesc( void );

	/** 
	 * Returns detailed info to populate listview columns
	 */
	virtual FString GetDetailedDescription( INT InIndex );

	/**
	 * Used by various commandlets to purge Editor only data from the object.
	 * 
	 * @param TargetPlatform Platform the object will be saved for (ie PC vs console cooking, etc)
	 */
	virtual void StripData(UE3::EPlatformType TargetPlatform);
	
	/** 
	 * Makes sure ogg vorbis data is available for this sound node by converting on demand
	 */
	UBOOL ValidateData( void );	
};

#endif // !INCLUDED_ENGINE_SOUNDNODE_CLASSES
#endif // !NAMES_ONLY


#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ENGINE_SOUNDNODE_NATIVE_DEFS
#define ENGINE_SOUNDNODE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(Engine,USoundNodeWave);

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE_SOUNDNODE \
	USoundNodeWave::StaticClass(); \

#endif // ENGINE_SOUNDNODE_NATIVE_DEFS

#ifdef NATIVES_ONLY
#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(U,SoundNodeWave,CompressionQuality)
VERIFY_CLASS_OFFSET_NODIE(U,SoundNodeWave,Comment)
VERIFY_CLASS_SIZE_NODIE(USoundNodeWave)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
