/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2007 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ENGINE_AI_ENUMS
#define INCLUDED_ENGINE_AI_ENUMS 1


#endif // !INCLUDED_ENGINE_AI_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(SetTeam)

#ifndef NAMES_ONLY

#ifndef INCLUDED_ENGINE_AI_CLASSES
#define INCLUDED_ENGINE_AI_CLASSES 1

struct AIController_eventSetTeam_Parms
{
    INT inTeamIdx;
    AIController_eventSetTeam_Parms(EEventParm)
    {
    }
};
class AAIController : public AController
{
public:
    //## BEGIN PROPS AIController
    BITFIELD bHunting:1;
    BITFIELD bAdjustFromWalls:1;
    BITFIELD bReverseScriptedRoute:1;
    FLOAT Skill;
    class AActor* ScriptedMoveTarget;
    class ARoute* ScriptedRoute;
    INT ScriptedRouteIndex;
    class AActor* ScriptedFocus;
    //## END PROPS AIController

    void eventSetTeam(INT inTeamIdx)
    {
        AIController_eventSetTeam_Parms Parms(EC_EventParm);
        Parms.inTeamIdx=inTeamIdx;
        ProcessEvent(FindFunctionChecked(ENGINE_SetTeam),&Parms);
    }
    DECLARE_CLASS(AAIController,AController,0,Engine)
	INT AcceptNearbyPath(AActor *goal);
	void AdjustFromWall(FVector HitNormal, AActor* HitActor);
	void SetAdjustLocation(FVector NewLoc);
	virtual FVector DesiredDirection();
};

class UCoverGroupRenderingComponent : public UPrimitiveComponent
{
public:
    //## BEGIN PROPS CoverGroupRenderingComponent
    //## END PROPS CoverGroupRenderingComponent

    DECLARE_CLASS(UCoverGroupRenderingComponent,UPrimitiveComponent,0,Engine)
	virtual FPrimitiveSceneProxy* CreateSceneProxy();
	virtual void UpdateBounds();
	virtual UBOOL ShouldRecreateProxyOnUpdateTransform() const;
};

class UCoverRenderingComponent : public UPrimitiveComponent
{
public:
    //## BEGIN PROPS CoverRenderingComponent
    //## END PROPS CoverRenderingComponent

    DECLARE_CLASS(UCoverRenderingComponent,UPrimitiveComponent,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCoverRenderingComponent)
};

struct FCoverMeshes
{
    class UStaticMesh* Base;
    class UStaticMesh* LeanLeft;
    class UStaticMesh* LeanRight;
    class UStaticMesh* Climb;
    class UStaticMesh* Mantle;
    class UStaticMesh* SlipLeft;
    class UStaticMesh* SlipRight;
    class UStaticMesh* SwatLeft;
    class UStaticMesh* SwatRight;
    class UStaticMesh* PopUp;
};

class UCoverMeshComponent : public UStaticMeshComponent
{
public:
    //## BEGIN PROPS CoverMeshComponent
    TArrayNoInit<struct FCoverMeshes> Meshes;
    FVector LocationOffset;
    class UStaticMesh* AutoAdjustOn;
    class UStaticMesh* AutoAdjustOff;
    class UStaticMesh* Disabled;
    //## END PROPS CoverMeshComponent

    DECLARE_CLASS(UCoverMeshComponent,UStaticMeshComponent,0,Engine)
	void UpdateBounds();
	virtual FPrimitiveSceneProxy* CreateSceneProxy();
	virtual UBOOL ShouldRecreateProxyOnUpdateTransform() const;
	virtual void UpdateMeshes() {};
};

class UPathRenderingComponent : public UPrimitiveComponent
{
public:
    //## BEGIN PROPS PathRenderingComponent
    //## END PROPS PathRenderingComponent

    DECLARE_CLASS(UPathRenderingComponent,UPrimitiveComponent,0,Engine)
	/**
	 * Creates a new scene proxy for the path rendering component.
	 * @return	Pointer to the FPathRenderingSceneProxy
	 */
	virtual FPrimitiveSceneProxy* CreateSceneProxy();

	virtual void UpdateBounds();
};

class URouteRenderingComponent : public UPrimitiveComponent
{
public:
    //## BEGIN PROPS RouteRenderingComponent
    //## END PROPS RouteRenderingComponent

    DECLARE_CLASS(URouteRenderingComponent,UPrimitiveComponent,0,Engine)
	virtual FPrimitiveSceneProxy* CreateSceneProxy();
	virtual void UpdateBounds();
};

#endif // !INCLUDED_ENGINE_AI_CLASSES
#endif // !NAMES_ONLY


#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ENGINE_AI_NATIVE_DEFS
#define ENGINE_AI_NATIVE_DEFS

DECLARE_NATIVE_TYPE(Engine,AAIController);
DECLARE_NATIVE_TYPE(Engine,UCoverGroupRenderingComponent);
DECLARE_NATIVE_TYPE(Engine,UCoverMeshComponent);
DECLARE_NATIVE_TYPE(Engine,UCoverRenderingComponent);
DECLARE_NATIVE_TYPE(Engine,UPathRenderingComponent);
DECLARE_NATIVE_TYPE(Engine,URouteRenderingComponent);

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE_AI \
	AAIController::StaticClass(); \
	UCoverGroupRenderingComponent::StaticClass(); \
	UCoverMeshComponent::StaticClass(); \
	UCoverRenderingComponent::StaticClass(); \
	UPathRenderingComponent::StaticClass(); \
	URouteRenderingComponent::StaticClass(); \

#endif // ENGINE_AI_NATIVE_DEFS

#ifdef NATIVES_ONLY
#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(A,AIController,Skill)
VERIFY_CLASS_OFFSET_NODIE(A,AIController,ScriptedFocus)
VERIFY_CLASS_SIZE_NODIE(AAIController)
VERIFY_CLASS_SIZE_NODIE(UCoverGroupRenderingComponent)
VERIFY_CLASS_OFFSET_NODIE(U,CoverMeshComponent,Meshes)
VERIFY_CLASS_OFFSET_NODIE(U,CoverMeshComponent,Disabled)
VERIFY_CLASS_SIZE_NODIE(UCoverMeshComponent)
VERIFY_CLASS_SIZE_NODIE(UCoverRenderingComponent)
VERIFY_CLASS_SIZE_NODIE(UPathRenderingComponent)
VERIFY_CLASS_SIZE_NODIE(URouteRenderingComponent)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
