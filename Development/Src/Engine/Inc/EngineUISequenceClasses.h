/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2007 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ENGINE_UISEQUENCE_ENUMS
#define INCLUDED_ENGINE_UISEQUENCE_ENUMS 1

enum EFeaturePrivilegeMode
{
    FPM_Online              =0,
    FPM_Chat                =1,
    FPM_DownloadUserContent =2,
    FPM_PurchaseContent     =3,
    FPM_MAX                 =4,
};

#endif // !INCLUDED_ENGINE_UISEQUENCE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AllowEventActivation)
AUTOGENERATE_NAME(ClearDelegate)
AUTOGENERATE_NAME(GetLoginStatus)
AUTOGENERATE_NAME(GetNATType)
AUTOGENERATE_NAME(GetPrivilegeLevel)
AUTOGENERATE_NAME(JoinOnlineGame)
AUTOGENERATE_NAME(ReadKeyboardInput)
AUTOGENERATE_NAME(RegisterDelegate)
AUTOGENERATE_NAME(SelectDevice)
AUTOGENERATE_NAME(ShouldAlwaysInstance)
AUTOGENERATE_NAME(ShowUI)

#ifndef NAMES_ONLY

#ifndef INCLUDED_ENGINE_UISEQUENCE_CLASSES
#define INCLUDED_ENGINE_UISEQUENCE_CLASSES 1

class UUISequence : public USequence, public IUIEventContainer
{
public:
    //## BEGIN PROPS UISequence
private:
    TArray<class UUIEvent*> UIEvents;
public:
    //## END PROPS UISequence

    class UUIScreenObject* GetOwner() const;
    void GetUIEvents(TArray<class UUIEvent*>& out_Events,class UClass* LimitClass=NULL);
    void RemoveSequenceObject(class USequenceObject* ObjectToRemove);
    void RemoveSequenceObjects(const TArray<class USequenceObject*>& ObjectsToRemove);
    DECLARE_FUNCTION(execGetOwner)
    {
        P_FINISH;
        *(class UUIScreenObject**)Result=GetOwner();
    }
    DECLARE_FUNCTION(execGetUIEvents)
    {
        P_GET_TARRAY_REF(class UUIEvent*,out_Events);
        P_GET_OBJECT_OPTX(UClass,LimitClass,NULL);
        P_FINISH;
        GetUIEvents(out_Events,LimitClass);
    }
    DECLARE_FUNCTION(execAddSequenceObject);
    DECLARE_FUNCTION(execRemoveSequenceObject)
    {
        P_GET_OBJECT(USequenceObject,ObjectToRemove);
        P_FINISH;
        RemoveSequenceObject(ObjectToRemove);
    }
    DECLARE_FUNCTION(execRemoveSequenceObjects)
    {
        P_GET_TARRAY_REF(class USequenceObject*,ObjectsToRemove);
        P_FINISH;
        RemoveSequenceObjects(ObjectsToRemove);
    }
    DECLARE_CLASS(UUISequence,USequence,0,Engine)
    virtual UObject* GetUObjectInterfaceUIEventContainer(){return this;}
	/** UISequence interface */
	/**
	 * Adds a new sequence to this sequence's NestedSequences array, calling Modify() on this sequence.
	 *
	 * @param	NewNestedSequence	the sequence to add to the NestedSequence array
	 *
	 * @return	TRUE if the new sequence was successfully added to the NestedSequences list, or if was already in that list.
	 */
	virtual UBOOL AddNestedSequence( USequence* NewNestedSequence );

	/**
	 * Removes the specified sequence from this sequences list of NestedSequences
	 *
	 * @param	SequenceToRemove	the sequence to remove
	 *
	 * @return	TRUE if the sequence was successfully removed from the NestedSequences list, or if it didn't exist in the list.
	 */
	virtual UBOOL RemoveNestedSequence( USequence* SequenceToRemove );

	/**
	 * Determines whether this sequence contains any ops that can execute logic during the game.  Called when this sequence is saved
	 * to determine whether it should be marked to be loaded in the game.  Marks any ops which aren't linked to other ops so that they
	 * aren't loaded in the game.
	 *
	 * @return	returns TRUE if this sequence contains ops that execute logic, thus needs to be loaded in the game.
	 */
	UBOOL CalculateSequenceLoadFlags();

private:
	/**
	 * Determines whether this non-standalone object is referenced by a stand-alone sequnce object; if the object is not rooted, it will be marked
	 * with the RF_NotForClient|RF_NotForServer|RF_Marked object flags.
	 *
	 * @param	SeqObj	the sequence object to check
	 *
	 * @return	TRUE if SeqObj is a stand-alone sequence object or is referenced [directly or indirectly] by a standalone sequence object
	 */
	UBOOL IsSequenceObjectRooted( USequenceObject* SeqObj );

public:

	/* === USequence interface === */
	/**
	 * Initialize this kismet sequence.
	 *  - Adds all UIEvents to the UIEvents list.
	 */
	virtual void InitializeSequence();

	/**
	 * Conditionally creates the log file for this sequence.
	 */
	virtual void CreateKismetLog();

	/**
	 * Adds a new SequenceObject to this containers's list of ops.
	 *
	 * @param	NewObj		the sequence object to add.
	 * @param	bRecurse	if TRUE, recursively add any sequence objects attached to this one
	 *
	 * @return	TRUE if the object was successfully added to the sequence.
	 *
	 * @note: this implementation is necessary to fulfill the UIEventContainer interface contract
	 */
	virtual UBOOL AddSequenceObject( USequenceObject* NewObj, UBOOL bRecurse=FALSE );

	/**
	 * Removes the specified object from the SequenceObjects array, severing any links to that object.
	 *
	 * @param	ObjectToRemove	the SequenceObject to remove from this sequence.  All links to the object will be cleared.
	 * @param	ModifiedObjects	a list of objects that have been modified the objects that have been
	 */
	virtual void RemoveObject( USequenceObject* ObjectToRemove );

	/* === USequenceOp interface === */
	/**
	 * Since UISequences can only be activated as a result of opening a new scene, override USequence's implementation
	 */
	virtual void Activated() {}

	/* === USequenceObject interface === */
	/**
	 * Returns whether the specified SequenceObject can exist in this sequence without being linked to anything else (i.e. does not require
	 * another sequence object to activate it).
	 *
	 * @param	SeqObj	the sequence object to check
	 *
	 * @return	TRUE if the sequecne object does not require a separate "stand-alone" sequence object to reference it, in order to be loaded in game.
	 */
	virtual UBOOL IsStandalone( USequenceObject* SeqObj ) const;

	/** Get the name of the class used to help out when handling events in UnrealEd.
	 * @return	String name of the helper class.
	 */
	virtual const FString GetEdHelperClassName() const
	{
		return FString( TEXT("UnrealEd.UISequenceHelper") );
	}

	/* === UObject interface === */
	/**
	 * This version removes the RF_Public flag if it exists on a non-prefab sequence.
	 */
	virtual void PostLoad();

	/**
	 * Called after importing property values for this object (paste, duplicate or .t3d import)
	 * Allow the object to perform any cleanup for properties which shouldn't be duplicated or
	 * are unsupported by the script serialization.
	 *
	 * This version clears the value of ParentSequence since we want this to be set when the owning widget that was just
	 * pasted is initialized.
	 */
	virtual void PostEditImport();

	/**
	 * Determines whether this object is contained within a UPrefab.
	 *
	 * @param	OwnerPrefab		if specified, receives a pointer to the owning prefab.
	 *
	 * @return	TRUE if this object is contained within a UPrefab; FALSE if it IS a UPrefab or isn't contained within one.
	 */
	virtual UBOOL IsAPrefabArchetype( class UObject** OwnerPrefab=NULL ) const;

	/**
	 * @return	TRUE if the object is contained within a UIPrefabInstance.
	 */
	virtual UBOOL IsInPrefabInstance() const;
};

class UUIStateSequence : public UUISequence
{
public:
    //## BEGIN PROPS UIStateSequence
    //## END PROPS UIStateSequence

    class UUIState* GetOwnerState() const;
    DECLARE_FUNCTION(execGetOwnerState)
    {
        P_FINISH;
        *(class UUIState**)Result=GetOwnerState();
    }
    DECLARE_CLASS(UUIStateSequence,UUISequence,0,Engine)
	/* === UUIStateSequence interface === */
	/**
	 * Returns the index [into the SequenceObjects array] of the UIEvent_MetaObject used to represent the owner state's
	 * custom input actions in the UI kismet editor, or INDEX_NONE if it can't be found.
	 */
	INT FindInputMetaObjectIndex() const;

	/**
	 * Creates a new UIEvent_InputMetaObject that will be used to display all of the input events for this state sequence, if one does not already exist
	 * in this sequence's SequenceObjects array.  Initializes the input meta object with the data from the owning state's custom input actions.
	 */
	void InitializeInputMetaObject();

	/**
	 * Copies all values from the input meta object into the owning state's custom input actions, then removes the meta object from the sequence's
	 * list of SequenceObjects.
	 */
	void SaveInputMetaObject();

	/**
	 * Determines whether the specified sequence action is referenced by the owning state's StateInputActions array.
	 */
	UBOOL IsStateInputAction( class USequenceAction* SeqAction ) const;

	/** USequence interface */
	/**
	 * Adds the specified SequenceOp to this sequence's list of ActiveOps.
	 *
	 * @param	NewSequenceOp	the sequence op to add to the list
	 * @param	bPushTop		if TRUE, adds the operation to the top of stack (meaning it will be executed first),
	 *							rather than the bottom
	 *
	 * @return	TRUE if the sequence operation was successfully added to the list.
	 */
	virtual UBOOL QueueSequenceOp( USequenceOp* NewSequenceOp, UBOOL bPushTop=FALSE );

	/**
	 * Returns whether the specified SequenceObject can exist in this sequence without being linked to anything else (i.e. does not require
	 * another sequence object to activate it).  This version also considers actions which are referenced only through the state's StateInputActions array
	 * to be standalone ops.
	 *
	 * @param	SeqObj	the sequence object to check
	 *
	 * @return	TRUE if the sequecne object does not require a separate "stand-alone" sequence object to reference it, in order to be loaded in game.
	 */
	virtual UBOOL IsStandalone( USequenceObject* SeqObj ) const;

	/**
	 * Finds all sequence objects contained by this sequence which are linked to the specified sequence object.  This version
	 * also checks the owning state's input array to determine whether the specified op is referenced.
	 *
	 * @param	SearchObject		the sequence object to search for link references to
	 * @param	out_Referencers		if specified, receieves the list of sequence objects contained by this sequence
	 *								which are linked to the specified op
	 *
	 * @return	TRUE if at least one object in the sequence objects array is linked to the specified op.
	 */
	virtual UBOOL FindSequenceOpReferencers( USequenceObject* SearchObject, TArray<USequenceObject*>* out_Referencers=NULL );

	/* === UObject interface === */
	/**
	 * Presave function. Gets called once before an object gets serialized for saving. This function is necessary
	 * for save time computation as Serialize gets called three times per object from within UObject::SavePackage.
	 * @warning: Objects created from within PreSave will NOT have PreSave called on them!!!
	 *
	 * This version of the function pushes the input meta object's inputs created back to the parent state's event array.
	 */
	virtual void PreSave();

	/**
	 * Called just before a property in this object's archetype is to be modified, prior to serializing this object into
	 * the archetype propagation archive.
	 *
	 * Allows objects to perform special cleanup or preparation before being serialized into an FArchetypePropagationArc
	 * against its archetype. Only called for instances of archetypes, where the archetype has the RF_ArchetypeObject flag.
	 *
	 * This version saves the data from the meta object into the owning state and removes the meta object from the SequenceObjects array.
	 */
	virtual void PreSerializeIntoPropagationArchive();

	/**
	 * Called just after a property in this object's archetype is modified, immediately after this object has been de-serialized
	 * from the archetype propagation archive.
	 *
	 * Allows objects to perform reinitialization specific to being de-serialized from an FArchetypePropagationArc and
	 * reinitialized against an archetype. Only called for instances of archetypes, where the archetype has the RF_ArchetypeObject flag.
	 *
	 * This version re-creates and re-initializes the meta object from the data in the owning state's list of input actions.
	 */
	virtual void PostSerializeFromPropagationArchive();
};

class UUIAction : public USequenceAction
{
public:
    //## BEGIN PROPS UIAction
    INT GamepadID;
    BITFIELD bAutoTargetOwner:1;
    //## END PROPS UIAction

    class UUIScreenObject* GetOwner() const;
    class UUIScene* GetOwnerScene() const;
    DECLARE_FUNCTION(execGetOwner)
    {
        P_FINISH;
        *(class UUIScreenObject**)Result=GetOwner();
    }
    DECLARE_FUNCTION(execGetOwnerScene)
    {
        P_FINISH;
        *(class UUIScene**)Result=GetOwnerScene();
    }
    DECLARE_ABSTRACT_CLASS(UUIAction,USequenceAction,0,Engine)
	/* === USequenceOp interface */
	/**
	 * Allows the operation to initialize the values for any VariableLinks that need to be filled prior to executing this
	 * op's logic.  This is a convenient hook for filling VariableLinks that aren't necessarily associated with an actual
	 * member variable of this op, or for VariableLinks that are used in the execution of this ops logic.
	 *
	 * Initializes the value of the Player Index VariableLinks
	 */
	virtual void InitializeLinkedVariableValues();

	virtual void Activated();
	virtual void DeActivated();

	/**
	 * Notification that an input link on this sequence op has been given impulse by another op.
	 *
	 * This version also initializes the value of GamepadID.
	 *
	 * @param	ActivatorOp		the sequence op that applied impulse to this op's input link
	 * @param	InputLinkIndex	the index [into this op's InputLinks array] for the input link that was given impulse
	 */
	virtual void OnReceivedImpulse( class USequenceOp* ActivatorOp, INT InputLinkIndex );

	/* === USequenceObject interface === */
	/** Get the name of the class used to help out when handling events in UnrealEd.
	 * @return	String name of the helper class.
	 */
	virtual const FString GetEdHelperClassName() const
	{
		return FString( TEXT("UnrealEd.UISequenceObjectHelper") );
	}

	/* === UObject interface === */
	/**
	 * Called after this object has been completely de-serialized.  This version validates that this action has at least one
	 * InputLink, and if not resets this action's InputLinks array to the default version
	 */
	virtual void PostLoad();
};

class UUIAction_ActivateLevelEvent : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_ActivateLevelEvent
    FName EventName;
    //## END PROPS UIAction_ActivateLevelEvent

    DECLARE_CLASS(UUIAction_ActivateLevelEvent,UUIAction,0,Engine)
	void Activated();
};

class UUIAction_ChangeState : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_ChangeState
    class UClass* StateType;
    class UUIState* TargetState;
    BITFIELD bStateChangeFailed:1;
    //## END PROPS UIAction_ChangeState

    DECLARE_ABSTRACT_CLASS(UUIAction_ChangeState,UUIAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIAction_ChangeState)
};

class UUIAction_ActivateState : public UUIAction_ChangeState
{
public:
    //## BEGIN PROPS UIAction_ActivateState
    //## END PROPS UIAction_ActivateState

    DECLARE_CLASS(UUIAction_ActivateState,UUIAction_ChangeState,0,Engine)
	/**
	 * Activates the state associated with this action for all targets.  If any of the targets cannot change states,
	 * disables all output links.
	 */
	virtual void Activated();
};

class UUIAction_DeactivateState : public UUIAction_ChangeState
{
public:
    //## BEGIN PROPS UIAction_DeactivateState
    //## END PROPS UIAction_DeactivateState

    DECLARE_CLASS(UUIAction_DeactivateState,UUIAction_ChangeState,0,Engine)
	/**
	 * Activates the state associated with this action for all targets.  If any of the targets cannot change states,
	 * disables all output links.
	 */
	virtual void Activated();
};

class UUIAction_CreateOnlineGame : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_CreateOnlineGame
    FName DataStoreName;
    FStringNoInit MapName;
    //## END PROPS UIAction_CreateOnlineGame

    DECLARE_CLASS(UUIAction_CreateOnlineGame,UUIAction,0,Engine)
	/** Callback for when the event is activated. */
	virtual void Activated();
};

class UUIAction_DataStore : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_DataStore
    INT BindingIndex;
    //## END PROPS UIAction_DataStore

    DECLARE_ABSTRACT_CLASS(UUIAction_DataStore,UUIAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIAction_DataStore)
};

class UUIAction_DataStoreField : public UUIAction_DataStore
{
public:
    //## BEGIN PROPS UIAction_DataStoreField
    class UUIScene* TargetScene;
    FStringNoInit DataFieldMarkupString;
    //## END PROPS UIAction_DataStoreField

    DECLARE_ABSTRACT_CLASS(UUIAction_DataStoreField,UUIAction_DataStore,0,Engine)
	/**
	 * Resolves the specified markup string into a data store reference and the data provider portion of the markup string.
	 *
	 * @param	out_ResolvedProvider	receives a pointer to the data provider that contains the field referenced by DataFieldMarkupString
	 * @param	out_DataFieldName		receives the portion of DataFieldMarkupString that corresponds to the data field name
	 * @param	out_DataStore			allows the caller to receive a pointer to the data store resolved from the markup string.
	 *
	 * @return	TRUE if the markup was successfully resolved; FALSE otherwise.
	 */
	UBOOL ResolveMarkup( class UUIDataProvider*& out_ResolvedProvider, FString& out_DataFieldName, class UUIDataStore** out_ResolvedDataStore=NULL );
};

class UUIAction_AddDataField : public UUIAction_DataStoreField
{
public:
    //## BEGIN PROPS UIAction_AddDataField
    BITFIELD bPersistentField:1;
    BYTE FieldType GCC_BITFIELD_MAGIC;
    //## END PROPS UIAction_AddDataField

    DECLARE_CLASS(UUIAction_AddDataField,UUIAction_DataStoreField,0,Engine)
	/**
	 * Resolves the datastore specified by DataFieldMarkupString, and adds a new data field to the resolved data provider
	 * using the specified name.
	 */
	virtual void Activated();
};

class UUIAction_GetDatafieldValue : public UUIAction_DataStoreField
{
public:
    //## BEGIN PROPS UIAction_GetDatafieldValue
    FStringNoInit DataFieldStringValue;
    class USurface* DataFieldImageValue;
    TArrayNoInit<INT> DataFieldArrayValue;
    struct FUIRangeData DataFieldRangeValue;
    //## END PROPS UIAction_GetDatafieldValue

    DECLARE_CLASS(UUIAction_GetDatafieldValue,UUIAction_DataStoreField,0,Engine)
	/**
	 * Resolves the datastore specified by DataFieldMarkupString, and copies the value the resolved data provider to
	 * DataFieldStringValue/ImageValue.
	 */
	virtual void Activated();
};

class UUIAction_SetDatafieldValue : public UUIAction_DataStoreField
{
public:
    //## BEGIN PROPS UIAction_SetDatafieldValue
    FStringNoInit DataFieldStringValue;
    class USurface* DataFieldImageValue;
    TArrayNoInit<INT> DataFieldArrayValue;
    struct FUIRangeData DataFieldRangeValue;
    BITFIELD bCommitValueImmediately:1;
    //## END PROPS UIAction_SetDatafieldValue

    DECLARE_CLASS(UUIAction_SetDatafieldValue,UUIAction_DataStoreField,0,Engine)
	/**
	 * Resolves the datastore specified by DataFieldMarkupString, and copies the value from DataFieldStringValue/ImageValue
	 * to the resolved data provider.
	 */
	virtual void Activated();
};

class UUIAction_GetCellValue : public UUIAction_DataStore
{
public:
    //## BEGIN PROPS UIAction_GetCellValue
    INT CollectionIndex;
    FName CellFieldName;
    FStringNoInit CellFieldMarkup;
    FStringNoInit CellFieldStringValue;
    class USurface* CellFieldImageValue;
    struct FUIRangeData CellFieldRangeValue;
    //## END PROPS UIAction_GetCellValue

    DECLARE_CLASS(UUIAction_GetCellValue,UUIAction_DataStore,0,Engine)
	/**
	 * Builds a data store markup string which can be used to access the value of CellFieldName for the element specified
	 * by CollectionIndex from the data store bound to the UIList objects contained in the targets array, and writes either
	 * the markup string or the actual value to the output string variable.
	 */
	virtual void Activated();
};

class UUIAction_PublishValue : public UUIAction_DataStore
{
public:
    //## BEGIN PROPS UIAction_PublishValue
    //## END PROPS UIAction_PublishValue

    DECLARE_CLASS(UUIAction_PublishValue,UUIAction_DataStore,0,Engine)
	/**
	 * If the owning widget implements the UIDataStorePublisher interface, calls the appropriate method for publishing the
	 * owning widget's value to the data store.
	 */
	virtual void Activated();
};

class UUIAction_RefreshBindingValue : public UUIAction_DataStore
{
public:
    //## BEGIN PROPS UIAction_RefreshBindingValue
    //## END PROPS UIAction_RefreshBindingValue

    DECLARE_CLASS(UUIAction_RefreshBindingValue,UUIAction_DataStore,0,Engine)
	/**
	 * If the owning widget implements the UIDataStoreSubscriber interface, calls the appropriate method for refreshing the
	 * owning widget's value from the data store.
	 */
	virtual void Activated();
};

class UUIAction_FindOnlineGames : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_FindOnlineGames
    FName DataStoreName;
    //## END PROPS UIAction_FindOnlineGames

    DECLARE_CLASS(UUIAction_FindOnlineGames,UUIAction,0,Engine)
	/** Callback for when the event is activated. */
	virtual void Activated();
};

class UUIAction_GetLastFocused : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_GetLastFocused
    class UUIScreenObject* Parent;
    class UUIScreenObject* LastFocused;
    //## END PROPS UIAction_GetLastFocused

    DECLARE_CLASS(UUIAction_GetLastFocused,UUIAction,0,Engine)
	/**
	 * Gets the control that was previously focused in the specified parent and stores it in LastFocused.
	 */
	virtual void Activated();
};

class UUIAction_GetListItemCount : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_GetListItemCount
    INT ItemCount;
    //## END PROPS UIAction_GetListItemCount

    DECLARE_CLASS(UUIAction_GetListItemCount,UUIAction,0,Engine)
	/**
	 * Activated handler, copies the number of items in the list to the output variable link.
	 */
	virtual void Activated();
};

struct UIAction_GetLoggedInPlayerCount_eventGetLoginStatus_Parms
{
    UIAction_GetLoggedInPlayerCount_eventGetLoginStatus_Parms(EEventParm)
    {
    }
};
class UUIAction_GetLoggedInPlayerCount : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_GetLoggedInPlayerCount
    INT TotalLoggedIn;
    INT NumOnlineEnabled;
    INT NumLocalOnly;
    INT MaxPlayers;
    //## END PROPS UIAction_GetLoggedInPlayerCount

    void eventGetLoginStatus()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GetLoginStatus),NULL);
    }
    DECLARE_CLASS(UUIAction_GetLoggedInPlayerCount,UUIAction,0,Engine)
	/**
	 * Activated event handler.
	 */
	virtual void Activated(void);
};

struct UIAction_GetNATType_eventGetNATType_Parms
{
    BYTE OutNATType;
    UBOOL ReturnValue;
    UIAction_GetNATType_eventGetNATType_Parms(EEventParm)
    {
    }
};
class UUIAction_GetNATType : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_GetNATType
    BITFIELD bAlwaysOpen:1 GCC_BITFIELD_MAGIC;
    //## END PROPS UIAction_GetNATType

    UBOOL eventGetNATType(BYTE& OutNATType)
    {
        UIAction_GetNATType_eventGetNATType_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.OutNATType=OutNATType;
        ProcessEvent(FindFunctionChecked(ENGINE_GetNATType),&Parms);
        OutNATType=Parms.OutNATType;
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UUIAction_GetNATType,UUIAction,0|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("UI");}

	/**
	 * Activated event handler.
	 */
	virtual void Activated(void);
};

struct UIAction_GetPrivilegeLevel_eventGetPrivilegeLevel_Parms
{
    INT ControllerId;
    BYTE ReturnValue;
    UIAction_GetPrivilegeLevel_eventGetPrivilegeLevel_Parms(EEventParm)
    {
    }
};
class UUIAction_GetPrivilegeLevel : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_GetPrivilegeLevel
    INT PlayerID;
    BYTE PrivMode;
    //## END PROPS UIAction_GetPrivilegeLevel

    BYTE eventGetPrivilegeLevel(INT ControllerId)
    {
        UIAction_GetPrivilegeLevel_eventGetPrivilegeLevel_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.ControllerId=ControllerId;
        ProcessEvent(FindFunctionChecked(ENGINE_GetPrivilegeLevel),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UUIAction_GetPrivilegeLevel,UUIAction,0,Engine)
	/**
	 * Activated event handler.
	 */
	virtual void Activated(void);
};

class UUIAction_GetValue : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_GetValue
    //## END PROPS UIAction_GetValue

    DECLARE_ABSTRACT_CLASS(UUIAction_GetValue,UUIAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIAction_GetValue)
};

class UUIAction_GetListIndex : public UUIAction_GetValue
{
public:
    //## BEGIN PROPS UIAction_GetListIndex
    //## END PROPS UIAction_GetListIndex

    DECLARE_CLASS(UUIAction_GetListIndex,UUIAction_GetValue,0,Engine)
	/**
	 * Copies the value of the current element for the UILists in the Targets array to the Selected Item variable link.
	 */
	virtual void Activated();
};

struct UIAction_JoinOnlineGame_eventJoinOnlineGame_Parms
{
    BYTE ControllerId;
    struct FOnlineGameSearchResult GameToJoin;
    class AWorldInfo* InWorldInfo;
    UIAction_JoinOnlineGame_eventJoinOnlineGame_Parms(EEventParm)
    {
    }
};
class UUIAction_JoinOnlineGame : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_JoinOnlineGame
    struct FOnlineGameSearchResult PendingGameJoin;
    class AWorldInfo* CachedWorldInfo;
    BITFIELD bIsDone:1;
    BITFIELD bResult:1;
    //## END PROPS UIAction_JoinOnlineGame

    void eventJoinOnlineGame(BYTE ControllerId,struct FOnlineGameSearchResult GameToJoin,class AWorldInfo* InWorldInfo)
    {
        UIAction_JoinOnlineGame_eventJoinOnlineGame_Parms Parms(EC_EventParm);
        Parms.ControllerId=ControllerId;
        Parms.GameToJoin=GameToJoin;
        Parms.InWorldInfo=InWorldInfo;
        ProcessEvent(FindFunctionChecked(ENGINE_JoinOnlineGame),&Parms);
    }
    DECLARE_CLASS(UUIAction_JoinOnlineGame,UUIAction,0,Engine)
	/** Callback for when the event is activated. */
	virtual void Activated();

	/**
	 * Polls to see if the async action is done
	 *
	 * @param ignored
	 *
	 * @return TRUE if the operation has completed, FALSE otherwise
	 */
	UBOOL UpdateOp(FLOAT);
};

class UUIAction_MoveListItem : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_MoveListItem
    INT ElementIndex;
    INT MoveCount;
    //## END PROPS UIAction_MoveListItem

    DECLARE_CLASS(UUIAction_MoveListItem,UUIAction,0,Engine)
	/**
	 * Executes the logic for this action.
	 */
	virtual void Activated();
};

class UUIAction_PlayUISoundCue : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_PlayUISoundCue
    FStringNoInit SoundCueName;
    //## END PROPS UIAction_PlayUISoundCue

    DECLARE_CLASS(UUIAction_PlayUISoundCue,UUIAction,0,Engine)
	/**
	 * Plays the UISoundCue indicated by SoundCueName.
	 */
	virtual void Activated();
};

class UUIAction_RefreshStats : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_RefreshStats
    //## END PROPS UIAction_RefreshStats

    DECLARE_CLASS(UUIAction_RefreshStats,UUIAction,0,Engine)
	/** Callback for when the event is activated. */
	virtual void Activated();
};

struct UIAction_SaveProfileSettings_eventClearDelegate_Parms
{
    UIAction_SaveProfileSettings_eventClearDelegate_Parms(EEventParm)
    {
    }
};
struct UIAction_SaveProfileSettings_eventRegisterDelegate_Parms
{
    UIAction_SaveProfileSettings_eventRegisterDelegate_Parms(EEventParm)
    {
    }
};
class UUIAction_SaveProfileSettings : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_SaveProfileSettings
    BITFIELD bIsDone:1 GCC_BITFIELD_MAGIC;
    BITFIELD bWroteProfile:1;
    //## END PROPS UIAction_SaveProfileSettings

    void eventClearDelegate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ClearDelegate),NULL);
    }
    void eventRegisterDelegate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_RegisterDelegate),NULL);
    }
    DECLARE_CLASS(UUIAction_SaveProfileSettings,UUIAction,0,Engine)
	/** Callback for when the event is activated. */
	virtual void Activated();

	/**
	 * Polls to see if the async action is done
	 *
	 * @param ignored
	 *
	 * @return TRUE if the operation has completed, FALSE otherwise
	 */
	UBOOL UpdateOp(FLOAT)
	{
		// Activate the output links based upon whether the call worked
		if (bWroteProfile == TRUE)
		{
			OutputLinks(1).ActivateOutputLink();
		}
		else
		{
			OutputLinks(0).ActivateOutputLink();
		}

		return bIsDone;
	}
};

class UUIAction_Scene : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_Scene
    class UUIScene* Scene;
    //## END PROPS UIAction_Scene

    DECLARE_ABSTRACT_CLASS(UUIAction_Scene,UUIAction,0,Engine)
	/** USequenceOp interface */
	/**
	 * Allows the operation to initialize the values for any VariableLinks that need to be filled prior to executing this
	 * op's logic.  This is a convenient hook for filling VariableLinks that aren't necessarily associated with an actual
	 * member variable of this op, or for VariableLinks that are used in the execution of this ops logic.
	 *
	 * Initializes the value of the Scene linked variables
	 */
	virtual void InitializeLinkedVariableValues();
};

class UUIAction_CloseScene : public UUIAction_Scene
{
public:
    //## BEGIN PROPS UIAction_CloseScene
    //## END PROPS UIAction_CloseScene

    DECLARE_CLASS(UUIAction_CloseScene,UUIAction_Scene,0,Engine)
	virtual void Activated();
};

class UUIAction_OpenScene : public UUIAction_Scene
{
public:
    //## BEGIN PROPS UIAction_OpenScene
    class UUIScene* OpenedScene;
    //## END PROPS UIAction_OpenScene

    DECLARE_CLASS(UUIAction_OpenScene,UUIAction_Scene,0,Engine)
	virtual void Activated();
};

class UUIAction_SetFocus : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_SetFocus
    //## END PROPS UIAction_SetFocus

    DECLARE_CLASS(UUIAction_SetFocus,UUIAction,0,Engine)
	/**
	 * Calls set focus on all attached targets.
	 */
	virtual void Activated();
};

struct UIAction_ShowDeviceSelectionUI_eventSelectDevice_Parms
{
    UIAction_ShowDeviceSelectionUI_eventSelectDevice_Parms(EEventParm)
    {
    }
};
class UUIAction_ShowDeviceSelectionUI : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_ShowDeviceSelectionUI
    INT SizeNeeded;
    BITFIELD bForceShowUI:1;
    BITFIELD bIsDone:1;
    BITFIELD bResult:1;
    INT DeviceID;
    FStringNoInit DeviceName;
    //## END PROPS UIAction_ShowDeviceSelectionUI

    virtual void WriteToVariables();
    DECLARE_FUNCTION(execWriteToVariables)
    {
        P_FINISH;
        WriteToVariables();
    }
    void eventSelectDevice()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SelectDevice),NULL);
    }
    DECLARE_CLASS(UUIAction_ShowDeviceSelectionUI,UUIAction,0,Engine)
	/**
	 * Lets script code trigger an async call to the online subsytem
	 */
	virtual void Activated(void)
	{
		bIsDone=false;
		bResult=false;
		eventSelectDevice();
	}

	/**
	 * Polls to see if the async action is done
	 *
	 * @param ignored
	 *
	 * @return TRUE if the operation has completed, FALSE otherwise
	 */
	UBOOL UpdateOp(FLOAT)
	{
		if(bIsDone)
		{
			if(bResult)
			{
				OutputLinks(1).ActivateOutputLink();
			}
			else
			{
				OutputLinks(0).ActivateOutputLink();
			}
		}
		return bIsDone;
	}
};

class UUIAction_ShowGamercardForServerHost : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_ShowGamercardForServerHost
    //## END PROPS UIAction_ShowGamercardForServerHost

    DECLARE_CLASS(UUIAction_ShowGamercardForServerHost,UUIAction,0,Engine)
	/** Callback for when the event is activated. */
	virtual void Activated();
};

struct UIAction_ShowKeyboardUI_eventReadKeyboardInput_Parms
{
    UIAction_ShowKeyboardUI_eventReadKeyboardInput_Parms(EEventParm)
    {
    }
};
class UUIAction_ShowKeyboardUI : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_ShowKeyboardUI
    FStringNoInit TitleText;
    FStringNoInit DefaultText;
    FStringNoInit DescriptionText;
    BITFIELD bShouldValidate:1;
    BITFIELD bIsPassword:1;
    BITFIELD bIsDone:1;
    FStringNoInit StringReturnValue;
    //## END PROPS UIAction_ShowKeyboardUI

    void eventReadKeyboardInput()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ReadKeyboardInput),NULL);
    }
    DECLARE_CLASS(UUIAction_ShowKeyboardUI,UUIAction,0,Engine)
	/**
	 * Lets script code trigger an async call to the online subsytem
	 */
	virtual void Activated(void)
	{
		eventReadKeyboardInput();
	}

	/**
	 * Polls to see if the async action is done
	 *
	 * @param ignored
	 *
	 * @return TRUE if the operation has completed, FALSE otherwise
	 */
	UBOOL UpdateOp(FLOAT)
	{
		return bIsDone;
	}
};

struct UIAction_ShowLoginUI_eventShowUI_Parms
{
    UIAction_ShowLoginUI_eventShowUI_Parms(EEventParm)
    {
    }
};
class UUIAction_ShowLoginUI : public UUIAction
{
public:
    //## BEGIN PROPS UIAction_ShowLoginUI
    BITFIELD bIsDone:1 GCC_BITFIELD_MAGIC;
    BITFIELD bShowOnlineOnly:1;
    //## END PROPS UIAction_ShowLoginUI

    void eventShowUI()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ShowUI),NULL);
    }
    DECLARE_CLASS(UUIAction_ShowLoginUI,UUIAction,0,Engine)
	/**
	 * Lets script code trigger an async call to the online subsytem
	 */
	virtual void Activated(void)
	{
		bIsDone=false;
		eventShowUI();
	}

	/**
	 * Polls to see if the async action is done
	 *
	 * @param ignored
	 *
	 * @return TRUE if the operation has completed, FALSE otherwise
	 */
	UBOOL UpdateOp(FLOAT)
	{
		return bIsDone;
	}
};

struct UIEvent_eventShouldAlwaysInstance_Parms
{
    UBOOL ReturnValue;
    UIEvent_eventShouldAlwaysInstance_Parms(EEventParm)
    {
    }
};
struct UIEvent_eventAllowEventActivation_Parms
{
    INT ControllerIndex;
    class UUIScreenObject* InEventOwner;
    class UObject* InEventActivator;
    UBOOL bActivateImmediately;
    TArray<INT> IndicesToActivate;
    UBOOL ReturnValue;
    UIEvent_eventAllowEventActivation_Parms(EEventParm)
    {
    }
};
class UUIEvent : public USequenceEvent
{
public:
    //## BEGIN PROPS UIEvent
    class UUIScreenObject* EventOwner;
    class UObject* EventActivator;
    FStringNoInit Description;
    BITFIELD bShouldRegisterEvent:1;
    BITFIELD bPropagateEvent:1;
    FScriptDelegate __AllowEventActivation__Delegate;
    //## END PROPS UIEvent

    class UUIScreenObject* GetOwner() const;
    class UUIScene* GetOwnerScene() const;
    DECLARE_FUNCTION(execGetOwner)
    {
        P_FINISH;
        *(class UUIScreenObject**)Result=GetOwner();
    }
    DECLARE_FUNCTION(execGetOwnerScene)
    {
        P_FINISH;
        *(class UUIScene**)Result=GetOwnerScene();
    }
    DECLARE_FUNCTION(execCanBeActivated);
    DECLARE_FUNCTION(execConditionalActivateUIEvent);
    DECLARE_FUNCTION(execActivateUIEvent);
    UBOOL eventShouldAlwaysInstance()
    {
        UIEvent_eventShouldAlwaysInstance_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldAlwaysInstance),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL delegateAllowEventActivation(INT ControllerIndex,class UUIScreenObject* InEventOwner,class UObject* InEventActivator,UBOOL bActivateImmediately,const TArray<INT>& IndicesToActivate)
    {
        UIEvent_eventAllowEventActivation_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.ControllerIndex=ControllerIndex;
        Parms.InEventOwner=InEventOwner;
        Parms.InEventActivator=InEventActivator;
        Parms.bActivateImmediately=bActivateImmediately ? FIRST_BITFIELD : FALSE;
        Parms.IndicesToActivate=IndicesToActivate;
        ProcessDelegate(ENGINE_AllowEventActivation,&__AllowEventActivation__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_ABSTRACT_CLASS(UUIEvent,USequenceEvent,0,Engine)
	/** USequenceOp interface */
	/**
	 * Allows the operation to initialize the values for any VariableLinks that need to be filled prior to executing this
	 * op's logic.  This is a convenient hook for filling VariableLinks that aren't necessarily associated with an actual
	 * member variable of this op, or for VariableLinks that are used in the execution of this ops logic.
	 *
	 * Initializes the value of the "Activator", "Player Index", and "Gamepad Id" VariableLinks
	 */
	virtual void InitializeLinkedVariableValues();

	/** USequenceEvent inteface */
	virtual UBOOL RegisterEvent();

	/**
	 * This version of the DrawSeqObj function only draws the UIEvent if it is the UIEvent_MetaObject type.
	 */
	virtual void DrawSeqObj(FCanvas* Canvas, UBOOL bSelected, UBOOL bMouseOver, INT MouseOverConnType, INT MouseOverConnIndex, FLOAT MouseOverTime);

	/**
	 * Determines whether this UIAction can be activated.
	 *
	 * @param	ControllerIndex			the index of the player that activated this event
	 * @param	InEventOwner			the widget that contains this UIEvent
	 * @param	InEventActivator		an optional object that can be used for various purposes in UIEvents
	 * @param	bActivateImmediately	specify true to indicate that we'd like to know whether this event can be activated immediately
	 * @param	IndicesToActivate		Indexes into this UIEvent's Output array to activate.  If not specified, all output links
	 *									will be activated
	 */
	virtual UBOOL CanBeActivated( INT ControllerIndex, UUIScreenObject* InEventOwner, UObject* InEventActivator=NULL, UBOOL bActivateImmediately=FALSE, const TArray<INT>* IndicesToActivate=NULL );

	/**
	 * Activates this event if CanBeActivated returns TRUE.
	 *
	 * @param	ControllerIndex			the index of the player that activated this event
	 * @param	InEventOwner			the widget that contains this UIEvent
	 * @param	InEventActivator		an optional object that can be used for various purposes in UIEvents
	 * @param	bActivateImmediately	specify true to indicate that we'd like to know whether this event can be activated immediately
	 * @param	IndicesToActivate		Indexes into this UIEvent's Output array to activate.  If not specified, all output links
	 *									will be activated
	 *
	 * @return	TRUE if the event was activated successfully, FALSE if the event couldn't be activated.
	 */
	virtual UBOOL ConditionalActivateUIEvent( INT ControllerIndex, UUIScreenObject* InEventOwner, UObject* InEventActivator=NULL, UBOOL bActivateImmediately=FALSE, const TArray<INT>* IndicesToActivate=NULL );

	/**
	 * Activates this UIEvent, adding it the list of active sequence operations in the owning widget's EventProvider
	 *
	 * @param	ControllerIndex			the index of the player that activated this event
	 * @param	InEventOwner			the widget that contains this UIEvent
	 * @param	InEventActivator		an optional object that can be used for various purposes in UIEvents
	 * @param	bActivateImmediately	specify true to indicate that we'd like to know whether this event can be activated immediately
	 * @param	IndicesToActivate		Indexes into this UIEvent's Output array to activate.  If not specified, all output links
	 *									will be activated
	 *
	 * @return	TRUE if the event was activated successfully, FALSE if the event couldn't be activated.
	 */
	virtual UBOOL ActivateUIEvent( INT ControllerIndex, UUIScreenObject* InEventOwner, UObject* InEventActivator=NULL, UBOOL bActivateImmediately=FALSE, const TArray<INT>* IndicesToActivate=NULL );

	/** Get the name of the class used to help out when handling events in UnrealEd.
	 * @return	String name of the helper class.
	 */
	virtual const FString GetEdHelperClassName() const
	{
		return FString( TEXT("UnrealEd.UISequenceObjectHelper") );
	}

private:
	// hide these inherited methods from UIEvents
	virtual UBOOL CheckActivate(AActor *InOriginator, AActor *InInstigator, UBOOL bTest=FALSE, TArray<INT>* ActivateIndices = NULL, UBOOL bPushTop = FALSE) { check(0); return FALSE; }
	virtual void ActivateEvent(AActor *InOriginator, AActor *InInstigator, TArray<INT> *ActivateIndices = NULL, UBOOL bPushTop = FALSE) { check(0); }
};

class UUIEvent_MetaObject : public UUIEvent, public FCallbackEventDevice
{
public:
    //## BEGIN PROPS UIEvent_MetaObject
    //## END PROPS UIEvent_MetaObject

    DECLARE_CLASS(UUIEvent_MetaObject,UUIEvent,0|CLASS_Transient,Engine)

	/**
	 * Sets up any callbacks that this object may need to respond to.
	 */
	void RegisterCallbacks();

	/**
	 * Removes all of the callbacks for this object.
	 */
	void FinishDestroy();

	/**
	 * Gets the array of input actions from the parent state and creates output links corresponding to the input actions.
	 */
	void ReadInputActionsFromState();

	/**
	 * Saves the current connections to the parent state's input action array.
	 *
	 * @return	TRUE if the state's list of active input keys was modified.
	 */
	UBOOL SaveInputActionsToState();

	/** Get the name of the class used to help out when handling events in UnrealEd.
	 * @return	String name of the helper class.
	 */
	virtual const FString GetEdHelperClassName() const
	{
		return FString( TEXT("UnrealEd.UIEvent_MetaObjectHelper") );
	}

	/** Rebuilds the list of output links using the items in the State's StateInputActions array. */
	void RebuildOutputLinks();

	/**
	 * Generates a description for the action specified in the form: KeyName (InputEventType)
	 *
	 * @param InAction			The action to generate a description for.
	 * @param OutDescription	Storage string for the generated action.
	 */
	void GenerateActionDescription(const FInputKeyAction &InAction, FString& OutDescription);

	/** @return Returns the owner state of this event meta object. */
	UUIState* GetOwnerState();

	/**
	 * Responds to callback events and updates the metaobject as necessary.
	 *
	 * @param	InType		The type of callback event that was sent.
	 */
	void Send( ECallbackEventType InType );
};

class UUIEvent_OnClick : public UUIEvent
{
public:
    //## BEGIN PROPS UIEvent_OnClick
    //## END PROPS UIEvent_OnClick

    DECLARE_CLASS(UUIEvent_OnClick,UUIEvent,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_OnClick)
};

class UUIEvent_OnDoubleClick : public UUIEvent
{
public:
    //## BEGIN PROPS UIEvent_OnDoubleClick
    //## END PROPS UIEvent_OnDoubleClick

    DECLARE_CLASS(UUIEvent_OnDoubleClick,UUIEvent,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_OnDoubleClick)
};

class UUIEvent_ProcessInput : public UUIEvent
{
public:
    //## BEGIN PROPS UIEvent_ProcessInput
    TMultiMap<FName,FInputKeyAction> ActionMap;
    //## END PROPS UIEvent_ProcessInput

    DECLARE_CLASS(UUIEvent_ProcessInput,UUIEvent,0|CLASS_Transient,Engine)

	/**
	 * This version of the DrawSeqObj function does nothing to make sure this object is hidden.
	 */
	void DrawSeqObj(FCanvas* Canvas, UBOOL bSelected, UBOOL bMouseOver, INT MouseOverConnType, INT MouseOverConnIndex, FLOAT MouseOverTime)
	{
		// Do nothing.
	}


	/** UObject interface */
	virtual void AddReferencedObjects( TArray<UObject*>& ObjectArray );
	virtual void Serialize( FArchive& Ar );
};

class UUIEvent_Scene : public UUIEvent
{
public:
    //## BEGIN PROPS UIEvent_Scene
    //## END PROPS UIEvent_Scene

    DECLARE_ABSTRACT_CLASS(UUIEvent_Scene,UUIEvent,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_Scene)
};

class UUIEvent_State : public UUIEvent
{
public:
    //## BEGIN PROPS UIEvent_State
    //## END PROPS UIEvent_State

    DECLARE_ABSTRACT_CLASS(UUIEvent_State,UUIEvent,0,Engine)
	/**
	 * Fills in the value of the "State" variable link with the State that the widget is currently in.
	 */
	virtual void InitializeLinkedVariableValues();
};

class UUIEvent_OnEnterState : public UUIEvent_State
{
public:
    //## BEGIN PROPS UIEvent_OnEnterState
    //## END PROPS UIEvent_OnEnterState

    DECLARE_CLASS(UUIEvent_OnEnterState,UUIEvent_State,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_OnEnterState)
};

class UUIEvent_OnLeaveState : public UUIEvent_State
{
public:
    //## BEGIN PROPS UIEvent_OnLeaveState
    //## END PROPS UIEvent_OnLeaveState

    DECLARE_CLASS(UUIEvent_OnLeaveState,UUIEvent_State,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_OnLeaveState)
};

class UUIEvent_SubmitData : public UUIEvent
{
public:
    //## BEGIN PROPS UIEvent_SubmitData
    //## END PROPS UIEvent_SubmitData

    DECLARE_ABSTRACT_CLASS(UUIEvent_SubmitData,UUIEvent,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_SubmitData)
};

class UUIEvent_SubmitListData : public UUIEvent_SubmitData
{
public:
    //## BEGIN PROPS UIEvent_SubmitListData
    INT SelectedItem;
    //## END PROPS UIEvent_SubmitListData

    DECLARE_CLASS(UUIEvent_SubmitListData,UUIEvent_SubmitData,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_SubmitListData)
};

class UUIEvent_SubmitTextData : public UUIEvent_SubmitData
{
public:
    //## BEGIN PROPS UIEvent_SubmitTextData
    FStringNoInit Value;
    BITFIELD bClearValue:1;
    //## END PROPS UIEvent_SubmitTextData

    DECLARE_CLASS(UUIEvent_SubmitTextData,UUIEvent_SubmitData,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_SubmitTextData)
};

class UUIEvent_TabControl : public UUIEvent
{
public:
    //## BEGIN PROPS UIEvent_TabControl
    class UUITabControl* OwnerTabControl;
    //## END PROPS UIEvent_TabControl

    DECLARE_ABSTRACT_CLASS(UUIEvent_TabControl,UUIEvent,0,Engine)
	/** USequenceOp interface */
	/**
	 * Allows the operation to initialize the values for any VariableLinks that need to be filled prior to executing this
	 * op's logic.  This is a convenient hook for filling VariableLinks that aren't necessarily associated with an actual
	 * member variable of this op, or for VariableLinks that are used in the execution of this ops logic.
	 *
	 * Initializes the value of the "OwnerTabControl" linked variable by copying the value of the activator tab page's tab
	 * control into the linked variable.
	 */
	virtual void InitializeLinkedVariableValues();
};

class UUIEvent_ValueChanged : public UUIEvent
{
public:
    //## BEGIN PROPS UIEvent_ValueChanged
    //## END PROPS UIEvent_ValueChanged

    DECLARE_ABSTRACT_CLASS(UUIEvent_ValueChanged,UUIEvent,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_ValueChanged)
};

class UUIEvent_CheckValueChanged : public UUIEvent_ValueChanged
{
public:
    //## BEGIN PROPS UIEvent_CheckValueChanged
    //## END PROPS UIEvent_CheckValueChanged

    DECLARE_CLASS(UUIEvent_CheckValueChanged,UUIEvent_ValueChanged,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_CheckValueChanged)
};

class UUIEvent_ComboboxValueChanged : public UUIEvent_ValueChanged
{
public:
    //## BEGIN PROPS UIEvent_ComboboxValueChanged
    //## END PROPS UIEvent_ComboboxValueChanged

    DECLARE_CLASS(UUIEvent_ComboboxValueChanged,UUIEvent_ValueChanged,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_ComboboxValueChanged)
};

class UUIEvent_ListIndexChanged : public UUIEvent_ValueChanged
{
public:
    //## BEGIN PROPS UIEvent_ListIndexChanged
    INT PreviousIndex;
    INT CurrentIndex;
    //## END PROPS UIEvent_ListIndexChanged

    DECLARE_CLASS(UUIEvent_ListIndexChanged,UUIEvent_ValueChanged,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_ListIndexChanged)
};

class UUIEvent_NumericOptionListValueChanged : public UUIEvent_ValueChanged
{
public:
    //## BEGIN PROPS UIEvent_NumericOptionListValueChanged
    //## END PROPS UIEvent_NumericOptionListValueChanged

    DECLARE_CLASS(UUIEvent_NumericOptionListValueChanged,UUIEvent_ValueChanged,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_NumericOptionListValueChanged)
};

class UUIEvent_OptionListValueChanged : public UUIEvent_ValueChanged
{
public:
    //## BEGIN PROPS UIEvent_OptionListValueChanged
    //## END PROPS UIEvent_OptionListValueChanged

    DECLARE_CLASS(UUIEvent_OptionListValueChanged,UUIEvent_ValueChanged,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_OptionListValueChanged)
};

class UUIEvent_ProgressBarValueChanged : public UUIEvent_ValueChanged
{
public:
    //## BEGIN PROPS UIEvent_ProgressBarValueChanged
    //## END PROPS UIEvent_ProgressBarValueChanged

    DECLARE_CLASS(UUIEvent_ProgressBarValueChanged,UUIEvent_ValueChanged,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_ProgressBarValueChanged)
};

class UUIEvent_SliderValueChanged : public UUIEvent_ValueChanged
{
public:
    //## BEGIN PROPS UIEvent_SliderValueChanged
    //## END PROPS UIEvent_SliderValueChanged

    DECLARE_CLASS(UUIEvent_SliderValueChanged,UUIEvent_ValueChanged,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_SliderValueChanged)
};

class UUIEvent_TextValueChanged : public UUIEvent_ValueChanged
{
public:
    //## BEGIN PROPS UIEvent_TextValueChanged
    //## END PROPS UIEvent_TextValueChanged

    DECLARE_CLASS(UUIEvent_TextValueChanged,UUIEvent_ValueChanged,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIEvent_TextValueChanged)
};

class USeqVar_UIRange : public USequenceVariable
{
public:
    //## BEGIN PROPS SeqVar_UIRange
    struct FUIRangeData RangeValue;
    //## END PROPS SeqVar_UIRange

    DECLARE_CLASS(USeqVar_UIRange,USequenceVariable,0,Engine)
	virtual struct FUIRangeData* GetUIRangeRef();
	virtual FString GetValueStr();
	virtual UBOOL SupportsProperty(UProperty *Property);

	/**
	 * Copies the value stored by this SequenceVariable to the SequenceOp member variable that it's associated with.
	 */
	virtual void PublishValue(USequenceOp *Op, UProperty *Property, FSeqVarLink &VarLink);

	/**
	 * Copy the value from the member variable this VariableLink is associated with to this VariableLink's value.
	 */
	virtual void PopulateValue(USequenceOp *Op, UProperty *Property, FSeqVarLink &VarLink);
};

#endif // !INCLUDED_ENGINE_UISEQUENCE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UUIAction,-1,execGetOwnerScene);
AUTOGENERATE_FUNCTION(UUIAction,-1,execGetOwner);
AUTOGENERATE_FUNCTION(UUIAction_ShowDeviceSelectionUI,-1,execWriteToVariables);
AUTOGENERATE_FUNCTION(UUIEvent,-1,execActivateUIEvent);
AUTOGENERATE_FUNCTION(UUIEvent,-1,execConditionalActivateUIEvent);
AUTOGENERATE_FUNCTION(UUIEvent,-1,execCanBeActivated);
AUTOGENERATE_FUNCTION(UUIEvent,-1,execGetOwnerScene);
AUTOGENERATE_FUNCTION(UUIEvent,-1,execGetOwner);
AUTOGENERATE_FUNCTION(UUISequence,-1,execRemoveSequenceObjects);
AUTOGENERATE_FUNCTION(UUISequence,-1,execRemoveSequenceObject);
AUTOGENERATE_FUNCTION(UUISequence,-1,execAddSequenceObject);
AUTOGENERATE_FUNCTION(UUISequence,-1,execGetUIEvents);
AUTOGENERATE_FUNCTION(UUISequence,-1,execGetOwner);
AUTOGENERATE_FUNCTION(UUIStateSequence,-1,execGetOwnerState);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ENGINE_UISEQUENCE_NATIVE_DEFS
#define ENGINE_UISEQUENCE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(Engine,USeqVar_UIRange);
DECLARE_NATIVE_TYPE(Engine,UUIAction);
DECLARE_NATIVE_TYPE(Engine,UUIAction_ActivateLevelEvent);
DECLARE_NATIVE_TYPE(Engine,UUIAction_ActivateState);
DECLARE_NATIVE_TYPE(Engine,UUIAction_AddDataField);
DECLARE_NATIVE_TYPE(Engine,UUIAction_ChangeState);
DECLARE_NATIVE_TYPE(Engine,UUIAction_CloseScene);
DECLARE_NATIVE_TYPE(Engine,UUIAction_CreateOnlineGame);
DECLARE_NATIVE_TYPE(Engine,UUIAction_DataStore);
DECLARE_NATIVE_TYPE(Engine,UUIAction_DataStoreField);
DECLARE_NATIVE_TYPE(Engine,UUIAction_DeactivateState);
DECLARE_NATIVE_TYPE(Engine,UUIAction_FindOnlineGames);
DECLARE_NATIVE_TYPE(Engine,UUIAction_GetCellValue);
DECLARE_NATIVE_TYPE(Engine,UUIAction_GetDatafieldValue);
DECLARE_NATIVE_TYPE(Engine,UUIAction_GetLastFocused);
DECLARE_NATIVE_TYPE(Engine,UUIAction_GetListIndex);
DECLARE_NATIVE_TYPE(Engine,UUIAction_GetListItemCount);
DECLARE_NATIVE_TYPE(Engine,UUIAction_GetLoggedInPlayerCount);
DECLARE_NATIVE_TYPE(Engine,UUIAction_GetNATType);
DECLARE_NATIVE_TYPE(Engine,UUIAction_GetPrivilegeLevel);
DECLARE_NATIVE_TYPE(Engine,UUIAction_GetValue);
DECLARE_NATIVE_TYPE(Engine,UUIAction_JoinOnlineGame);
DECLARE_NATIVE_TYPE(Engine,UUIAction_MoveListItem);
DECLARE_NATIVE_TYPE(Engine,UUIAction_OpenScene);
DECLARE_NATIVE_TYPE(Engine,UUIAction_PlayUISoundCue);
DECLARE_NATIVE_TYPE(Engine,UUIAction_PublishValue);
DECLARE_NATIVE_TYPE(Engine,UUIAction_RefreshBindingValue);
DECLARE_NATIVE_TYPE(Engine,UUIAction_RefreshStats);
DECLARE_NATIVE_TYPE(Engine,UUIAction_SaveProfileSettings);
DECLARE_NATIVE_TYPE(Engine,UUIAction_Scene);
DECLARE_NATIVE_TYPE(Engine,UUIAction_SetDatafieldValue);
DECLARE_NATIVE_TYPE(Engine,UUIAction_SetFocus);
DECLARE_NATIVE_TYPE(Engine,UUIAction_ShowDeviceSelectionUI);
DECLARE_NATIVE_TYPE(Engine,UUIAction_ShowGamercardForServerHost);
DECLARE_NATIVE_TYPE(Engine,UUIAction_ShowKeyboardUI);
DECLARE_NATIVE_TYPE(Engine,UUIAction_ShowLoginUI);
DECLARE_NATIVE_TYPE(Engine,UUIEvent);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_CheckValueChanged);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_ComboboxValueChanged);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_ListIndexChanged);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_MetaObject);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_NumericOptionListValueChanged);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_OnClick);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_OnDoubleClick);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_OnEnterState);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_OnLeaveState);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_OptionListValueChanged);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_ProcessInput);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_ProgressBarValueChanged);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_Scene);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_SliderValueChanged);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_State);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_SubmitData);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_SubmitListData);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_SubmitTextData);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_TabControl);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_TextValueChanged);
DECLARE_NATIVE_TYPE(Engine,UUIEvent_ValueChanged);
DECLARE_NATIVE_TYPE(Engine,UUISequence);
DECLARE_NATIVE_TYPE(Engine,UUIStateSequence);

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE_UISEQUENCE \
	USeqVar_UIRange::StaticClass(); \
	UUIAction::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUUIActionNative; \
	UUIAction_ActivateLevelEvent::StaticClass(); \
	UUIAction_ActivateState::StaticClass(); \
	UUIAction_AddDataField::StaticClass(); \
	UUIAction_ChangeState::StaticClass(); \
	UUIAction_CloseScene::StaticClass(); \
	UUIAction_CreateOnlineGame::StaticClass(); \
	UUIAction_DataStore::StaticClass(); \
	UUIAction_DataStoreField::StaticClass(); \
	UUIAction_DeactivateState::StaticClass(); \
	UUIAction_FindOnlineGames::StaticClass(); \
	UUIAction_GetCellValue::StaticClass(); \
	UUIAction_GetDatafieldValue::StaticClass(); \
	UUIAction_GetLastFocused::StaticClass(); \
	UUIAction_GetListIndex::StaticClass(); \
	UUIAction_GetListItemCount::StaticClass(); \
	UUIAction_GetLoggedInPlayerCount::StaticClass(); \
	UUIAction_GetNATType::StaticClass(); \
	UUIAction_GetPrivilegeLevel::StaticClass(); \
	UUIAction_GetValue::StaticClass(); \
	UUIAction_JoinOnlineGame::StaticClass(); \
	UUIAction_MoveListItem::StaticClass(); \
	UUIAction_OpenScene::StaticClass(); \
	UUIAction_PlayUISoundCue::StaticClass(); \
	UUIAction_PublishValue::StaticClass(); \
	UUIAction_RefreshBindingValue::StaticClass(); \
	UUIAction_RefreshStats::StaticClass(); \
	UUIAction_SaveProfileSettings::StaticClass(); \
	UUIAction_Scene::StaticClass(); \
	UUIAction_SetDatafieldValue::StaticClass(); \
	UUIAction_SetFocus::StaticClass(); \
	UUIAction_ShowDeviceSelectionUI::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUUIAction_ShowDeviceSelectionUINative; \
	UUIAction_ShowGamercardForServerHost::StaticClass(); \
	UUIAction_ShowKeyboardUI::StaticClass(); \
	UUIAction_ShowLoginUI::StaticClass(); \
	UUIEvent::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUUIEventNative; \
	UUIEvent_CheckValueChanged::StaticClass(); \
	UUIEvent_ComboboxValueChanged::StaticClass(); \
	UUIEvent_ListIndexChanged::StaticClass(); \
	UUIEvent_MetaObject::StaticClass(); \
	UUIEvent_NumericOptionListValueChanged::StaticClass(); \
	UUIEvent_OnClick::StaticClass(); \
	UUIEvent_OnDoubleClick::StaticClass(); \
	UUIEvent_OnEnterState::StaticClass(); \
	UUIEvent_OnLeaveState::StaticClass(); \
	UUIEvent_OptionListValueChanged::StaticClass(); \
	UUIEvent_ProcessInput::StaticClass(); \
	UUIEvent_ProgressBarValueChanged::StaticClass(); \
	UUIEvent_Scene::StaticClass(); \
	UUIEvent_SliderValueChanged::StaticClass(); \
	UUIEvent_State::StaticClass(); \
	UUIEvent_SubmitData::StaticClass(); \
	UUIEvent_SubmitListData::StaticClass(); \
	UUIEvent_SubmitTextData::StaticClass(); \
	UUIEvent_TabControl::StaticClass(); \
	UUIEvent_TextValueChanged::StaticClass(); \
	UUIEvent_ValueChanged::StaticClass(); \
	UUISequence::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUUISequenceNative; \
	UUIStateSequence::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUUIStateSequenceNative; \

#endif // ENGINE_UISEQUENCE_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UUIAction) GEngineUUIActionNatives[] = 
{ 
	MAP_NATIVE(UUIAction,execGetOwnerScene)
	MAP_NATIVE(UUIAction,execGetOwner)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UUIAction);

NATIVE_INFO(UUIAction_ShowDeviceSelectionUI) GEngineUUIAction_ShowDeviceSelectionUINatives[] = 
{ 
	MAP_NATIVE(UUIAction_ShowDeviceSelectionUI,execWriteToVariables)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UUIAction_ShowDeviceSelectionUI);

NATIVE_INFO(UUIEvent) GEngineUUIEventNatives[] = 
{ 
	MAP_NATIVE(UUIEvent,execActivateUIEvent)
	MAP_NATIVE(UUIEvent,execConditionalActivateUIEvent)
	MAP_NATIVE(UUIEvent,execCanBeActivated)
	MAP_NATIVE(UUIEvent,execGetOwnerScene)
	MAP_NATIVE(UUIEvent,execGetOwner)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UUIEvent);

NATIVE_INFO(UUISequence) GEngineUUISequenceNatives[] = 
{ 
	MAP_NATIVE(UUISequence,execRemoveSequenceObjects)
	MAP_NATIVE(UUISequence,execRemoveSequenceObject)
	MAP_NATIVE(UUISequence,execAddSequenceObject)
	MAP_NATIVE(UUISequence,execGetUIEvents)
	MAP_NATIVE(UUISequence,execGetOwner)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UUISequence);

NATIVE_INFO(UUIStateSequence) GEngineUUIStateSequenceNatives[] = 
{ 
	MAP_NATIVE(UUIStateSequence,execGetOwnerState)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UUIStateSequence);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(U,SeqVar_UIRange,RangeValue)
VERIFY_CLASS_SIZE_NODIE(USeqVar_UIRange)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction,GamepadID)
VERIFY_CLASS_SIZE_NODIE(UUIAction)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_ActivateLevelEvent,EventName)
VERIFY_CLASS_SIZE_NODIE(UUIAction_ActivateLevelEvent)
VERIFY_CLASS_SIZE_NODIE(UUIAction_ActivateState)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_AddDataField,FieldType)
VERIFY_CLASS_SIZE_NODIE(UUIAction_AddDataField)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_ChangeState,StateType)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_ChangeState,TargetState)
VERIFY_CLASS_SIZE_NODIE(UUIAction_ChangeState)
VERIFY_CLASS_SIZE_NODIE(UUIAction_CloseScene)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_CreateOnlineGame,DataStoreName)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_CreateOnlineGame,MapName)
VERIFY_CLASS_SIZE_NODIE(UUIAction_CreateOnlineGame)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_DataStore,BindingIndex)
VERIFY_CLASS_SIZE_NODIE(UUIAction_DataStore)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_DataStoreField,TargetScene)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_DataStoreField,DataFieldMarkupString)
VERIFY_CLASS_SIZE_NODIE(UUIAction_DataStoreField)
VERIFY_CLASS_SIZE_NODIE(UUIAction_DeactivateState)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_FindOnlineGames,DataStoreName)
VERIFY_CLASS_SIZE_NODIE(UUIAction_FindOnlineGames)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_GetCellValue,CollectionIndex)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_GetCellValue,CellFieldRangeValue)
VERIFY_CLASS_SIZE_NODIE(UUIAction_GetCellValue)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_GetDatafieldValue,DataFieldStringValue)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_GetDatafieldValue,DataFieldRangeValue)
VERIFY_CLASS_SIZE_NODIE(UUIAction_GetDatafieldValue)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_GetLastFocused,Parent)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_GetLastFocused,LastFocused)
VERIFY_CLASS_SIZE_NODIE(UUIAction_GetLastFocused)
VERIFY_CLASS_SIZE_NODIE(UUIAction_GetListIndex)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_GetListItemCount,ItemCount)
VERIFY_CLASS_SIZE_NODIE(UUIAction_GetListItemCount)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_GetLoggedInPlayerCount,TotalLoggedIn)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_GetLoggedInPlayerCount,MaxPlayers)
VERIFY_CLASS_SIZE_NODIE(UUIAction_GetLoggedInPlayerCount)
VERIFY_CLASS_SIZE_NODIE(UUIAction_GetNATType)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_GetPrivilegeLevel,PlayerID)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_GetPrivilegeLevel,PrivMode)
VERIFY_CLASS_SIZE_NODIE(UUIAction_GetPrivilegeLevel)
VERIFY_CLASS_SIZE_NODIE(UUIAction_GetValue)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_JoinOnlineGame,PendingGameJoin)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_JoinOnlineGame,CachedWorldInfo)
VERIFY_CLASS_SIZE_NODIE(UUIAction_JoinOnlineGame)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_MoveListItem,ElementIndex)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_MoveListItem,MoveCount)
VERIFY_CLASS_SIZE_NODIE(UUIAction_MoveListItem)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_OpenScene,OpenedScene)
VERIFY_CLASS_SIZE_NODIE(UUIAction_OpenScene)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_PlayUISoundCue,SoundCueName)
VERIFY_CLASS_SIZE_NODIE(UUIAction_PlayUISoundCue)
VERIFY_CLASS_SIZE_NODIE(UUIAction_PublishValue)
VERIFY_CLASS_SIZE_NODIE(UUIAction_RefreshBindingValue)
VERIFY_CLASS_SIZE_NODIE(UUIAction_RefreshStats)
VERIFY_CLASS_SIZE_NODIE(UUIAction_SaveProfileSettings)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_Scene,Scene)
VERIFY_CLASS_SIZE_NODIE(UUIAction_Scene)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_SetDatafieldValue,DataFieldStringValue)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_SetDatafieldValue,DataFieldRangeValue)
VERIFY_CLASS_SIZE_NODIE(UUIAction_SetDatafieldValue)
VERIFY_CLASS_SIZE_NODIE(UUIAction_SetFocus)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_ShowDeviceSelectionUI,SizeNeeded)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_ShowDeviceSelectionUI,DeviceName)
VERIFY_CLASS_SIZE_NODIE(UUIAction_ShowDeviceSelectionUI)
VERIFY_CLASS_SIZE_NODIE(UUIAction_ShowGamercardForServerHost)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_ShowKeyboardUI,TitleText)
VERIFY_CLASS_OFFSET_NODIE(U,UIAction_ShowKeyboardUI,StringReturnValue)
VERIFY_CLASS_SIZE_NODIE(UUIAction_ShowKeyboardUI)
VERIFY_CLASS_SIZE_NODIE(UUIAction_ShowLoginUI)
VERIFY_CLASS_OFFSET_NODIE(U,UIEvent,EventOwner)
VERIFY_CLASS_OFFSET_NODIE(U,UIEvent,__AllowEventActivation__Delegate)
VERIFY_CLASS_SIZE_NODIE(UUIEvent)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_CheckValueChanged)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_ComboboxValueChanged)
VERIFY_CLASS_OFFSET_NODIE(U,UIEvent_ListIndexChanged,PreviousIndex)
VERIFY_CLASS_OFFSET_NODIE(U,UIEvent_ListIndexChanged,CurrentIndex)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_ListIndexChanged)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_MetaObject)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_NumericOptionListValueChanged)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_OnClick)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_OnDoubleClick)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_OnEnterState)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_OnLeaveState)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_OptionListValueChanged)
VERIFY_CLASS_OFFSET_NODIE(U,UIEvent_ProcessInput,ActionMap)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_ProcessInput)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_ProgressBarValueChanged)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_Scene)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_SliderValueChanged)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_State)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_SubmitData)
VERIFY_CLASS_OFFSET_NODIE(U,UIEvent_SubmitListData,SelectedItem)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_SubmitListData)
VERIFY_CLASS_OFFSET_NODIE(U,UIEvent_SubmitTextData,Value)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_SubmitTextData)
VERIFY_CLASS_OFFSET_NODIE(U,UIEvent_TabControl,OwnerTabControl)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_TabControl)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_TextValueChanged)
VERIFY_CLASS_SIZE_NODIE(UUIEvent_ValueChanged)
VERIFY_CLASS_OFFSET_NODIE(U,UISequence,UIEvents)
VERIFY_CLASS_SIZE_NODIE(UUISequence)
VERIFY_CLASS_SIZE_NODIE(UUIStateSequence)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
