/*=============================================================================
	MeshMaterialShader.h: Mesh material shader definitions.
	Copyright 1998-2007 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

/**
 * A shader meta type for material-linked shaders which use a vertex factory.
 */
class FMeshMaterialShaderType : public FShaderType
{
public:

	/**
	* Finds a FMeshMaterialShaderType by name.
	*/
	static FMeshMaterialShaderType* GetTypeByName(const FString& TypeName);

	struct CompiledShaderInitializerType : FMaterialShaderType::CompiledShaderInitializerType
	{
		FVertexFactoryType* VertexFactoryType;
		CompiledShaderInitializerType(
			FShaderType* InType,
			const FShaderCompilerOutput& CompilerOutput,
			const FMaterial* InMaterial,
			FVertexFactoryType* InVertexFactoryType
			):
			FMaterialShaderType::CompiledShaderInitializerType(InType,CompilerOutput,InMaterial),
			VertexFactoryType(InVertexFactoryType)
		{}
	};
	typedef FShader* (*ConstructCompiledType)(const CompiledShaderInitializerType&);
	typedef UBOOL (*ShouldCacheType)(EShaderPlatform,const FMaterial*,const FVertexFactoryType* VertexFactoryType);

	FMeshMaterialShaderType(
		const TCHAR* InName,
		const TCHAR* InSourceFilename,
		const TCHAR* InFunctionName,
		DWORD InFrequency,
		INT InMinPackageVersion,
		INT InMinLicenseePackageVersion,
		ConstructSerializedType InConstructSerializedRef,
		ConstructCompiledType InConstructCompiledRef,
		ModifyCompilationEnvironmentType InModifyCompilationEnvironmentRef,
		ShouldCacheType InShouldCacheRef
		):
		FShaderType(InName,InSourceFilename,InFunctionName,InFrequency,InMinPackageVersion,InMinLicenseePackageVersion,InConstructSerializedRef,InModifyCompilationEnvironmentRef),
		ConstructCompiledRef(InConstructCompiledRef),
		ShouldCacheRef(InShouldCacheRef)
	{}

	/**
	 * Compiles a shader of this type.  After compiling the shader, either returns an equivalent existing shader of this type, or constructs
	 * a new instance.
	 * @param Compiler - The shader compiler to use.
	 * @param Material - The material to link the shader with.
	 * @param MaterialShaderCode - The shader code for the material.
	 * @param VertexFactoryType - The vertex factory type to link the shader with.
	 * @param OutErrors - Upon compilation failure, OutErrors contains a list of the errors which occured.
	 * @return NULL if the compilation failed.
	 */
	FShader* CompileShader(
		EShaderPlatform Platform,
		const FMaterial* Material,
		const TCHAR* MaterialShaderCode,
		FVertexFactoryType* VertexFactoryType,
		TArray<FString>& OutErrors,
		UBOOL bSilent = FALSE
		);

	/**
	 * Checks if the shader type should be cached for a particular platform, material, and vertex factory type.
	 * @param Platform - The platform to check.
	 * @param Material - The material to check.
	 * @param VertexFactoryType - The vertex factory type to check.
	 * @return True if this shader type should be cached.
	 */
	UBOOL ShouldCache(EShaderPlatform Platform,const FMaterial* Material,const FVertexFactoryType* VertexFactoryType) const
	{
		return (*ShouldCacheRef)(Platform,Material,VertexFactoryType);
	}

	virtual DWORD GetSourceCRC();

	// Dynamic casting.
	virtual FMeshMaterialShaderType* GetMeshMaterialShaderType() { return this; }

private:
	ConstructCompiledType ConstructCompiledRef;
	ShouldCacheType ShouldCacheRef;
};

/**
 * The shaders which the render the material on a mesh generated by a particular vertex factory type.
 */
class FMeshMaterialShaderMap : public TShaderMap<FMeshMaterialShaderType>
{
public:

	/**
	 * Compiles all shaders for a material and vertex factory type, and caches them in this shader map.
	 * @param Material - The material to compile shaders for.
	 * @param MaterialShaderCode - The shader code for Material.
	 * @param VertexFactoryType - The vertex factory type to compile shaders for.
	 * @param Platform - The platform to compile to
	 * @param OutErrors - Upon compilation failure, OutErrors contains a list of the errors which occured.
	 * @return True if the compilation succeeded.
	 */
	UBOOL Compile(
		const FMaterial* Material,
		const TCHAR* MaterialShaderCode,
		FVertexFactoryType* InVertexFactoryType,
		EShaderPlatform Platform,
		TArray<FString>& OutErrors,
		UBOOL bSilent = FALSE
		);

	/**
	 * Checks whether the material shader map is missing any shader types necessary for the given material.
	 * @param Material - The material which is checked.
	 * @return True if the shader map has all of the shader types necessary.
	 */
	UBOOL IsComplete(EShaderPlatform Platform,const FMaterial* Material,FVertexFactoryType* InVertexFactoryType) const;

	/**
	 * Removes all entries in the cache with exceptions based on a shader type
	 * @param ShaderType - The shader type to flush or keep (depending on second param)
	 * @param bFlushAllButShaderType - TRUE if all shaders EXCEPT the given type should be flush. FALSE will flush ONLY the given shader type
	 */
	void FlushShadersByShaderType(FShaderType* ShaderType, UBOOL bFlushAllButShaderType=FALSE);

	// Accessors.
	FVertexFactoryType* GetVertexFactoryType() const { return VertexFactoryType; }

	// Serializer.
	friend FArchive& operator<<(FArchive& Ar,FMeshMaterialShaderMap& S);

private:
	/** The vertex factory type these shaders are for. */
	FVertexFactoryType* VertexFactoryType;
};
