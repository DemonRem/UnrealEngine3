/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

enum EShakeParam
{
    ESP_OffsetRandom        =0,
    ESP_OffsetZero          =1,
    ESP_MAX                 =2,
};
enum EWeaponHand
{
    HAND_Right              =0,
    HAND_Left               =1,
    HAND_Centered           =2,
    HAND_Hidden             =3,
    HAND_MAX                =4,
};
enum CustomCharTextureRes
{
    CCTR_Normal             =0,
    CCTR_Full               =1,
    CCTR_Self               =2,
    CCTR_MAX                =3,
};
enum ECharPart
{
    PART_Head               =0,
    PART_Helmet             =1,
    PART_Facemask           =2,
    PART_Goggles            =3,
    PART_Torso              =4,
    PART_ShoPad             =5,
    PART_Arms               =6,
    PART_Thighs             =7,
    PART_Boots              =8,
    PART_MAX                =9,
};
enum EAutoObjectivePreference
{
    AOP_Disabled            =0,
    AOP_NoPreference        =1,
    AOP_Attack              =2,
    AOP_Defend              =3,
    AOP_OrbRunner           =4,
    AOP_MAX                 =5,
};
enum EPawnShadowMode
{
    SHADOW_None             =0,
    SHADOW_Self             =1,
    SHADOW_All              =2,
    SHADOW_MAX              =3,
};
enum ETransitionState
{
    ETS_None                =0,
    ETS_Fly                 =1,
    ETS_Done                =2,
    ETS_MAX                 =3,
};
enum EAgentMoveState
{
    EAMS_Move               =0,
    EAMS_Idle               =1,
    EAMS_MAX                =2,
};
enum EFlagState
{
    FLAG_Home               =0,
    FLAG_HeldFriendly       =1,
    FLAG_HeldEnemy          =2,
    FLAG_Down               =3,
    FLAG_MAX                =4,
};
enum AmmoWidgetDisplayStyle
{
    EAWDS_Numeric           =0,
    EAWDS_BarGraph          =1,
    EAWDS_Both              =2,
    EAWDS_MAX               =3,
};
enum EAutoLock
{
    WEAPLOCK_None           =0,
    WEAPLOCK_Default        =1,
    WEAPLOCK_Constant       =2,
    WEAPLOCK_MAX            =3,
};
enum EZoomState
{
    ZST_NotZoomed           =0,
    ZST_ZoomingOut          =1,
    ZST_ZoomingIn           =2,
    ZST_Zoomed              =3,
    ZST_MAX                 =4,
};
enum EDefensePriority
{
    DEFPRI_Low              =0,
    DEFPRI_High             =1,
    DEFPRI_MAX              =2,
};
enum ECrossfadeType
{
    CFT_BeginningOfMeasure  =0,
    CFT_EndOfMeasure        =1,
    CFT_MAX                 =2,
};
enum EPlayerFilterSettings
{
    PFS_Player              =0,
    PFS_CenteredOnPlayer    =1,
    PFS_Friends             =2,
    PFS_TopRankings         =3,
    PFS_MAX                 =4,
};
enum EMatchTypeSettings
{
    MTS_Ranked              =0,
    MTS_Player              =1,
    MTS_RankedSkill         =2,
    MTS_MAX                 =3,
};
enum ELeaderboardFilters
{
    LF_GameMode             =0,
    LF_MatchType            =1,
    LF_PlayerFilterType     =2,
    LF_MAX                  =3,
};

#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName UTGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(CauseMuzzleFlash)
AUTOGENERATE_NAME(CauseMuzzleFlashLight)
AUTOGENERATE_NAME(ClientHasOwner)
AUTOGENERATE_NAME(CreateProjectileLight)
AUTOGENERATE_NAME(DealDamage)
AUTOGENERATE_NAME(GetBestViewTarget)
AUTOGENERATE_NAME(GetHUDColor)
AUTOGENERATE_NAME(GetNameCallSign)
AUTOGENERATE_NAME(GetPowerPerc)
AUTOGENERATE_NAME(HoldGameObject)
AUTOGENERATE_NAME(ImpactAutoFire)
AUTOGENERATE_NAME(InitPickupMeshEffects)
AUTOGENERATE_NAME(IsActive)
AUTOGENERATE_NAME(IsCritical)
AUTOGENERATE_NAME(IsDisabled)
AUTOGENERATE_NAME(IsLocked)
AUTOGENERATE_NAME(KillBolt)
AUTOGENERATE_NAME(MuzzleFlashTimer)
AUTOGENERATE_NAME(NotReachableBy)
AUTOGENERATE_NAME(OnBaseChainChanged)
AUTOGENERATE_NAME(OnBreakApart)
AUTOGENERATE_NAME(OnDeployableUsedUp)
AUTOGENERATE_NAME(OnEncroach)
AUTOGENERATE_NAME(OnInputAxis)
AUTOGENERATE_NAME(OnInputChar)
AUTOGENERATE_NAME(OnInputKey)
AUTOGENERATE_NAME(OnLightFinished)
AUTOGENERATE_NAME(OnMissionChanged)
AUTOGENERATE_NAME(OnSetCustomCharPart)
AUTOGENERATE_NAME(OnSetCustomCharProfile)
AUTOGENERATE_NAME(OnToggle)
AUTOGENERATE_NAME(PlayJumpingSound)
AUTOGENERATE_NAME(PlayLandingSound)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(PreloadTextures)
AUTOGENERATE_NAME(SetFirstPersonDeathMeshLoc)
AUTOGENERATE_NAME(SetHeadScale)
AUTOGENERATE_NAME(SetPosition)
AUTOGENERATE_NAME(SpawnBeam)
AUTOGENERATE_NAME(StartFeignDeathRecoveryAnim)
AUTOGENERATE_NAME(StopMuzzleFlash)
AUTOGENERATE_NAME(StoppedFalling)
AUTOGENERATE_NAME(TakeHitBlendedOut)
AUTOGENERATE_NAME(TimeExpired)
AUTOGENERATE_NAME(UpdateEyeHeight)

#ifndef NAMES_ONLY

class AForcedDirVolume : public AVolume
{
public:
    //## BEGIN PROPS ForcedDirVolume
    BITFIELD bAllowBackwards:1 GCC_BITFIELD_MAGIC;
    BITFIELD bDenyExit:1;
    BITFIELD bBlockPawns:1;
    class UClass* TypeToForce;
    class UArrowComponent* Arrow;
    FVector ArrowDirection;
    //## END PROPS ForcedDirVolume

    DECLARE_CLASS(AForcedDirVolume,AVolume,0,UTGame)
	virtual void PostEditChange( UProperty* PropertyThatChanged );
	UBOOL IgnoreBlockingBy( const AActor *Other ) const;
};

struct UTSlowVolume_eventOnDeployableUsedUp_Parms
{
    class AActor* ChildDeployable;
    UTSlowVolume_eventOnDeployableUsedUp_Parms(EEventParm)
    {
    }
};
class AUTSlowVolume : public AGravityVolume
{
public:
    //## BEGIN PROPS UTSlowVolume
    FLOAT ScalingFactor;
    FLOAT RBScalingFactor;
    FLOAT AnimSlowdownFactor;
    FLOAT RBGravityZ;
    TArrayNoInit<class AActor*> PendingEntered;
    TArrayNoInit<class AActor*> PendingLeaving;
    TArrayNoInit<class UReachSpec*> ModifiedSpecs;
    class UParticleSystemComponent* SlowEffect;
    class USkeletalMeshComponent* GeneratorMesh;
    FScriptDelegate __OnDeployableUsedUp__Delegate;
    //## END PROPS UTSlowVolume

    void delegateOnDeployableUsedUp(class AActor* ChildDeployable)
    {
        UTSlowVolume_eventOnDeployableUsedUp_Parms Parms(EC_EventParm);
        Parms.ChildDeployable=ChildDeployable;
        ProcessDelegate(UTGAME_OnDeployableUsedUp,&__OnDeployableUsedUp__Delegate,&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTSlowVolume,AGravityVolume,0,UTGame)
	virtual FLOAT GetVolumeRBGravityZ() { return RBGravityZ; }
};

struct FShakeParams
{
    BYTE X;
    BYTE Y;
    BYTE Z;
    BYTE Padding;
};

struct FScreenShakeStruct
{
    FLOAT TimeToGo;
    FLOAT TimeDuration;
    FVector RotAmplitude;
    FVector RotFrequency;
    FVector RotSinOffset;
    struct FShakeParams RotParam;
    FVector LocAmplitude;
    FVector LocFrequency;
    FVector LocSinOffset;
    struct FShakeParams LocParam;
    FLOAT FOVAmplitude;
    FLOAT FOVFrequency;
    FLOAT FOVSinOffset;
    BYTE FOVParam;
};

class UDemoCamMod_ScreenShake : public UCameraModifier
{
public:
    //## BEGIN PROPS DemoCamMod_ScreenShake
    TArrayNoInit<struct FScreenShakeStruct> Shakes;
    struct FScreenShakeStruct TestShake;
    //## END PROPS DemoCamMod_ScreenShake

    virtual void UpdateScreenShake(FLOAT DeltaTime,struct FScreenShakeStruct& Shake,FTPOV& OutPOV);
    DECLARE_FUNCTION(execUpdateScreenShake)
    {
        P_GET_FLOAT(DeltaTime);
        P_GET_STRUCT_REF(struct FScreenShakeStruct,Shake);
        P_GET_STRUCT_REF(FTPOV,OutPOV);
        P_FINISH;
        UpdateScreenShake(DeltaTime,Shake,OutPOV);
    }
    DECLARE_CLASS(UDemoCamMod_ScreenShake,UCameraModifier,0,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("Camera");}

    NO_DEFAULT_CONSTRUCTOR(UDemoCamMod_ScreenShake)
};

struct FMaterialImpactEffect
{
    FName MaterialType;
    class USoundCue* Sound;
    class UMaterialInterface* DecalMaterial;
    FLOAT DecalWidth;
    FLOAT DecalHeight;
    class UParticleSystem* ParticleTemplate;
};

struct FMaterialSoundEffect
{
    FName MaterialType;
    class USoundCue* Sound;
};

struct FMaterialParticleEffect
{
    FName MaterialType;
    class UParticleSystem* ParticleTemplate;
};

class UUTPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
    //## BEGIN PROPS UTPhysicalMaterialProperty
    FName MaterialType;
    //## END PROPS UTPhysicalMaterialProperty

    DECLARE_CLASS(UUTPhysicalMaterialProperty,UPhysicalMaterialPropertyBase,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTPhysicalMaterialProperty)
};

class AUTEmitCameraEffect : public AEmitter
{
public:
    //## BEGIN PROPS UTEmitCameraEffect
    FLOAT DistFromCamera;
    class AUTPlayerController* Cam;
    //## END PROPS UTEmitCameraEffect

    virtual void UpdateLocation(const FVector& CamLoc,const FRotator& CamRot,FLOAT CamFOVDeg);
    DECLARE_FUNCTION(execUpdateLocation)
    {
        P_GET_STRUCT_REF(FVector,CamLoc);
        P_GET_STRUCT_REF(FRotator,CamRot);
        P_GET_FLOAT(CamFOVDeg);
        P_FINISH;
        UpdateLocation(CamLoc,CamRot,CamFOVDeg);
    }
    DECLARE_ABSTRACT_CLASS(AUTEmitCameraEffect,AEmitter,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTEmitCameraEffect)
};

struct FDistanceBasedParticleTemplate
{
    class UParticleSystem* Template;
    FLOAT MinDistance;
};

class AUTEmitter : public AEmitter
{
public:
    //## BEGIN PROPS UTEmitter
    //## END PROPS UTEmitter

    DECLARE_CLASS(AUTEmitter,AEmitter,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTEmitter)
};

class AUTReplicatedEmitter : public AUTEmitter
{
public:
    //## BEGIN PROPS UTReplicatedEmitter
    class UParticleSystem* EmitterTemplate;
    FLOAT ServerLifeSpan;
    //## END PROPS UTReplicatedEmitter

    DECLARE_ABSTRACT_CLASS(AUTReplicatedEmitter,AUTEmitter,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTReplicatedEmitter)
};

struct FEmoteInfo
{
    FName CategoryName;
    FName EmoteTag;
    FStringNoInit EmoteName;
    FName EmoteAnim;
    class USoundCue* EmoteSound;
    BITFIELD bVictoryEmote:1;
    BITFIELD bTopHalfEmote:1;
    FName Command;
    BITFIELD bRequiresPlayer:1;

    /** Constructors */
    FEmoteInfo() {}
    FEmoteInfo(EEventParm)
    {
        appMemzero(this, sizeof(FEmoteInfo));
    }
};

struct FGibInfo
{
    FName BoneName;
    class UClass* GibClass;
    BITFIELD bHighDetailOnly:1;
};

class UUTFamilyInfo : public UObject
{
public:
    //## BEGIN PROPS UTFamilyInfo
    FStringNoInit FamilyID;
    FStringNoInit Faction;
    FStringNoInit ArmMeshPackageName;
    FStringNoInit ArmMeshName;
    FStringNoInit ArmSkinPackageName;
    FStringNoInit RedArmSkinName;
    FStringNoInit BlueArmSkinName;
    class UPhysicsAsset* PhysAsset;
    TArrayNoInit<class UAnimSet*> AnimSets;
    FName LeftFootBone;
    FName RightFootBone;
    TArrayNoInit<FName> TakeHitPhysicsFixedBones;
    class UClass* SoundGroupClass;
    class UMaterialInstanceConstant* BaseMICParent;
    class UMaterialInstanceConstant* BioDeathMICParent;
    class USkeletalMesh* MasterSkeleton;
    FLinearColor NonTeamEmissiveColor;
    FLinearColor NonTeamTintColor;
    TArrayNoInit<struct FEmoteInfo> FamilyEmotes;
    TArrayNoInit<struct FGibInfo> Gibs;
    struct FGibInfo HeadGib;
    class USkeletalMesh* DeathMeshSkelMesh;
    class UPhysicsAsset* DeathMeshPhysAsset;
    INT DeathMeshNumMaterialsToSetResident;
    TArrayNoInit<FName> DeathMeshBreakableJoints;
    //## END PROPS UTFamilyInfo

    DECLARE_ABSTRACT_CLASS(UUTFamilyInfo,UObject,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTFamilyInfo)
};

struct FPlayEmoteInfo
{
    FName EmoteTag;
    INT EmoteID;
    BITFIELD bNewData:1;
};

struct FTakeHitInfo
{
    INT Damage;
    FVector HitLocation;
    FVector Momentum;
    class UClass* DamageType;
    FName HitBone;
};

struct FDrivenWeaponPawnInfo
{
    class AUTVehicle* BaseVehicle;
    BYTE SeatIndex;
    class APlayerReplicationInfo* PRI;
};

#define UCONST_MINTIMEBETWEENPAINSOUNDS 0.35

struct UTPawn_eventSetFirstPersonDeathMeshLoc_Parms
{
    UTPawn_eventSetFirstPersonDeathMeshLoc_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventTakeHitBlendedOut_Parms
{
    UTPawn_eventTakeHitBlendedOut_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventSetHeadScale_Parms
{
    FLOAT NewScale;
    UTPawn_eventSetHeadScale_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventStartFeignDeathRecoveryAnim_Parms
{
    UTPawn_eventStartFeignDeathRecoveryAnim_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventPlayJumpingSound_Parms
{
    UTPawn_eventPlayJumpingSound_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventPlayLandingSound_Parms
{
    UTPawn_eventPlayLandingSound_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventHoldGameObject_Parms
{
    class AUTCarriedObject* UTGameObj;
    UTPawn_eventHoldGameObject_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
    UTPawn_eventUpdateEyeHeight_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventStoppedFalling_Parms
{
    UTPawn_eventStoppedFalling_Parms(EEventParm)
    {
    }
};
class AUTPawn : public AGamePawn
{
public:
    //## BEGIN PROPS UTPawn
    BITFIELD bFixedView:1;
    BITFIELD bIsTyping:1;
    BITFIELD bSpawnDone:1;
    BITFIELD bSpawnIn:1;
    BITFIELD bShieldAbsorb:1;
    BITFIELD bDodging:1;
    BITFIELD bNoJumpAdjust:1;
    BITFIELD bStopOnDoubleLanding:1;
    BITFIELD bReadyToDoubleJump:1;
    BITFIELD bIsInvulnerable:1;
    BITFIELD bIsInvisible:1;
    BITFIELD bFeigningDeath:1;
    BITFIELD bPlayingFeignDeathRecovery:1;
    BITFIELD bForcedFeignDeath:1;
    BITFIELD bUpdateEyeheight:1;
    BITFIELD bWeaponBob:1;
    BITFIELD bJustLanded:1;
    BITFIELD bLandRecovery:1;
    BITFIELD bComponentDebug:1;
    BITFIELD bStopDeathCamera:1;
    BITFIELD bIsHero:1;
    BITFIELD bCanDoubleJump:1;
    BITFIELD bRequiresDoubleJump:1;
    BITFIELD bKilledByBio:1;
    BITFIELD bDeathMeshIsActive:1;
    BITFIELD bCanPlayFallingImpacts:1;
    BITFIELD bBlendOutTakeHitPhysics:1;
    BITFIELD bGibbed:1;
    BITFIELD bHeadGibbed:1;
    BITFIELD bTearOffGibs:1;
    BITFIELD bHasHoverboard:1;
    BITFIELD bIsHoverboardAnimPawn:1;
    BITFIELD bArmsAttached:1;
    BITFIELD bDualWielding:1;
    BITFIELD bPuttingDownWeapon:1;
    BITFIELD bPostRenderTraceSucceeded:1;
    BITFIELD bEnableFootPlacement:1;
    BITFIELD bNotifyStopFalling:1;
    BITFIELD bReceivedValidTeam:1;
    BITFIELD bKillsAffectHead:1;
    class ULightEnvironmentComponent* LightEnvironment;
    class UAnimNodeBlend* FeignDeathBlend;
    class UAnimNodeSlot* FullBodyAnimSlot;
    class UAnimNodeSlot* TopHalfAnimSlot;
    FLOAT DeathHipLinSpring;
    FLOAT DeathHipLinDamp;
    FLOAT DeathHipAngSpring;
    FLOAT DeathHipAngDamp;
    FLOAT LastEmoteTime;
    FLOAT MinTimeBetweenEmotes;
    struct FPlayEmoteInfo EmoteRepInfo;
    FVector FixedViewLoc;
    FRotator FixedViewRot;
    FLOAT CameraScale;
    FLOAT CurrentCameraScale;
    FLOAT CameraScaleMin;
    FLOAT CameraScaleMax;
    FVector OldCameraPosition;
    FLOAT CameraZOffset;
    FLOAT HeroCameraScale;
    INT HeroCameraPitch;
    FLOAT DodgeSpeed;
    FLOAT DodgeSpeedZ;
    BYTE CurrentDir;
    BYTE WeaponHand;
    BYTE WeaponOverlayFlags;
    INT MultiJumpRemaining;
    INT MaxMultiJump;
    INT MultiJumpBoost;
    FLOAT MaxDoubleJumpHeight;
    FLOAT SlopeBoostFriction;
    FLOAT DoubleJumpEyeHeight;
    FLOAT DoubleJumpThreshold;
    INT MaxLeanRoll;
    FLOAT DefaultAirControl;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT JumpBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    FVector WalkBob;
    FLOAT EyeForward;
    FLOAT FeignDeathBodyAtRestSpeed;
    FLOAT FeignDeathPhysicsBlendOutSpeed;
    FLOAT FeignDeathStartTime;
    FLOAT FeignDeathRecoveryStartTime;
    INT SuperHealthMax;
    INT Twisting;
    class UClass* SoundGroupClass;
    class UClass* CurrFamilyInfo;
    class UClass* BloodEmitterClass;
    TArrayNoInit<struct FDistanceBasedParticleTemplate> BloodEffects;
    class UParticleSystemComponent* BioBurnAway;
    FLOAT BioBurnAwayTime;
    FName BioEffectName;
    class UParticleSystem* GibExplosionTemplate;
    TArrayNoInit<FName> TakeHitPhysicsFixedBones;
    class USkeletalMeshComponent* FirstPersonDeathVisionMesh;
    FLOAT StartFallImpactTime;
    FName TorsoBoneName;
    class USoundCue* FallImpactSound;
    FLOAT FallSpeedThreshold;
    class UClass* KilledByDamageType;
    struct FTakeHitInfo LastTakeHitInfo;
    FLOAT LastTakeHitTimeout;
    FLOAT TakeHitPhysicsBlendOutSpeed;
    INT RootYaw;
    FLOAT RootYawSpeed;
    INT MaxYawAim;
    FVector2D CurrentSkelAim;
    class USkelControlSingleBone* RootRotControl;
    class UAnimNodeAimOffset* AimNode;
    class UGameSkelCtrl_Recoil* GunRecoilNode;
    class UGameSkelCtrl_Recoil* LeftRecoilNode;
    class UGameSkelCtrl_Recoil* RightRecoilNode;
    FLOAT AccumulateDamage;
    FLOAT AccumulationTime;
    class UParticleSystem* HeadShotEffect;
    FLOAT LastHoverboardTime;
    FLOAT MinHoverboardInterval;
    FLOAT ShieldBeltArmor;
    FLOAT VestArmor;
    FLOAT ThighpadArmor;
    FLOAT HelmetArmor;
    class UUTSkeletalMeshComponent* ArmsMesh[2];
    class UUTSkeletalMeshComponent* ArmsOverlay[2];
    class UClass* CurrentWeaponAttachmentClass;
    class AUTWeaponAttachment* CurrentWeaponAttachment;
    FName WeaponSocket;
    FName WeaponSocket2;
    FName PawnEffectSockets[2];
    FLOAT FireRateMultiplier;
    FLOAT HeadOffset;
    FLOAT HeadRadius;
    FLOAT HeadHeight;
    FName HeadBone;
    FLOAT HeadScale;
    class UClass* TransInEffects[2];
    class UClass* TransOutEffects[2];
    FLinearColor TranslocateColor[2];
    class UAudioComponent* PawnAmbientSound;
    class USoundCue* PawnAmbientSoundCue;
    class UAudioComponent* WeaponAmbientSound;
    class USoundCue* WeaponAmbientSoundCue;
    class UAudioComponent* EmoteSound;
    class USoundCue* ArmorHitSound;
    class USoundCue* SpawnSound;
    class USoundCue* TeleportSound;
    FLOAT BodyMatFadeDuration;
    FLOAT RemainingBodyMatDuration;
    FLOAT ClientBodyMatDuration;
    FLinearColor BodyMatColor;
    FLinearColor CurrentBodyMatColor;
    FLinearColor SpawnProtectionColor;
    FName DamageParameterName;
    TArrayNoInit<class UMaterialInstanceConstant*> BodyMaterialInstances;
    class UMaterialInterface* OverlayMaterialInstance;
    class USkeletalMeshComponent* OverlayMesh;
    FLOAT TeamBeaconMaxDist;
    FLOAT TeamBeaconPlayerInfoMaxDist;
    class UTexture* SpeakingBeaconTexture;
    FLOAT LastPostRenderTraceTime;
    class UMaterialInstanceConstant* HUDMaterialInstance;
    FVector HUDLocation;
    FLOAT MapSize;
    FLOAT IconXStart;
    FLOAT IconYStart;
    FLOAT IconXWidth;
    FLOAT IconYWidth;
    FLOAT LastPainSound;
    FLOAT DeathTime;
    INT LookYaw;
    FLOAT RagdollLifespan;
    FName LeftFootBone;
    FName RightFootBone;
    FName LeftFootControlName;
    FName RightFootControlName;
    FLOAT BaseTranslationOffset;
    FLOAT CrouchTranslationOffset;
    FLOAT OldLocationZ;
    FLOAT ZSmoothingRate;
    FLOAT MaxFootPlacementDistSquared;
    class USkelControlFootPlacement* LeftLegControl;
    class USkelControlFootPlacement* RightLegControl;
    class USkelControlLimb* LeftHandIK;
    class USkelControlSingleBone* LeftHandIKRot;
    class USkelControlLimb* RightHandIK;
    class USkelControlSingleBone* RightHandIKRot;
    FLOAT CustomGravityScaling;
    class UMaterial* ReplicatedBodyMaterial;
    TArrayNoInit<class AUTBot*> Trackers;
    class UClass* HoverboardClass;
    struct FDrivenWeaponPawnInfo DrivenWeaponPawn;
    struct FDrivenWeaponPawnInfo LastDrivenWeaponPawn;
    class AUTClientSideWeaponPawn* ClientSideWeaponPawn;
    class UUTUIScene_UTPawn* PawnHudScene;
    class UMaterialInterface* ShieldBeltMaterialInstance;
    class UMaterialInterface* ShieldBeltTeamMaterialInstances[4];
    class UClass* DefaultFamily;
    class USkeletalMesh* DefaultMesh;
    TArrayNoInit<class UMaterialInterface*> DefaultTeamMaterials;
    TArrayNoInit<class UMaterialInterface*> DefaultTeamHeadMaterials;
    INT JumpBootCharge;
    //## END PROPS UTPawn

    virtual void GetBoundingCylinder(FLOAT& CollisionRadius,FLOAT& CollisionHeight);
    virtual void RestorePreRagdollCollisionComponent();
    virtual UBOOL IsInvisible();
    virtual UBOOL SuggestJumpVelocity(FVector& JumpVelocity,FVector Destination,FVector Start);
    DECLARE_FUNCTION(execRestorePreRagdollCollisionComponent)
    {
        P_FINISH;
        RestorePreRagdollCollisionComponent();
    }
    void eventSetFirstPersonDeathMeshLoc()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_SetFirstPersonDeathMeshLoc),NULL);
    }
    void eventTakeHitBlendedOut()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_TakeHitBlendedOut),NULL);
    }
    void eventSetHeadScale(FLOAT NewScale)
    {
        UTPawn_eventSetHeadScale_Parms Parms(EC_EventParm);
        Parms.NewScale=NewScale;
        ProcessEvent(FindFunctionChecked(UTGAME_SetHeadScale),&Parms);
    }
    void eventStartFeignDeathRecoveryAnim()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_StartFeignDeathRecoveryAnim),NULL);
    }
    void eventPlayJumpingSound()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_PlayJumpingSound),NULL);
    }
    void eventPlayLandingSound()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_PlayLandingSound),NULL);
    }
    void eventHoldGameObject(class AUTCarriedObject* UTGameObj)
    {
        UTPawn_eventHoldGameObject_Parms Parms(EC_EventParm);
        Parms.UTGameObj=UTGameObj;
        ProcessEvent(FindFunctionChecked(UTGAME_HoldGameObject),&Parms);
    }
    void eventUpdateEyeHeight(FLOAT DeltaTime)
    {
        UTPawn_eventUpdateEyeHeight_Parms Parms(EC_EventParm);
        if(IsProbing(NAME_UpdateEyeHeight)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(UTGAME_UpdateEyeHeight),&Parms);
        }
    }
    void eventStoppedFalling()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_StoppedFalling),NULL);
    }
    DECLARE_CLASS(AUTPawn,AGamePawn,0|CLASS_Config|CLASS_NativeReplication,UTGame)
	virtual FLOAT DampenNoise(AActor* NoiseMaker, FLOAT Loudness, FName NoiseType=NAME_None );
	void RequestTrackingFor(AUTBot *Bot);
	virtual UBOOL TryJumpUp(FVector Dir, FVector Destination, DWORD TraceFlags, UBOOL bNoVisibility);
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual INT calcMoveFlags();
	virtual ETestMoveResult FindJumpUp(FVector Direction, FVector &CurrentPosition);
	virtual UBOOL SetHighJumpFlag();
	UBOOL UseFootPlacementThisTick();
	void EnableFootPlacement(UBOOL bEnabled);
	void DoFootPlacement(FLOAT DeltaSeconds);
	FLOAT GetGravityZ();
	void setPhysics(BYTE NewPhysics, AActor *NewFloor, FVector NewFloorV);
	virtual FVector CalculateSlopeSlide(const FVector& Adjusted, const FCheckResult& Hit);
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );

	virtual UBOOL HasAudibleAmbientSound(const FVector& SrcLocation);

	// camera
	virtual void UpdateEyeHeight(FLOAT DeltaSeconds);
	virtual void physicsRotation(FLOAT deltaTime, FVector OldVelocity);

protected:
	virtual void CalcVelocity(FVector &AccelDir, FLOAT DeltaTime, FLOAT MaxSpeed, FLOAT Friction, INT bFluid, INT bBrake, INT bBuoyant);
};

class AUTScout : public AScout
{
public:
    //## BEGIN PROPS UTScout
    BITFIELD bRequiresDoubleJump:1;
    FLOAT MaxDoubleJumpHeight;
    FLOAT MaxTranslocDistSq;
    class UClass* TranslocProjClass;
    class UClass* PrototypePawnClass;
    FName SpecialReachSpecsWarningLog;
    FName SizePersonFindName;
    //## END PROPS UTScout

    virtual UBOOL SuggestJumpVelocity(FVector& JumpVelocity,FVector Destination,FVector Start);
    DECLARE_CLASS(AUTScout,AScout,0|CLASS_Transient|CLASS_Config,UTGame)
	virtual void AddSpecialPaths(INT NumPaths, UBOOL bOnlyChanged);
	virtual ETestMoveResult FindJumpUp(FVector Direction, FVector &CurrentPosition);
	virtual UBOOL SetHighJumpFlag();
	virtual void SetPrototype();
	void CreateTranslocatorPath(ANavigationPoint* Nav, ANavigationPoint* DestNav, FCheckResult Hit, UBOOL bOnlyChanged);

	virtual void SetPathColor(UReachSpec* ReachSpec)
	{
		FVector CommonSize = GetSize(FName(TEXT("Common"),FNAME_Find));
		if ( ReachSpec->CollisionRadius >= CommonSize.X )
		{
			FVector MaxSize = GetSize(FName(TEXT("Vehicle"),FNAME_Find));
			ReachSpec->PathColorIndex = ( ReachSpec->CollisionRadius >= MaxSize.X ) ? 2 : 1;
		}
		else
		{
			ReachSpec->PathColorIndex = 0;
		}
	}
};

class AUTRemoteRedeemer : public AVehicle
{
public:
    //## BEGIN PROPS UTRemoteRedeemer
    class UParticleSystemComponent* Trail;
    FLOAT YawAccel;
    FLOAT PitchAccel;
    BITFIELD bDying:1;
    BITFIELD bCanHitDriver:1;
    class UClass* RedeemerProjClass;
    class AController* InstigatorController;
    class UAudioComponent* PawnAmbientSound;
    //## END PROPS UTRemoteRedeemer

    virtual UBOOL IsPlayerPawn() const;
    DECLARE_ABSTRACT_CLASS(AUTRemoteRedeemer,AVehicle,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTRemoteRedeemer)
};

struct FCustomCharData
{
    FStringNoInit BasedOnCharID;
    FStringNoInit FamilyID;
    FStringNoInit HeadID;
    FStringNoInit HelmetID;
    FStringNoInit FacemaskID;
    FStringNoInit GogglesID;
    FStringNoInit TorsoID;
    FStringNoInit ShoPadID;
    BITFIELD bHasLeftShoPad:1;
    BITFIELD bHasRightShoPad:1;
    FStringNoInit ArmsID;
    FStringNoInit ThighsID;
    FStringNoInit BootsID;

    /** Constructors */
    FCustomCharData() {}
    FCustomCharData(EEventParm)
    {
        appMemzero(this, sizeof(FCustomCharData));
    }
};

struct FCustomAIData
{
    FLOAT Tactics;
    FLOAT StrafingAbility;
    FLOAT Accuracy;
    FLOAT Aggressiveness;
    FLOAT CombatStyle;
    FLOAT Jumpiness;
    FLOAT ReactionTime;
    FStringNoInit FavoriteWeapon;

    /** Constructors */
    FCustomAIData() {}
    FCustomAIData(EEventParm)
    {
        appMemzero(this, sizeof(FCustomAIData));
    }
};

struct FCharacterInfo
{
    FStringNoInit CharID;
    FStringNoInit CharName;
    FStringNoInit Description;
    FStringNoInit PreviewImageMarkup;
    FStringNoInit Faction;
    struct FCustomCharData CharData;
    struct FCustomAIData AIData;
    FStringNoInit ExtraInfo;
    BITFIELD bExcludeFromMenus:1;

    /** Constructors */
    FCharacterInfo() {}
    FCharacterInfo(EEventParm)
    {
        appMemzero(this, sizeof(FCharacterInfo));
    }
};

struct FFactionInfo
{
    FStringNoInit Faction;
    FStringNoInit PreviewImageMarkup;
    FStringNoInit FriendlyName;
    FStringNoInit Description;

    /** Constructors */
    FFactionInfo() {}
    FFactionInfo(EEventParm)
    {
        appMemzero(this, sizeof(FFactionInfo));
    }
};

struct FCustomCharPart
{
    BYTE Part;
    FStringNoInit ObjectName;
    FStringNoInit PartID;
    FStringNoInit FamilyID;
    BITFIELD bNoGoggles:1;
    BITFIELD bNoFacemask:1;

    /** Constructors */
    FCustomCharPart() {}
    FCustomCharPart(EEventParm)
    {
        appMemzero(this, sizeof(FCustomCharPart));
    }
};

struct FCustomCharMergeState
{
    BITFIELD bMergeInProgress:1;
    BITFIELD bUseKrallRules:1;
    struct FCustomCharData CharData;
    FStringNoInit TeamString;
    FStringNoInit SkinString;
    class USkeletalMesh* UseMesh;
    class UTexture2DComposite* HeadTextures[5];
    class UTexture2DComposite* BodyTextures[5];
    class UMaterialInstanceConstant* DefaultHeadMIC;
    class UMaterialInstanceConstant* DefaultBodyMIC;

    /** Constructors */
    FCustomCharMergeState() {}
    FCustomCharMergeState(EEventParm)
    {
        appMemzero(this, sizeof(FCustomCharMergeState));
    }
};

struct FCharPortraitSetup
{
    FName CenterOnBone;
    FVector MeshOffset;
    FRotator MeshRot;
    FLOAT CamFOV;
    FRotator DirLightRot;
    FLOAT DirLightBrightness;
    FColor DirLightColor;
    FLOAT SkyBrightness;
    FColor SkyColor;
    FLOAT SkyLowerBrightness;
    FColor SkyLowerColor;
    class UMaterialInterface* BackgroundMaterial;
};

class UUTCustomChar_Data : public UObject
{
public:
    //## BEGIN PROPS UTCustomChar_Data
    TArrayNoInit<struct FCustomCharPart> Parts;
    TArrayNoInit<struct FCharacterInfo> Characters;
    TArrayNoInit<struct FFactionInfo> Factions;
    TArrayNoInit<class UClass*> Families;
    TArrayNoInit<struct FSourceTexture2DRegion> HeadRegions;
    TArrayNoInit<struct FSourceTexture2DRegion> BodyRegions;
    INT HeadMaxTexSize[5];
    INT BodyMaxTexSize[5];
    INT SelfHeadMaxTexSize[5];
    INT SelfBodyMaxTexSize[5];
    FLOAT LOD1DisplayFactor;
    FLOAT LOD2DisplayFactor;
    FLOAT CustomCharTextureStreamTimeout;
    INT MaxCustomChars;
    FStringNoInit DefaultArmMeshPackageName;
    FStringNoInit DefaultArmMeshName;
    FStringNoInit DefaultArmSkinPackageName;
    FStringNoInit DefaultRedArmSkinName;
    FStringNoInit DefaultBlueArmSkinName;
    struct FCharPortraitSetup PortraitSetup;
    //## END PROPS UTCustomChar_Data

    FString FindPartObjName(const FString& InFamilyID,BYTE InPart,const FString& InPartID);
    class USkeletalMesh* FindPartSkelMesh(const FString& InFamilyID,BYTE InPart,const FString& InPartID,UBOOL bLeftShoPad,const FString& InBasedOnCharID);
    struct FCharacterInfo FindCharacter(const FString& InFaction,const FString& InCharID);
    class UClass* FindFamilyInfo(const FString& InFamilyID);
    class UUTCharFamilyAssetStore* LoadFamilyAssets(const FString& InFamilyID,UBOOL bBlocking,UBOOL bArms);
    struct FCustomCharMergeState StartCustomCharMerge(struct FCustomCharData InCharData,const FString& TeamString,const FString& SkinString,class USkeletalMesh* UseMesh,BYTE TextureRes);
    class USkeletalMesh* FinishCustomCharMerge(struct FCustomCharMergeState& MergeState);
    void ResetCustomCharMerge(struct FCustomCharMergeState& MergeState);
    class UTexture* MakeCharPortraitTexture(class USkeletalMesh* CharMesh,struct FCharPortraitSetup Setup);
    struct FCustomCharData MakeRandomCharData();
    FString CharDataToString(struct FCustomCharData InCharData);
    struct FCustomCharData CharDataFromString(const FString& InString);
    DECLARE_FUNCTION(execFindPartObjName)
    {
        P_GET_STR(InFamilyID);
        P_GET_BYTE(InPart);
        P_GET_STR(InPartID);
        P_FINISH;
        *(FString*)Result=FindPartObjName(InFamilyID,InPart,InPartID);
    }
    DECLARE_FUNCTION(execFindPartSkelMesh)
    {
        P_GET_STR(InFamilyID);
        P_GET_BYTE(InPart);
        P_GET_STR(InPartID);
        P_GET_UBOOL(bLeftShoPad);
        P_GET_STR(InBasedOnCharID);
        P_FINISH;
        *(class USkeletalMesh**)Result=FindPartSkelMesh(InFamilyID,InPart,InPartID,bLeftShoPad,InBasedOnCharID);
    }
    DECLARE_FUNCTION(execFindCharacter)
    {
        P_GET_STR(InFaction);
        P_GET_STR(InCharID);
        P_FINISH;
        *(struct FCharacterInfo*)Result=FindCharacter(InFaction,InCharID);
    }
    DECLARE_FUNCTION(execFindFamilyInfo)
    {
        P_GET_STR(InFamilyID);
        P_FINISH;
        *(class UClass**)Result=FindFamilyInfo(InFamilyID);
    }
    DECLARE_FUNCTION(execLoadFamilyAssets)
    {
        P_GET_STR(InFamilyID);
        P_GET_UBOOL(bBlocking);
        P_GET_UBOOL(bArms);
        P_FINISH;
        *(class UUTCharFamilyAssetStore**)Result=LoadFamilyAssets(InFamilyID,bBlocking,bArms);
    }
    DECLARE_FUNCTION(execStartCustomCharMerge)
    {
        P_GET_STRUCT_INIT(struct FCustomCharData,InCharData);
        P_GET_STR(TeamString);
        P_GET_STR(SkinString);
        P_GET_OBJECT(USkeletalMesh,UseMesh);
        P_GET_BYTE(TextureRes);
        P_FINISH;
        *(struct FCustomCharMergeState*)Result=StartCustomCharMerge(InCharData,TeamString,SkinString,UseMesh,TextureRes);
    }
    DECLARE_FUNCTION(execFinishCustomCharMerge)
    {
        P_GET_STRUCT_INIT_REF(struct FCustomCharMergeState,MergeState);
        P_FINISH;
        *(class USkeletalMesh**)Result=FinishCustomCharMerge(MergeState);
    }
    DECLARE_FUNCTION(execResetCustomCharMerge)
    {
        P_GET_STRUCT_INIT_REF(struct FCustomCharMergeState,MergeState);
        P_FINISH;
        ResetCustomCharMerge(MergeState);
    }
    DECLARE_FUNCTION(execMakeCharPortraitTexture)
    {
        P_GET_OBJECT(USkeletalMesh,CharMesh);
        P_GET_STRUCT(struct FCharPortraitSetup,Setup);
        P_FINISH;
        *(class UTexture**)Result=MakeCharPortraitTexture(CharMesh,Setup);
    }
    DECLARE_FUNCTION(execMakeRandomCharData)
    {
        P_FINISH;
        *(struct FCustomCharData*)Result=MakeRandomCharData();
    }
    DECLARE_FUNCTION(execCharDataToString)
    {
        P_GET_STRUCT_INIT(struct FCustomCharData,InCharData);
        P_FINISH;
        *(FString*)Result=CharDataToString(InCharData);
    }
    DECLARE_FUNCTION(execCharDataFromString)
    {
        P_GET_STR(InString);
        P_FINISH;
        *(struct FCustomCharData*)Result=CharDataFromString(InString);
    }
    DECLARE_CLASS(UUTCustomChar_Data,UObject,0|CLASS_Config,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("CustomChar");}

    NO_DEFAULT_CONSTRUCTOR(UUTCustomChar_Data)
};

struct FViewShakeInfo
{
    FVector OffsetMag;
    FVector OffsetRate;
    FLOAT OffsetTime;
    FVector RotMag;
    FVector RotRate;
    FLOAT RotTime;
};

struct FObjectiveAnnouncementInfo
{
    class USoundNodeWave* AnnouncementSound;
    FStringNoInit AnnouncementText;

    /** Constructors */
    FObjectiveAnnouncementInfo() {}
    FObjectiveAnnouncementInfo(EEventParm)
    {
        appMemzero(this, sizeof(FObjectiveAnnouncementInfo));
    }
};

struct FPostProcessInfo
{
    FLOAT Shadows;
    FLOAT MidTones;
    FLOAT HighLights;
    FLOAT Desaturation;
};

class AUTPlayerController : public AGamePlayerController
{
public:
    //## BEGIN PROPS UTPlayerController
    BITFIELD bLateComer:1;
    BITFIELD bDontUpdate:1;
    BITFIELD bIsTyping:1;
    BITFIELD bAcuteHearing:1;
    BITFIELD bNoVoiceMessages:1;
    BITFIELD bNoTextToSpeechVoiceMessages:1;
    BITFIELD bTextToSpeechTeamMessagesOnly:1;
    BITFIELD bNoVoiceTaunts:1;
    BITFIELD bNoAutoTaunts:1;
    BITFIELD bAutoTaunt:1;
    BITFIELD bNoMatureLanguage:1;
    BITFIELD bEnableDodging:1;
    BITFIELD bLookUpStairs:1;
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bCenterView:1;
    BITFIELD bAlwaysLevel:1;
    BITFIELD bUseVehicleRotationOnPossess:1;
    BITFIELD bViewingMap:1;
    BITFIELD bRotateMinimap:1;
    BITFIELD bInitialProcessingComplete:1;
    BITFIELD bProfileWeaponBob:1;
    BITFIELD bProfileAutoSwitchWeaponOnPickup:1;
    BITFIELD bBehindView:1;
    BITFIELD bForceBehindView:1;
    BITFIELD bUsePhysicsRotation:1;
    BITFIELD bFreeCamera:1;
    BITFIELD bCurrentCamAnimIsDamageShake:1;
    BITFIELD bLandingShake:1;
    BITFIELD bCenteredWeaponFire:1;
    BITFIELD bDisableQuickPick:1;
    BITFIELD bBeaconPulseDir:1;
    BITFIELD bPulseTeamColor:1;
    BITFIELD bConstructioningMeshes:1;
    BYTE ProfileWeaponHand GCC_BITFIELD_MAGIC;
    BYTE PawnShadowMode;
    BYTE WeaponHandPreference;
    BYTE WeaponHand;
    BYTE AutoObjectivePreference;
    FVector DesiredLocation;
    class AUTAnnouncer* Announcer;
    class AUTMusicManager* MusicManager;
    FLOAT LastTauntAnimTime;
    FLOAT LastKickWarningTime;
    FStringNoInit MsgPlayerNotFound;
    struct FViewShakeInfo CurrentViewShake;
    class UCameraAnimInst* CameraAnimPlayer;
    struct FPostProcessSettings CamOverridePostProcess;
    class UCameraAnim* DamageCameraAnim;
    class UCameraAnim* SpawnCameraAnim[3];
    FVector ShakeOffset;
    FRotator ShakeRot;
    FLOAT LastCameraTimeStamp;
    class UClass* MatineeCameraClass;
    class AUTGameObjective* StartObjective;
    class AActor* CalcViewActor;
    FVector CalcViewActorLocation;
    FRotator CalcViewActorRotation;
    FVector CalcViewLocation;
    FRotator CalcViewRotation;
    FLOAT LastWarningTime;
    class APawn* ShadowPawn;
    FLOAT FOVLinearZoomRate;
    BITFIELD bNonlinearZoomInterpolation:1;
    BITFIELD bRetrieveSettingsFromProfileOnNextTick:1;
    BITFIELD bDebugFreeCam:1;
    FLOAT FOVNonlinearZoomInterpSpeed;
    FLOAT ZoomRotationModifier;
    FRotator DebugFreeCamRot;
    FLOAT LastShowPathTime;
    class AActor* LastAutoObjective;
    FLOAT VehicleCheckRadiusScaling;
    class UUTUIScene_WeaponQuickPick* QuickPickSceneTemplate;
    class UUTUIScene_WeaponQuickPick* QuickPickScene;
    FLOAT BeaconPulseScale;
    FLOAT BeaconPulseMax;
    FLOAT BeaconPulseRate;
    FLOAT PulseTimer;
    class UUTUIScene* CurrentMapScene;
    class UUTUIScene* CurrentMidGameMenu;
    class UUTUIScene_CommandMenu* CommandMenuTemplate;
    class UUTUIScene_CommandMenu* CommandMenu;
    class UUTUIScene_MapVote* TestSceneTemplate;
    TArrayNoInit<struct FPostProcessInfo> PostProcessPresets;
    class AUTEmitCameraEffect* CameraEffect;
    class AUTVoteReplicationInfo* VoteRI;
    //## END PROPS UTPlayerController

    virtual struct FCustomCharData GetPlayerCustomCharData(const FString& CharDataString);
    void CheckShake(FLOAT& MaxOffset,FLOAT& Offset,FLOAT& Rate,FLOAT Time);
    void UpdateShakeRotComponent(FLOAT& Max,INT& Current,FLOAT& Rate,FLOAT Time,FLOAT DeltaTime);
    virtual INT GetUIPlayerIndex();
    virtual void SetGamma(FLOAT GammaValue);
    virtual void ClipChar();
    virtual void CharPolyCount();
    DECLARE_FUNCTION(execGetPlayerCustomCharData)
    {
        P_GET_STR(CharDataString);
        P_FINISH;
        *(struct FCustomCharData*)Result=GetPlayerCustomCharData(CharDataString);
    }
    DECLARE_FUNCTION(execCheckShake)
    {
        P_GET_FLOAT_REF(MaxOffset);
        P_GET_FLOAT_REF(Offset);
        P_GET_FLOAT_REF(Rate);
        P_GET_FLOAT(Time);
        P_FINISH;
        CheckShake(MaxOffset,Offset,Rate,Time);
    }
    DECLARE_FUNCTION(execUpdateShakeRotComponent)
    {
        P_GET_FLOAT_REF(Max);
        P_GET_INT_REF(Current);
        P_GET_FLOAT_REF(Rate);
        P_GET_FLOAT(Time);
        P_GET_FLOAT(DeltaTime);
        P_FINISH;
        UpdateShakeRotComponent(Max,Current,Rate,Time,DeltaTime);
    }
    DECLARE_FUNCTION(execGetUIPlayerIndex)
    {
        P_FINISH;
        *(INT*)Result=GetUIPlayerIndex();
    }
    DECLARE_FUNCTION(execSetGamma)
    {
        P_GET_FLOAT(GammaValue);
        P_FINISH;
        SetGamma(GammaValue);
    }
    DECLARE_FUNCTION(execClipChar)
    {
        P_FINISH;
        ClipChar();
    }
    DECLARE_FUNCTION(execCharPolyCount)
    {
        P_FINISH;
        CharPolyCount();
    }
    DECLARE_CLASS(AUTPlayerController,AGamePlayerController,0|CLASS_Config,UTGame)
	virtual void HearSound(USoundCue* InSoundCue, AActor* SoundPlayer, const FVector& SoundLocation, UBOOL bStopWhenOwnerDestroyed);
	virtual UBOOL Tick( FLOAT DeltaSeconds, ELevelTick TickType );
	virtual UBOOL MoveWithInterpMoveTrack(UInterpTrackMove* MoveTrack, UInterpTrackInstMove* MoveInst, FLOAT CurTime, FLOAT DeltaTime);
	virtual void ModifyPostProcessSettings(FPostProcessSettings& PPSettings) const;
};

struct FDigitalButtonActionsToCommandDatum
{
    FStringNoInit Command;

    /** Constructors */
    FDigitalButtonActionsToCommandDatum() {}
    FDigitalButtonActionsToCommandDatum(EEventParm)
    {
        appMemzero(this, sizeof(FDigitalButtonActionsToCommandDatum));
    }
};

struct FProfileSettingToUE3BindingDatum
{
    FName ProfileSettingName;
    FName UE3BindingName;
};

class AUTConsolePlayerController : public AUTPlayerController
{
public:
    //## BEGIN PROPS UTConsolePlayerController
    BITFIELD bTargetAdhesionEnabled:1;
    BITFIELD bDebugTargetAdhesion:1;
    BITFIELD bLookToSteer:1;
    BITFIELD bJustFoundVehicle:1;
    TArrayNoInit<struct FDigitalButtonActionsToCommandDatum> DigitalButtonActionsToCommandMapping;
    TArrayNoInit<struct FProfileSettingToUE3BindingDatum> ProfileSettingToUE3BindingMapping;
    //## END PROPS UTConsolePlayerController

    virtual class APawn* GetTargetAdhesionFrictionTarget(FLOAT MaxDistance,const FVector& CamLoc,const FRotator& CamRot) const;
    DECLARE_FUNCTION(execGetTargetAdhesionFrictionTarget)
    {
        P_GET_FLOAT(MaxDistance);
        P_GET_STRUCT_REF(FVector,CamLoc);
        P_GET_STRUCT_REF(FRotator,CamRot);
        P_FINISH;
        *(class APawn**)Result=GetTargetAdhesionFrictionTarget(MaxDistance,CamLoc,CamRot);
    }
    DECLARE_CLASS(AUTConsolePlayerController,AUTPlayerController,0|CLASS_Config,UTGame)
	/**
	 * This will score both Adhesion and Friction targets.  We want the same scoring function as we
	 * don't want the two different systems fighting over targets that are close.
	 **/
	virtual FLOAT ScoreTargetAdhesionFrictionTarget( const APawn* P, FLOAT MaxDistance, const FVector& CamLoc, const FRotator& CamRot ) const;

	/** Determines whether this Pawn can be used for TargetAdhesion **/
	virtual UBOOL IsValidTargetAdhesionFrictionTarget( const APawn* P, FLOAT MaxDistance ) const;
};

class AUTEntryPlayerController : public AUTPlayerController
{
public:
    //## BEGIN PROPS UTEntryPlayerController
    //## END PROPS UTEntryPlayerController

    DECLARE_CLASS(AUTEntryPlayerController,AUTPlayerController,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTEntryPlayerController)
};

struct FCameraTransitionPoint
{
    FName BoneName;
    class ASkeletalMeshActor* DestGlobe;
    FLOAT MapDist;
};

class AUTMissionPlayerController : public AUTEntryPlayerController
{
public:
    //## BEGIN PROPS UTMissionPlayerController
    TArrayNoInit<class AUTSPGlobe*> Globes;
    BYTE CameraTransitionState;
    FVector CameraLocation;
    FRotator CameraLook;
    struct FCameraTransitionPoint CameraTransitions[2];
    FLOAT CameraTransitionTime;
    FLOAT CameraTransitionDuration;
    FLOAT Tanmod;
    INT GlobeIndex;
    FVector DefaultLocation;
    FVector DefaultLookAt;
    //## END PROPS UTMissionPlayerController

    DECLARE_CLASS(AUTMissionPlayerController,AUTEntryPlayerController,0|CLASS_Config,UTGame)
	UBOOL Tick( FLOAT DeltaTime, enum ELevelTick TickType );
};

class AUTDroppedPickup : public ADroppedPickup
{
public:
    //## BEGIN PROPS UTDroppedPickup
    FLOAT YawRotationRate;
    class UPrimitiveComponent* PickupMesh;
    FLOAT StartScale;
    BITFIELD bRotatingPickup:1;
    BITFIELD bPickupable:1;
    class ULightEnvironmentComponent* MyLightEnvironment;
    //## END PROPS UTDroppedPickup

    DECLARE_CLASS(AUTDroppedPickup,ADroppedPickup,0,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct UTKActor_eventOnEncroach_Parms
{
    class AActor* Other;
    UBOOL ReturnValue;
    UTKActor_eventOnEncroach_Parms(EEventParm)
    {
    }
};
struct UTKActor_eventOnBreakApart_Parms
{
    UTKActor_eventOnBreakApart_Parms(EEventParm)
    {
    }
};
class AUTKActor : public AKActor
{
public:
    //## BEGIN PROPS UTKActor
    BITFIELD bHasHealth:1;
    BITFIELD bDamageOnEncroachment:1;
    BITFIELD bResetDOEWhenAsleep:1;
    BITFIELD bTakeDamageOnEncroachment:1;
    BITFIELD bBreakWhenCausingDamage:1;
    BITFIELD bBroken:1;
    INT Health;
    INT EncroachDamage_Other;
    INT EncroachDamage_Self;
    class UClass* DmgTypeClass;
    INT DOEResetThreshold;
    class UParticleSystem* BrokenTemplate;
    class AController* InstigatorController;
    FScriptDelegate __OnBreakApart__Delegate;
    FScriptDelegate __OnEncroach__Delegate;
    //## END PROPS UTKActor

    UBOOL delegateOnEncroach(class AActor* Other)
    {
        UTKActor_eventOnEncroach_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.Other=Other;
        ProcessDelegate(UTGAME_OnEncroach,&__OnEncroach__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnBreakApart()
    {
        ProcessDelegate(UTGAME_OnBreakApart,&__OnBreakApart__Delegate,NULL);
    }
    DECLARE_CLASS(AUTKActor,AKActor,0,UTGame)
	// AActor interface
	virtual void physRigidBody(FLOAT DeltaTime);
};

struct FAttachedExplosionLight
{
    class UUTExplosionLight* Light;
    class AActor* Base;
    FVector RelativeLocation;
};

class AUTEmitterPool : public AEmitterPool
{
public:
    //## BEGIN PROPS UTEmitterPool
    TArrayNoInit<struct FAttachedExplosionLight> RelativeExplosionLights;
    //## END PROPS UTEmitterPool

    DECLARE_CLASS(AUTEmitterPool,AEmitterPool,0|CLASS_Config,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
};

class AFlockAttractor : public AActor
{
public:
    //## BEGIN PROPS FlockAttractor
    FLOAT Attraction;
    BITFIELD bAttractorEnabled:1;
    BITFIELD bAttractionFalloff:1;
    BITFIELD bActionAtThisAttractor:1;
    class UCylinderComponent* CylinderComponent;
    //## END PROPS FlockAttractor

    DECLARE_CLASS(AFlockAttractor,AActor,0,UTGame)
	// AActor interface.
	virtual void EditorApplyScale(const FVector& DeltaScale, const FMatrix& ScaleMatrix, const FVector* PivotLocation, UBOOL bAltDown, UBOOL bShiftDown, UBOOL bCtrlDown);
};

class AFlockTest_Spawner : public AActor
{
public:
    //## BEGIN PROPS FlockTest_Spawner
    BITFIELD bActive:1;
    FLOAT SpawnRate;
    INT SpawnNum;
    FLOAT Radius;
    FLOAT Remainder;
    INT NumSpawned;
    FLOAT AwareRadius;
    FLOAT ToCentroidStrength;
    FLOAT AvoidOtherStrength;
    FLOAT AvoidOtherRadius;
    FLOAT MatchVelStrength;
    FLOAT ToTargetStrength;
    FLOAT ChangeTargetInterval;
    FLOAT ToPathStrength;
    FLOAT FollowPathStrength;
    FVector CrowdAcc;
    FLOAT MinVelDamping;
    FLOAT MaxVelDamping;
    struct FRawDistributionFloat ActionDuration;
    struct FRawDistributionFloat ActionInterval;
    struct FRawDistributionFloat TargetActionInterval;
    TArrayNoInit<FName> ActionAnimNames;
    TArrayNoInit<FName> TargetActionAnimNames;
    FLOAT ActionBlendTime;
    FLOAT ReActionDelay;
    FLOAT RotateToTargetSpeed;
    FLOAT SpeedBlendStart;
    FLOAT SpeedBlendEnd;
    FLOAT WalkVelThresh;
    FLOAT AnimVelRate;
    FLOAT MaxYawRate;
    TArrayNoInit<class USkeletalMesh*> FlockMeshes;
    TArrayNoInit<class UAnimSet*> FlockAnimSets;
    FName WalkAnimName;
    FName RunAnimName;
    class UAnimTree* FlockAnimTree;
    TArrayNoInit<class USkeletalMesh*> AttachmentMeshes;
    FName AttachmentSocket;
    //## END PROPS FlockTest_Spawner

    DECLARE_ABSTRACT_CLASS(AFlockTest_Spawner,AActor,0,UTGame)
	void UpdateAgent(class AFlockTestActor* Agent, FLOAT DeltaTime);
};

class AFlockTestActor : public AActor
{
public:
    //## BEGIN PROPS FlockTestActor
    class AFlockTest_Spawner* Spawner;
    class ANavigationPoint* TargetNav;
    BYTE AgentState;
    FLOAT NextChangeTargetTime;
    FLOAT EndActionTime;
    FLOAT NextActionTime;
    FLOAT VelDamping;
    FRotator ToTargetRot;
    BITFIELD bRotateToTargetRot:1;
    BITFIELD bHadNearbyTarget:1;
    class USkeletalMeshComponent* SkeletalMeshComponent;
    class USkeletalMeshComponent* AttachmentComponent;
    class UAnimNodeBlend* SpeedBlendNode;
    class UAnimNodeBlend* ActionBlendNode;
    class UAnimNodeSequence* ActionSeqNode;
    class UAnimNodeSequence* WalkSeqNode;
    class UAnimNodeSequence* RunSeqNode;
    class ULightEnvironmentComponent* LightEnvironment;
    //## END PROPS FlockTestActor

    DECLARE_CLASS(AFlockTestActor,AActor,0,UTGame)
	virtual void performPhysics(FLOAT DeltaTime);
	void SetAgentMoveState(BYTE NewState);
	void DoAction(UBOOL bAtTarget, const FVector& TargetLoc);
};

struct FGameTypePrefix
{
    FStringNoInit Prefix;
    FStringNoInit GameType;
    TArrayNoInit<FString> AdditionalGameTypes;

    /** Constructors */
    FGameTypePrefix() {}
    FGameTypePrefix(EEventParm)
    {
        appMemzero(this, sizeof(FGameTypePrefix));
    }
};

struct FGameMapCycle
{
    FName GameClassName;
    TArrayNoInit<FString> Maps;

    /** Constructors */
    FGameMapCycle() {}
    FGameMapCycle(EEventParm)
    {
        appMemzero(this, sizeof(FGameMapCycle));
    }
};

struct FActiveBotInfo
{
    FStringNoInit BotName;
    BITFIELD bInUse:1;

    /** Constructors */
    FActiveBotInfo() {}
    FActiveBotInfo(EEventParm)
    {
        appMemzero(this, sizeof(FActiveBotInfo));
    }
};

class AUTGame : public AGameInfo
{
public:
    //## BEGIN PROPS UTGame
    BITFIELD bExportMenuData:1;
    BITFIELD bWeaponStay:1;
    BITFIELD bTeamScoreRounds:1;
    BITFIELD bSoaking:1;
    BITFIELD bPlayersVsBots:1;
    BITFIELD bCustomBots:1;
    BITFIELD bNoCustomCharacters:1;
    BITFIELD bAutoNumBots:1;
    BITFIELD bPlayersMustBeReady:1;
    BITFIELD bForceRespawn:1;
    BITFIELD bTempForceRespawn:1;
    BITFIELD bWaitForNetPlayers:1;
    BITFIELD bWarmupRound:1;
    BITFIELD bConsoleStartWithWeapons:1;
    BITFIELD bFirstBlood:1;
    BITFIELD bQuickStart:1;
    BITFIELD bSkipPlaySound:1;
    BITFIELD bStartedCountDown:1;
    BITFIELD bFinalStartup:1;
    BITFIELD bOverTimeBroadcast:1;
    BITFIELD bMustHaveMultiplePlayers:1;
    BITFIELD bPlayerBecameActive:1;
    BITFIELD bMustJoinBeforeStart:1;
    BITFIELD bAdjustSkill:1;
    BITFIELD bDemoMode:1;
    BITFIELD bUndrivenVehicleDamage:1;
    BITFIELD bAllowTranslocator:1;
    BITFIELD bAllowHoverboard:1;
    BITFIELD bConsoleServer:1;
    BITFIELD bAllowMapVoting:1;
    FStringNoInit CallSigns[15];
    FStringNoInit Acronym;
    FStringNoInit Description;
    INT ServerSkillLevel;
    FLOAT EndTimeDelay;
    FLOAT BotRatio;
    INT NetWait;
    INT ClientProcessingTimeout;
    INT MinNetPlayers;
    INT RestartWait;
    INT WarmupTime;
    INT WarmupRemaining;
    BYTE StartupStage;
    INT DesiredPlayerCount;
    FLOAT SpawnProtectionTime;
    INT DefaultMaxLives;
    INT LateEntryLives;
    INT RemainingTime;
    INT ElapsedTime;
    INT CountDown;
    FLOAT AdjustedDifficulty;
    INT PlayerKills;
    INT PlayerDeaths;
    class ANavigationPoint* LastPlayerStartSpot;
    class ANavigationPoint* LastStartSpot;
    FLOAT EndTime;
    INT EndMessageWait;
    INT EndMessageCounter;
    FStringNoInit RulesMenuType;
    FStringNoInit GameUMenuType;
    class AActor* EndGameFocus;
    INT ResetCountDown;
    INT ResetTimeDelay;
    class AUTVehicle* VehicleList;
    class AUTTeamInfo* EnemyRoster;
    FStringNoInit EnemyRosterName;
    FStringNoInit DefaultEnemyRosterClass;
    FStringNoInit MaleBackupNames[32];
    FStringNoInit FemaleBackupNames[32];
    INT MaleBackupNameOffset;
    INT FemaleBackupNameOffset;
    TArrayNoInit<class UClass*> DefaultInventory;
    class AUTProj_TransDisc* BeaconList;
    class UClass* TranslocatorClass;
    INT LastTaunt[2];
    class UClass* VictoryMessageClass;
    TArrayNoInit<struct FGameTypePrefix> MapPrefixes;
    TArrayNoInit<struct FGameTypePrefix> CustomMapPrefixes;
    FStringNoInit MapPrefix;
    class AUTGameStats* GameStats;
    FStringNoInit GameStatsClass;
    class UClass* ConsolePlayerControllerClass;
    INT SinglePlayerMissionIndex;
    FStringNoInit DemoPrefix;
    class UClass* BotClass;
    TArrayNoInit<struct FGameMapCycle> GameSpecificMapCycles;
    TArrayNoInit<struct FActiveBotInfo> ActiveBots;
    INT VoteDuration;
    class AUTVoteCollector* VoteCollector;
    class UUTUIScene* MidGameMenuTemplate;
    //## END PROPS UTGame

    virtual void SortPlayerScores(TArray<struct FOnlinePlayerScore>& PlayerScores);
    DECLARE_FUNCTION(execSortPlayerScores)
    {
        P_GET_TARRAY_REF(struct FOnlinePlayerScore,PlayerScores);
        P_FINISH;
        SortPlayerScores(PlayerScores);
    }
    DECLARE_ABSTRACT_CLASS(AUTGame,AGameInfo,0|CLASS_Config,UTGame)
	virtual void AddSupportedGameTypes(AWorldInfo* Info, const TCHAR* WorldFilename) const;
};

class AUTMutator : public AMutator
{
public:
    //## BEGIN PROPS UTMutator
    BITFIELD bExportMenuData:1 GCC_BITFIELD_MAGIC;
    //## END PROPS UTMutator

    DECLARE_ABSTRACT_CLASS(AUTMutator,AMutator,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTMutator)
};

struct FCreateCharStatus
{
    struct FCustomCharMergeState MergeState;
    class UUTCharFamilyAssetStore* AssetStore;
    class UUTCharFamilyAssetStore* ArmAssetStore;
    class AUTPlayerReplicationInfo* PRI;
    FLOAT StartMergeTime;
    BITFIELD bNeedsArms:1;

    /** Constructors */
    FCreateCharStatus() {}
    FCreateCharStatus(EEventParm)
    {
        appMemzero(this, sizeof(FCreateCharStatus));
    }
};

class AUTGameReplicationInfo : public AGameReplicationInfo
{
public:
    //## BEGIN PROPS UTGameReplicationInfo
    FLOAT WeaponBerserk;
    INT MinNetPlayers;
    INT BotDifficulty;
    BITFIELD bWarmupRound:1;
    BITFIELD bProcessedInitialCharacters:1;
    BITFIELD bStoryMode:1;
    BITFIELD bConsoleServer:1;
    BITFIELD bShowMOTD:1;
    TArrayNoInit<class APlayerController*> LocalPCsLeftToProcess;
    INT TotalPlayersSetToProcess;
    TArrayNoInit<struct FCreateCharStatus> CharStatus;
    BYTE FlagState[2];
    class UUTUIScene* MapMenuTemplate;
    TArrayNoInit<class AActor*> GameObjectives;
    FStringNoInit MutatorList;
    INT MapVoteTimeRemaining;
    TArrayNoInit<class UMaterialInterface*> WeaponOverlays;
    //## END PROPS UTGameReplicationInfo

    virtual void SetNoStreamWorldTextureForFrames(INT NumFrames);
    DECLARE_FUNCTION(execSetNoStreamWorldTextureForFrames)
    {
        P_GET_INT(NumFrames);
        P_FINISH;
        SetNoStreamWorldTextureForFrames(NumFrames);
    }
    DECLARE_CLASS(AUTGameReplicationInfo,AGameReplicationInfo,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTGameReplicationInfo)
};

struct UTMissionGRI_eventOnMissionChanged_Parms
{
    INT NewMissionIndex;
    class AUTMissionGRI* GRI;
    UTMissionGRI_eventOnMissionChanged_Parms(EEventParm)
    {
    }
};
class AUTMissionGRI : public AUTGameReplicationInfo
{
public:
    //## BEGIN PROPS UTMissionGRI
    TArrayNoInit<class UUTSeqObj_SPMission*> FullMissionList;
    INT CurrentMissionIndex;
    INT LastMissionIndex;
    BYTE LastMissionResult;
    FName RequestedMenuName;
    FStringNoInit SelectionSceneTemplate;
    class UUTUIScene_CMissionSelection* SelectionScene;
    FStringNoInit BriefingSceneTemplate;
    class UUTUIScene_CMissionBriefing* BriefingScene;
    FScriptDelegate __OnMissionChanged__Delegate;
    //## END PROPS UTMissionGRI

    virtual void FillMissionList();
    DECLARE_FUNCTION(execFillMissionList)
    {
        P_FINISH;
        FillMissionList();
    }
    void delegateOnMissionChanged(INT NewMissionIndex,class AUTMissionGRI* GRI)
    {
        UTMissionGRI_eventOnMissionChanged_Parms Parms(EC_EventParm);
        Parms.NewMissionIndex=NewMissionIndex;
        Parms.GRI=GRI;
        ProcessDelegate(UTGAME_OnMissionChanged,&__OnMissionChanged__Delegate,&Parms);
    }
    DECLARE_CLASS(AUTMissionGRI,AUTGameReplicationInfo,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTMissionGRI)
};

struct UTPlayerReplicationInfo_eventGetHUDColor_Parms
{
    FColor ReturnValue;
    UTPlayerReplicationInfo_eventGetHUDColor_Parms(EEventParm)
    {
    }
};
struct UTPlayerReplicationInfo_eventGetNameCallSign_Parms
{
    FString ReturnValue;
    UTPlayerReplicationInfo_eventGetNameCallSign_Parms(EEventParm)
    {
    }
};
class AUTPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
    //## BEGIN PROPS UTPlayerReplicationInfo
    BITFIELD bHolding:1;
    BITFIELD bHUDRendered:1;
    INT spree;
    INT MultiKillLevel;
    FLOAT LastKillTime;
    class AUTLinkedReplicationInfo* CustomReplicationInfo;
    class AUTSquadAI* Squad;
    class AUTCarriedObject* HasFlag;
    FStringNoInit VoiceTypeName;
    FLinearColor SkinColor;
    INT FlakCount;
    INT ComboCount;
    INT HeadCount;
    INT RanOverCount;
    class AUTGameObjective* StartObjective;
    class AUTGameObjective* TemporaryStartObjective;
    class AUTPlayerReplicationInfo* LastKillerPRI;
    FColor DefaultHudColor;
    class UClass* HUDPawnClass;
    FVector HUDLocation;
    FVector HUDPawnLocation;
    class UMaterialInstanceConstant* HUDMaterialInstance;
    class AActor* SecondaryPlayerLocationHint;
    class ATeamInfo* OldTeam;
    struct FCustomCharData CharacterData;
    class USkeletalMesh* CharacterMesh;
    class UTexture* CharPortrait;
    class USkeletalMesh* FirstPersonArmMesh;
    class UMaterialInterface* FirstPersonArmMaterial;
    BYTE CharacterDataChangeCount;
    FStringNoInit ClanTag;
    //## END PROPS UTPlayerReplicationInfo

    FColor eventGetHUDColor()
    {
        UTPlayerReplicationInfo_eventGetHUDColor_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        ProcessEvent(FindFunctionChecked(UTGAME_GetHUDColor),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetNameCallSign()
    {
        UTPlayerReplicationInfo_eventGetNameCallSign_Parms Parms(EC_EventParm);
        ProcessEvent(FindFunctionChecked(UTGAME_GetNameCallSign),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AUTPlayerReplicationInfo,APlayerReplicationInfo,0|CLASS_NativeReplication,UTGame)
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

class AUTTeamInfo : public ATeamInfo
{
public:
    //## BEGIN PROPS UTTeamInfo
    INT DesiredTeamSize;
    class AUTTeamAI* AI;
    FStringNoInit TeamSymbolName;
    class UMaterial* TeamIcon;
    class AUTGameObjective* HomeBase;
    class AUTCarriedObject* TeamFlag;
    FStringNoInit Faction;
    TArrayNoInit<UBOOL> CharactersInUse;
    FColor BaseTeamColor[4];
    FColor TextColor[4];
    FStringNoInit TeamColorNames[4];
    //## END PROPS UTTeamInfo

    DECLARE_CLASS(AUTTeamInfo,ATeamInfo,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTTeamInfo)
};

class AUTLinkedReplicationInfo : public AReplicationInfo
{
public:
    //## BEGIN PROPS UTLinkedReplicationInfo
    class AUTLinkedReplicationInfo* NextReplicationInfo;
    //## END PROPS UTLinkedReplicationInfo

    DECLARE_ABSTRACT_CLASS(AUTLinkedReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,UTGame)
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

struct FMapVoteInfo
{
    INT MapID;
    FStringNoInit Map;
    BYTE NoVotes;

    /** Constructors */
    FMapVoteInfo() {}
    FMapVoteInfo(EEventParm)
    {
        appMemzero(this, sizeof(FMapVoteInfo));
    }
};

class AUTVoteCollector : public AInfo
{
public:
    //## BEGIN PROPS UTVoteCollector
    TArrayNoInit<struct FMapVoteInfo> Votes;
    TArrayNoInit<class AUTVoteReplicationInfo*> VRIList;
    BITFIELD bVoteDecided:1;
    INT WinningIndex;
    //## END PROPS UTVoteCollector

    virtual INT GetMapIndex(INT MapID);
    DECLARE_FUNCTION(execGetMapIndex)
    {
        P_GET_INT(MapID);
        P_FINISH;
        *(INT*)Result=GetMapIndex(MapID);
    }
    DECLARE_CLASS(AUTVoteCollector,AInfo,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTVoteCollector)
};

struct UTVoteReplicationInfo_eventClientHasOwner_Parms
{
    UTVoteReplicationInfo_eventClientHasOwner_Parms(EEventParm)
    {
    }
};
class AUTVoteReplicationInfo : public AReplicationInfo
{
public:
    //## BEGIN PROPS UTVoteReplicationInfo
    class AUTVoteCollector* Collector;
    TArrayNoInit<struct FMapVoteInfo> Maps;
    INT MapCount;
    INT SendIndex;
    INT LastSendIndex;
    class AActor* OldOwner;
    INT Dummy;
    class UUTUIScene_MapVote* VoteSceneTemplate;
    class UUTUIScene_MapVote* VoteScene;
    INT MyCurrnetVoteID;
    //## END PROPS UTVoteReplicationInfo

    virtual INT GetMapIndex(INT MapID);
    DECLARE_FUNCTION(execGetMapIndex)
    {
        P_GET_INT(MapID);
        P_FINISH;
        *(INT*)Result=GetMapIndex(MapID);
    }
    void eventClientHasOwner()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ClientHasOwner),NULL);
    }
    DECLARE_CLASS(AUTVoteReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,UTGame)
	/**
	 * Make an event call when the owner changes.
	 */
	void TickSpecial(FLOAT DeltaTime);
};

struct FFireModeStat
{
    INT ShotsFired;
    INT ShotsDamaged;
    INT ShotsDirectHit;
};

struct FWeaponStat
{
    class UClass* WeaponType;
    TArrayNoInit<struct FFireModeStat> FireStats;
    INT Combos;

    /** Constructors */
    FWeaponStat() {}
    FWeaponStat(EEventParm)
    {
        appMemzero(this, sizeof(FWeaponStat));
    }
};

struct FInventoryStat
{
    class UClass* InventoryType;
    INT NoPickups;
    INT NoDrops;
    INT NoIntentionalDrops;
};

struct FBonusStat
{
    FName BonusType;
    INT NoReceived;
};

struct FPlayerStat
{
    class APlayerReplicationInfo* PRI;
    FStringNoInit GlobalID;
    FStringNoInit DisplayName;
    INT TotalConnectTime;
    INT TotalScore;
    INT NoConnects;
    INT NoDisconnects;
    TArrayNoInit<struct FWeaponStat> WeaponStats;
    TArrayNoInit<struct FInventoryStat> InventoryStats;
    TArrayNoInit<struct FBonusStat> BonusStats;
    TArrayNoInit<INT> ObjectiveStats;
    TArrayNoInit<INT> KillStats;
    TArrayNoInit<INT> DeathStats;
    INT NoSuicides;

    /** Constructors */
    FPlayerStat() {}
    FPlayerStat(EEventParm)
    {
        appMemzero(this, sizeof(FPlayerStat));
    }
};

struct FGameStat
{
    INT TimeStamp;
    FName GameStatType;
    INT Team;
    INT InstigatorID;
    INT AdditionalID;
    class UClass* AdditionalData;
};

class AUTGameStats : public AInfo
{
public:
    //## BEGIN PROPS UTGameStats
    class AFileWriter* StatsLog;
    BITFIELD bKeepLocalStatsLog:1;
    BITFIELD bKeepRemoteStatsLog:1;
    FStringNoInit StatsRemoteAddress;
    class AGameReplicationInfo* GRI;
    TArrayNoInit<struct FPlayerStat> PlayerStats;
    TArrayNoInit<struct FGameStat> GameStats;
    TArrayNoInit<class UClass*> StatSummaryClasses;
    TArrayNoInit<class UUTStatsSummary*> StatSummaryObjects;
    //## END PROPS UTGameStats

    FString GetMapFilename();
    DECLARE_FUNCTION(execGetMapFilename)
    {
        P_FINISH;
        *(FString*)Result=GetMapFilename();
    }
    DECLARE_CLASS(AUTGameStats,AInfo,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTGameStats)
};

class AUTInventory : public AInventory
{
public:
    //## BEGIN PROPS UTInventory
    BITFIELD bDropOnDisrupt:1;
    //## END PROPS UTInventory

    DECLARE_ABSTRACT_CLASS(AUTInventory,AInventory,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTInventory)
};

struct UTTimedPowerup_eventTimeExpired_Parms
{
    UTTimedPowerup_eventTimeExpired_Parms(EEventParm)
    {
    }
};
class AUTTimedPowerup : public AUTInventory
{
public:
    //## BEGIN PROPS UTTimedPowerup
    FLOAT TimeRemaining;
    INT HudIndex;
    class USoundCue* PowerupOverSound;
    //## END PROPS UTTimedPowerup

    void eventTimeExpired()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_TimeExpired),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTTimedPowerup,AUTInventory,0,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
};

struct UTWeapon_eventGetPowerPerc_Parms
{
    FLOAT ReturnValue;
    UTWeapon_eventGetPowerPerc_Parms(EEventParm)
    {
    }
};
struct UTWeapon_eventSetPosition_Parms
{
    class AUTPawn* Holder;
    UTWeapon_eventSetPosition_Parms(EEventParm)
    {
    }
};
struct UTWeapon_eventStopMuzzleFlash_Parms
{
    UTWeapon_eventStopMuzzleFlash_Parms(EEventParm)
    {
    }
};
struct UTWeapon_eventCauseMuzzleFlash_Parms
{
    UTWeapon_eventCauseMuzzleFlash_Parms(EEventParm)
    {
    }
};
struct UTWeapon_eventCauseMuzzleFlashLight_Parms
{
    UTWeapon_eventCauseMuzzleFlashLight_Parms(EEventParm)
    {
    }
};
struct UTWeapon_eventMuzzleFlashTimer_Parms
{
    UTWeapon_eventMuzzleFlashTimer_Parms(EEventParm)
    {
    }
};
class AUTWeapon : public AGameWeapon
{
public:
    //## BEGIN PROPS UTWeapon
    BITFIELD bExportMenuData:1;
    BITFIELD bScaleCrosshair:1;
    BITFIELD bSmallWeapons:1;
    BITFIELD bSuperWeapon:1;
    BITFIELD bNeverForwardPendingFire:1;
    BITFIELD bSuppressSounds:1;
    BITFIELD bUsesOffhand:1;
    BITFIELD bMuzzleFlashPSCLoops:1;
    BITFIELD bSplashJump:1;
    BITFIELD bSplashDamage:1;
    BITFIELD bRecommendSplashDamage:1;
    BITFIELD bSniping:1;
    BITFIELD bCanDestroyBarricades:1;
    BITFIELD bLockedOnTarget:1;
    BITFIELD bSwapFireModes:1;
    BITFIELD bDebugWeapon:1;
    BITFIELD bUsingAimingHelp:1;
    BITFIELD bAllowFiringWithoutController:1;
    BITFIELD bUseOverlayHack:1;
    BITFIELD bTargetFrictionEnabled:1;
    BITFIELD bTargetAdhesionEnabled:1;
    class UClass* AmmoPickupClass;
    INT AmmoCount;
    INT LockerAmmoCount;
    INT MaxAmmoCount;
    TArrayNoInit<INT> ShotCost;
    TArrayNoInit<FLOAT> MinReloadPct;
    TArrayNoInit<struct FViewShakeInfo> FireShake;
    TArrayNoInit<class UCameraAnim*> FireCameraAnim;
    TArrayNoInit<FName> EffectSockets;
    INT IconX;
    INT IconY;
    INT IconWidth;
    INT IconHeight;
    FLOAT SwitchAbortTime;
    struct FTextureCoordinates IconCoordinates;
    struct FTextureCoordinates CrossHairCoordinates;
    class USurface* CrosshairImage;
    class UMaterialInstanceConstant* CrosshairMat;
    FColor CrosshairColor;
    TArrayNoInit<BYTE> bZoomedFireMode;
    BYTE ZoomedFireModeNum;
    BYTE InventoryGroup;
    BYTE WeaponLockType;
    BYTE AmmoDisplayType;
    FLOAT ZoomedTargetFOV;
    FLOAT ZoomedRate;
    FLOAT ZoomFadeTime;
    FLOAT FadeTime;
    class USoundCue* ZoomInSound;
    class USoundCue* ZoomOutSound;
    class UClass* AttachmentClass;
    class UMeshComponent* OverlayMesh;
    FLOAT GroupWeight;
    FLOAT InventoryWeight;
    INT QuickPickGroup;
    FLOAT QuickPickWeight;
    TArrayNoInit<FName> WeaponFireAnim;
    TArrayNoInit<FName> ArmFireAnim;
    class UAnimSet* ArmsAnimSet;
    FName WeaponPutDownAnim;
    FName ArmsPutDownAnim;
    FName WeaponEquipAnim;
    FName ArmsEquipAnim;
    TArrayNoInit<FName> WeaponIdleAnims;
    TArrayNoInit<FName> ArmIdleAnims;
    TArrayNoInit<class USoundCue*> WeaponFireSnd;
    class USoundCue* WeaponPutDownSnd;
    class USoundCue* WeaponEquipSnd;
    FLOAT BobDamping;
    FLOAT JumpDamping;
    FLOAT MaxPitchLag;
    FLOAT MaxYawLag;
    FLOAT LastRotUpdate;
    FRotator LastRotation;
    FLOAT OldLeadMag[2];
    INT OldRotDiff[2];
    FLOAT OldMaxDiff[2];
    FLOAT RotChgSpeed;
    FLOAT ReturnChgSpeed;
    FColor WeaponColor;
    FLOAT WeaponCanvasXPct;
    FLOAT WeaponCanvasYPct;
    FName MuzzleFlashSocket;
    class UParticleSystemComponent* MuzzleFlashPSC;
    class UParticleSystem* MuzzleFlashPSCTemplate;
    class UParticleSystem* MuzzleFlashAltPSCTemplate;
    FColor MuzzleFlashColor;
    class UUTExplosionLight* MuzzleFlashLight;
    class UClass* MuzzleFlashLightClass;
    FLOAT MuzzleFlashDuration;
    FVector PlayerViewOffset;
    FRotator LockerRotation;
    FVector LockerOffset;
    FLOAT CurrentRating;
    FLOAT aimerror;
    INT OwnerStatsID;
    INT WeaponStatsID;
    class UClass* LockablePawnClass;
    FLOAT LockCheckTime;
    INT LockRange;
    FLOAT LockAcquireTime;
    FLOAT LockTolerance;
    class AActor* LockedTarget;
    class AActor* PendingLockedTarget;
    FLOAT LastLockedOnTime;
    FLOAT PendingLockedTargetTime;
    FLOAT LastValidTargetTime;
    FLOAT LockAim;
    FLOAT ConsoleLockAim;
    class USoundCue* LockAcquiredSound;
    class USoundCue* LockLostSound;
    FLOAT AimingHelpRadius[2];
    FLOAT LastSPTime;
    FLOAT PitchOffset;
    FLOAT ZoomedTurnSpeedScalePct;
    FLOAT TargetFrictionDistanceMin;
    FLOAT TargetFrictionDistancePeak;
    FLOAT TargetFrictionDistanceMax;
    FInterpCurveFloat TargetFrictionDistanceCurve;
    FVector2D TargetFrictionMultiplierRange;
    FLOAT TargetFrictionPeakRadiusScale;
    FLOAT TargetFrictionPeakHeightScale;
    FVector TargetFrictionOffset;
    FLOAT TargetFrictionZoomedBoostValue;
    FLOAT TargetAdhesionTimeMax;
    FLOAT TargetAdhesionDistanceMax;
    FLOAT TargetAdhesionAimDistY;
    FLOAT TargetAdhesionAimDistZ;
    FVector2D TargetAdhesionScaleRange;
    FLOAT TargetAdhesionScaleAmountMin;
    FLOAT TargetAdhesionTargetVelocityMin;
    FLOAT TargetAdhesionPlayerVelocityMin;
    FLOAT TargetAdhesionZoomedBoostValue;
    //## END PROPS UTWeapon

    FLOAT eventGetPowerPerc()
    {
        UTWeapon_eventGetPowerPerc_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(UTGAME_GetPowerPerc),&Parms);
        return Parms.ReturnValue;
    }
    void eventSetPosition(class AUTPawn* Holder)
    {
        UTWeapon_eventSetPosition_Parms Parms(EC_EventParm);
        Parms.Holder=Holder;
        ProcessEvent(FindFunctionChecked(UTGAME_SetPosition),&Parms);
    }
    void eventStopMuzzleFlash()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_StopMuzzleFlash),NULL);
    }
    void eventCauseMuzzleFlash()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_CauseMuzzleFlash),NULL);
    }
    void eventCauseMuzzleFlashLight()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_CauseMuzzleFlashLight),NULL);
    }
    void eventMuzzleFlashTimer()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_MuzzleFlashTimer),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTWeapon,AGameWeapon,0|CLASS_Config|CLASS_NativeReplication,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("Weapon");}

	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

class AUTDeployable : public AUTWeapon
{
public:
    //## BEGIN PROPS UTDeployable
    class AUTDeployablePickupFactory* Factory;
    class UClass* DeployedActorClass;
    FStringNoInit FailedDeployMessage;
    FLOAT TossMag;
    FLOAT PreviewScale3p;
    BITFIELD bDelayRespawn:1;
    //## END PROPS UTDeployable

    DECLARE_ABSTRACT_CLASS(AUTDeployable,AUTWeapon,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTDeployable)
};

class AUTWeap_FlakCannon : public AUTWeapon
{
public:
    //## BEGIN PROPS UTWeap_FlakCannon
    FLOAT SpreadDist;
    class UUTSkeletalMeshComponent* SkeletonFirstPersonMesh;
    BITFIELD bIsAmmoOdometerAnimated:1;
    INT curTensOdometer;
    INT curOnesOdometer;
    FLOAT OdometerMaxPerSecOnes;
    FLOAT OdometerMaxPerSecTens;
    FName OnesPlaceSkelName;
    FName TensPlaceSkelName;
    class UClass* CenterShardClass;
    FLOAT CustomGravityScaling;
    FLOAT TossZ;
    //## END PROPS UTWeap_FlakCannon

    DECLARE_CLASS(AUTWeap_FlakCannon,AUTWeapon,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct UTWeap_ImpactHammer_eventImpactAutoFire_Parms
{
    UTWeap_ImpactHammer_eventImpactAutoFire_Parms(EEventParm)
    {
    }
};
class AUTWeap_ImpactHammer : public AUTWeapon
{
public:
    //## BEGIN PROPS UTWeap_ImpactHammer
    FLOAT MinDamage;
    FLOAT MaxDamage;
    FLOAT MinForce;
    FLOAT MaxForce;
    FLOAT MinSelfDamage;
    FLOAT SelfForceScale;
    FLOAT SelfDamageScale;
    INT PowerLevel;
    FLOAT ChargeTime;
    FName ChargeAnim;
    FName ChargeIdleAnim;
    FLOAT MaxChargeTime;
    FLOAT MinChargeTime;
    class USoundCue* WeaponChargeSnd;
    class USoundCue* ImpactJumpSound;
    class AActor* AutoHitActor;
    FLOAT AutoFireRange;
    FLOAT EMPDamage;
    BITFIELD bIsCurrentlyCharging:1;
    class UParticleSystem* ChargeEffect[2];
    class UMaterialInstanceConstant* BloodMIC;
    class UParticleSystem* AltHitEffect;
    //## END PROPS UTWeap_ImpactHammer

    void eventImpactAutoFire()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ImpactAutoFire),NULL);
    }
    DECLARE_CLASS(AUTWeap_ImpactHammer,AUTWeapon,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct FAmmoStore
{
    INT Amount;
    class UClass* WeaponClass;
};

class AUTInventoryManager : public AInventoryManager
{
public:
    //## BEGIN PROPS UTInventoryManager
    BITFIELD bAutoSwitchWeaponOnPickup:1;
    BITFIELD bInfiniteAmmo:1;
    TArrayNoInit<struct FAmmoStore> AmmoStorage;
    class AWeapon* PreviousWeapon;
    FLOAT LastAdjustTime;
    //## END PROPS UTInventoryManager

    DECLARE_CLASS(AUTInventoryManager,AInventoryManager,0|CLASS_Config,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

    NO_DEFAULT_CONSTRUCTOR(AUTInventoryManager)
};

struct FScorerRecord
{
    class AUTPlayerReplicationInfo* PRI;
    FLOAT Pct;
};

struct UTGameObjective_eventGetBestViewTarget_Parms
{
    class AActor* ReturnValue;
    UTGameObjective_eventGetBestViewTarget_Parms(EEventParm)
    {
    }
};
struct UTGameObjective_eventIsDisabled_Parms
{
    UBOOL ReturnValue;
    UTGameObjective_eventIsDisabled_Parms(EEventParm)
    {
    }
};
struct UTGameObjective_eventIsLocked_Parms
{
    INT TeamIndex;
    UBOOL ReturnValue;
    UTGameObjective_eventIsLocked_Parms(EEventParm)
    {
    }
};
struct UTGameObjective_eventIsActive_Parms
{
    UBOOL ReturnValue;
    UTGameObjective_eventIsActive_Parms(EEventParm)
    {
    }
};
struct UTGameObjective_eventIsCritical_Parms
{
    UBOOL ReturnValue;
    UTGameObjective_eventIsCritical_Parms(EEventParm)
    {
    }
};
class AUTGameObjective : public AObjective
{
public:
    //## BEGIN PROPS UTGameObjective
    BITFIELD bIsBeingAttacked:1;
    BITFIELD bAlreadyRendered:1;
    BITFIELD bAllowRemoteUse:1;
    BITFIELD bFirstObjective:1;
    BITFIELD bHasSensor:1;
    BITFIELD bUnderAttack:1;
    BITFIELD bAllowOnlyShootable:1;
    BITFIELD bPostRenderTraceSucceeded:1;
    BYTE DefenderTeamIndex GCC_BITFIELD_MAGIC;
    BYTE StartTeam;
    BYTE DefensePriority;
    class AUTSquadAI* DefenseSquad;
    class AUTDefensePoint* DefensePoints;
    FStringNoInit LocationPrefix;
    FStringNoInit LocationPostfix;
    FStringNoInit ObjectiveName;
    TArrayNoInit<class ANavigationPoint*> VehicleParkingSpots;
    class AVolume* MyBaseVolume;
    FLOAT BaseRadius;
    TArrayNoInit<struct FScorerRecord> Scorers;
    INT Score;
    class AUTGameObjective* NextObjective;
    FColor ControlColor[3];
    FVector HUDLocation;
    class UMaterialInstanceConstant* HUDMaterialInstance;
    class UMaterialInstanceConstant* SensorMaterialInstance;
    class UMaterialInstanceConstant* AttackMaterialInstance;
    INT NodeNumber;
    FLOAT IconPosX;
    FLOAT IconPosY;
    FLOAT IconExtentX;
    FLOAT IconExtentY;
    class UMaterial* HudMaterial;
    FLOAT MaxSensorRange;
    FLOAT SensorScale;
    FLOAT CameraViewDistance;
    TArrayNoInit<class AUTVehicleFactory*> VehicleFactories;
    TArrayNoInit<class AUTDeployableNodeLocker*> DeployableLockers;
    TArrayNoInit<class APlayerStart*> PlayerStarts;
    TArrayNoInit<class ANavigationPoint*> ShootSpots;
    TArrayNoInit<class AUTTeamStaticMesh*> TeamStaticMeshes;
    struct FObjectiveAnnouncementInfo AttackAnnouncement;
    struct FObjectiveAnnouncementInfo DefendAnnouncement;
    FLOAT HighlightScale;
    FLOAT MaxHighlightScale;
    FLOAT HighlightSpeed;
    FLOAT LastHighlightUpdate;
    FLOAT LastPostRenderTraceTime;
    FLOAT MaxBeaconDistance;
    //## END PROPS UTGameObjective

    class AActor* eventGetBestViewTarget()
    {
        UTGameObjective_eventGetBestViewTarget_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(UTGAME_GetBestViewTarget),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventIsDisabled()
    {
        UTGameObjective_eventIsDisabled_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(UTGAME_IsDisabled),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventIsLocked(INT TeamIndex)
    {
        UTGameObjective_eventIsLocked_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.TeamIndex=TeamIndex;
        ProcessEvent(FindFunctionChecked(UTGAME_IsLocked),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventIsActive()
    {
        UTGameObjective_eventIsActive_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(UTGAME_IsActive),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventIsCritical()
    {
        UTGameObjective_eventIsCritical_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(UTGAME_IsCritical),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_ABSTRACT_CLASS(AUTGameObjective,AObjective,0|CLASS_NativeReplication,UTGame)
	INT* GetOptimizedRepList(BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel);
	virtual void AddForcedSpecs(AScout* Scout);
};

struct UTPickupFactory_eventInitPickupMeshEffects_Parms
{
    UTPickupFactory_eventInitPickupMeshEffects_Parms(EEventParm)
    {
    }
};
class AUTPickupFactory : public APickupFactory
{
public:
    //## BEGIN PROPS UTPickupFactory
    BITFIELD bRotatingPickup:1;
    BITFIELD bPulseBase:1;
    BITFIELD bFloatingPickup:1;
    BITFIELD bRandomStart:1;
    BITFIELD bIsDisabled:1;
    BITFIELD bUpdatingPickup:1;
    BITFIELD bDoVisibilityFadeIn:1;
    BITFIELD bIsRespawning:1;
    FLOAT YawRotationRate;
    class AController* TeamOwner[4];
    class UStaticMeshComponent* BaseMesh;
    class UMaterialInstanceConstant* BaseMaterialInstance;
    FLinearColor BaseBrightEmissive;
    FLinearColor BaseDimEmissive;
    FLOAT BasePulseRate;
    FLOAT BasePulseTime;
    FLOAT PulseThreshold;
    FLinearColor BaseTargetEmissive;
    FLinearColor BaseEmissive;
    FName BaseMaterialParamName;
    FLOAT BobTimer;
    FLOAT BobOffset;
    FLOAT BobSpeed;
    FLOAT BobBaseOffset;
    class USoundCue* RespawnSound;
    class UAudioComponent* PickupReadySound;
    class UDynamicLightEnvironmentComponent* LightEnvironment;
    FVector PivotTranslation;
    FName VisibilityParamName;
    class UMaterialInstanceConstant* MIC_Visibility;
    class UParticleSystemComponent* Glow;
    FName GlowEmissiveParam;
    //## END PROPS UTPickupFactory

    void eventInitPickupMeshEffects()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_InitPickupMeshEffects),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTPickupFactory,APickupFactory,0|CLASS_NativeReplication,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual void PostEditMove(UBOOL bFinished);
	virtual void Spawned();
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

class AUTItemPickupFactory : public AUTPickupFactory
{
public:
    //## BEGIN PROPS UTItemPickupFactory
    class USoundCue* PickupSound;
    FStringNoInit PickupMessage;
    FLOAT RespawnTime;
    //## END PROPS UTItemPickupFactory

    DECLARE_ABSTRACT_CLASS(AUTItemPickupFactory,AUTPickupFactory,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTItemPickupFactory)
};

class AUTAmmoPickupFactory : public AUTItemPickupFactory
{
public:
    //## BEGIN PROPS UTAmmoPickupFactory
    INT AmmoAmount;
    class UClass* TargetWeapon;
    class UClass* TransformedClass;
    //## END PROPS UTAmmoPickupFactory

    virtual void TransformAmmoType(class UClass* NewAmmoClass);
    DECLARE_FUNCTION(execTransformAmmoType)
    {
        P_GET_OBJECT(UClass,NewAmmoClass);
        P_FINISH;
        TransformAmmoType(NewAmmoClass);
    }
    DECLARE_ABSTRACT_CLASS(AUTAmmoPickupFactory,AUTItemPickupFactory,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTAmmoPickupFactory)
};

class AUTPowerupPickupFactory : public AUTPickupFactory
{
public:
    //## BEGIN PROPS UTPowerupPickupFactory
    class UPrimitiveComponent* Spinner;
    class UUTParticleSystemComponent* ParticleEffects;
    //## END PROPS UTPowerupPickupFactory

    DECLARE_ABSTRACT_CLASS(AUTPowerupPickupFactory,AUTPickupFactory,0,UTGame)
	virtual void TickSpecial(FLOAT DeltaSeconds);
};

struct FWeaponEntry
{
    class UClass* WeaponClass;
    class UPrimitiveComponent* PickupMesh;
};

struct FReplacementWeaponEntry
{
    BITFIELD bReplaced:1;
    class UClass* WeaponClass;
};

struct FPawnToucher
{
    class APawn* P;
    FLOAT NextTouchTime;
};

class AUTWeaponLocker : public AUTPickupFactory
{
public:
    //## BEGIN PROPS UTWeaponLocker
    TArrayNoInit<struct FWeaponEntry> Weapons;
    struct FReplacementWeaponEntry ReplacementWeapons[6];
    TArrayNoInit<FVector> LockerPositions;
    FStringNoInit LockerString;
    TArrayNoInit<struct FPawnToucher> Customers;
    BITFIELD bIsActive:1;
    BITFIELD bPlayerNearby:1;
    FLOAT ProximityDistance;
    class UParticleSystemComponent* AmbientEffect;
    class UParticleSystemComponent* ProximityEffect;
    class UParticleSystem* InactiveEffectTemplate;
    class UParticleSystem* ActiveEffectTemplate;
    class UParticleSystem* WeaponSpawnEffectTemplate;
    FLOAT ScaleRate;
    //## END PROPS UTWeaponLocker

    DECLARE_CLASS(AUTWeaponLocker,AUTPickupFactory,0,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
};

class AUTWeaponPickupFactory : public AUTPickupFactory
{
public:
    //## BEGIN PROPS UTWeaponPickupFactory
    class UClass* WeaponPickupClass;
    BITFIELD bWeaponStay:1;
    class UParticleSystemComponent* BaseGlow;
    FLOAT WeaponPickupScaling;
    //## END PROPS UTWeaponPickupFactory

    DECLARE_CLASS(AUTWeaponPickupFactory,AUTPickupFactory,0|CLASS_NativeReplication,UTGame)
	virtual void Serialize(FArchive& Ar);
	virtual void CheckForErrors();
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

class AUTTeamPlayerStart : public APlayerStart
{
public:
    //## BEGIN PROPS UTTeamPlayerStart
    BYTE TeamNumber GCC_BITFIELD_MAGIC;
    TArrayNoInit<class UTexture2D*> TeamSprites;
    //## END PROPS UTTeamPlayerStart

    DECLARE_CLASS(AUTTeamPlayerStart,APlayerStart,0,UTGame)
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void Spawned();
};

class AUTDefensePoint : public ANavigationPoint
{
public:
    //## BEGIN PROPS UTDefensePoint
    class AController* CurrentUser;
    class AUTDefensePoint* NextDefensePoint;
    class AUTGameObjective* DefendedObjective;
    BITFIELD bFirstScript:1;
    BITFIELD bSniping:1;
    BITFIELD bOnlyOnFoot:1;
    class UClass* WeaponPreference;
    FName DefenseGroup;
    BYTE DefensePriority;
    TArrayNoInit<class UTexture2D*> TeamSprites;
    //## END PROPS UTDefensePoint

    DECLARE_CLASS(AUTDefensePoint,ANavigationPoint,0,UTGame)
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void Spawned();
};

class AUTJumpPad : public ANavigationPoint
{
public:
    //## BEGIN PROPS UTJumpPad
    FVector JumpVelocity;
    class APathNode* JumpTarget;
    class USoundCue* JumpSound;
    FLOAT JumpTime;
    FLOAT JumpAirControl;
    class UAudioComponent* JumpAmbientSound;
    //## END PROPS UTJumpPad

    DECLARE_CLASS(AUTJumpPad,ANavigationPoint,0,UTGame)
	virtual void addReachSpecs(AScout *Scout, UBOOL bOnlyChanged=0);
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void PostEditMove(UBOOL bFinished);
	UBOOL CalculateJumpVelocity(AScout *Scout);
};

struct UTProjectile_eventCreateProjectileLight_Parms
{
    UTProjectile_eventCreateProjectileLight_Parms(EEventParm)
    {
    }
};
class AUTProjectile : public AProjectile
{
public:
    //## BEGIN PROPS UTProjectile
    BITFIELD bSuppressSounds:1;
    BITFIELD bImportantAmbientSound:1;
    BITFIELD bAdvanceExplosionEffect:1;
    BITFIELD bSuppressExplosionFX:1;
    BITFIELD bWaitForEffects:1;
    BITFIELD bShuttingDown:1;
    BITFIELD bWideCheck:1;
    BITFIELD bCheckProjectileLight:1;
    class USoundCue* AmbientSound;
    class USoundCue* ExplosionSound;
    class UParticleSystemComponent* ProjEffects;
    class UParticleSystem* ProjFlightTemplate;
    class UParticleSystem* ProjExplosionTemplate;
    class UMaterialInterface* ExplosionDecal;
    FLOAT DecalWidth;
    FLOAT DecalHeight;
    FLOAT MaxEffectDistance;
    FLOAT AccelRate;
    FLOAT TossZ;
    INT FiringOwnerStatsID;
    INT FiringWeaponStatsID;
    INT FiringWeaponMode;
    FLOAT CheckRadius;
    class UClass* ProjectileLightClass;
    class UPointLightComponent* ProjectileLight;
    class UClass* ExplosionLightClass;
    FLOAT MaxExplosionLightDistance;
    FLOAT TerminalVelocity;
    FLOAT Buoyancy;
    FLOAT CustomGravityScaling;
    class AVehicle* InstigatorBaseVehicle;
    //## END PROPS UTProjectile

    virtual FLOAT GetTerminalVelocity();
    void eventCreateProjectileLight()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_CreateProjectileLight),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTProjectile,AProjectile,0|CLASS_NativeReplication,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual void GetNetBuoyancy(FLOAT &NetBuoyancy, FLOAT &NetFluidFriction);
	virtual FLOAT GetGravityZ();
	virtual UBOOL IgnoreBlockingBy(const AActor* Other) const;
	virtual INT* GetOptimizedRepList(BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel);
};

class AUTProj_Grenade : public AUTProjectile
{
public:
    //## BEGIN PROPS UTProj_Grenade
    //## END PROPS UTProj_Grenade

    DECLARE_CLASS(AUTProj_Grenade,AUTProjectile,0,UTGame)
	virtual void physicsRotation(FLOAT deltaTime);
};

struct UTProj_ScavengerBoltBase_eventDealDamage_Parms
{
    FVector HitLocation;
    UTProj_ScavengerBoltBase_eventDealDamage_Parms(EEventParm)
    {
    }
};
struct UTProj_ScavengerBoltBase_eventSpawnBeam_Parms
{
    UTProj_ScavengerBoltBase_eventSpawnBeam_Parms(EEventParm)
    {
    }
};
struct UTProj_ScavengerBoltBase_eventKillBolt_Parms
{
    UTProj_ScavengerBoltBase_eventKillBolt_Parms(EEventParm)
    {
    }
};
class AUTProj_ScavengerBoltBase : public AUTProjectile
{
public:
    //## BEGIN PROPS UTProj_ScavengerBoltBase
    INT Bounces;
    class AActor* TargetActor;
    FLOAT DetectionRange;
    FLOAT SeekingAcceleration;
    FLOAT AttackRangeSq;
    FLOAT MaxAttackRangeSq;
    class UParticleSystem* BeamEffect;
    class UParticleSystemComponent* BeamEmitter;
    FLOAT SpawnTime;
    FLOAT SeekingLifeSpan;
    FLOAT LastDamageTime;
    FName BeamEndName;
    FLOAT DamageFrequency;
    FLOAT FastHomeAccel;
    FLOAT SlowHomeAccel;
    //## END PROPS UTProj_ScavengerBoltBase

    void eventDealDamage(FVector HitLocation)
    {
        UTProj_ScavengerBoltBase_eventDealDamage_Parms Parms(EC_EventParm);
        Parms.HitLocation=HitLocation;
        ProcessEvent(FindFunctionChecked(UTGAME_DealDamage),&Parms);
    }
    void eventSpawnBeam()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_SpawnBeam),NULL);
    }
    void eventKillBolt()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_KillBolt),NULL);
    }
    DECLARE_CLASS(AUTProj_ScavengerBoltBase,AUTProjectile,0,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual void ValidateTarget();
};

class AUTProj_ScorpionGlob_Base : public AUTProjectile
{
public:
    //## BEGIN PROPS UTProj_ScorpionGlob_Base
    INT BounceCount;
    INT MaxBounces;
    class APawn* SeekPawn;
    class UParticleSystem* BounceTemplate;
    FLOAT LastTraceTime;
    FLOAT TrackingFactor;
    //## END PROPS UTProj_ScorpionGlob_Base

    DECLARE_ABSTRACT_CLASS(AUTProj_ScorpionGlob_Base,AUTProjectile,0,UTGame)
	virtual void TickSpecial(float DeltaTime);
};

class AUTAvoidMarker : public AActor
{
public:
    //## BEGIN PROPS UTAvoidMarker
    BYTE TeamNum;
    class UCylinderComponent* CollisionCylinder;
    //## END PROPS UTAvoidMarker

    DECLARE_CLASS(AUTAvoidMarker,AActor,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTAvoidMarker)
};

struct UTCarriedObject_eventOnBaseChainChanged_Parms
{
    UTCarriedObject_eventOnBaseChainChanged_Parms(EEventParm)
    {
    }
};
struct UTCarriedObject_eventNotReachableBy_Parms
{
    class APawn* P;
    UTCarriedObject_eventNotReachableBy_Parms(EEventParm)
    {
    }
};
class AUTCarriedObject : public AActor
{
public:
    //## BEGIN PROPS UTCarriedObject
    class ANavigationPoint* LastAnchor;
    FLOAT LastValidAnchorTime;
    BITFIELD bHome:1;
    BITFIELD bLastSecondSave:1;
    BITFIELD bUseTeamColorForIcon:1;
    class AUTPlayerReplicationInfo* HolderPRI;
    class APawn* Holder;
    class AUTGameObjective* HomeBase;
    FLOAT TakenTime;
    FLOAT MaxDropTime;
    class AController* FirstTouch;
    TArrayNoInit<class AController*> Assists;
    class UMaterialInstanceConstant* HUDMaterialInstance;
    class UMaterialInstanceConstant* EnemyHUDMaterialInstance;
    FVector HUDLocation;
    FLOAT MapSize;
    FLOAT IconXStart;
    FLOAT IconYStart;
    FLOAT IconXWidth;
    FLOAT IconYWidth;
    FName GameObjBone3P;
    FVector GameObjOffset3P;
    FRotator GameObjRot3P;
    FVector GameObjOffset1P;
    FRotator GameObjRot1P;
    class USoundCue* PickupSound;
    class USoundCue* DroppedSound;
    class USoundCue* ReturnedSound;
    class APawn* OldHolder;
    class UPointLightComponent* FlagLight;
    FLOAT DefaultRadius;
    FLOAT DefaultHeight;
    class AUTTeamInfo* Team;
    TArrayNoInit<struct FObjectiveAnnouncementInfo> NeedToPickUpAnnouncements;
    class AActor* OldBase;
    class AActor* OldBaseBase;
    FLOAT HighlightScale;
    FLOAT MaxHighlightScale;
    FLOAT HighlightSpeed;
    FLOAT LastHighlightUpdate;
    //## END PROPS UTCarriedObject

    void eventOnBaseChainChanged()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_OnBaseChainChanged),NULL);
    }
    void eventNotReachableBy(class APawn* P)
    {
        UTCarriedObject_eventNotReachableBy_Parms Parms(EC_EventParm);
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(UTGAME_NotReachableBy),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTCarriedObject,AActor,0,UTGame)
	virtual void PostNetReceiveBase(AActor* NewBase);

	/*
	 * Route finding notifications (sent to target)
	 */
	virtual ANavigationPoint* SpecifyEndAnchor(APawn* RouteFinder);
	virtual void NotifyAnchorFindingResult(ANavigationPoint* EndAnchor, APawn* RouteFinder);
	virtual void TickSpecial(FLOAT DeltaSeconds);
};

class AUTCTFFlag : public AUTCarriedObject
{
public:
    //## BEGIN PROPS UTCTFFlag
    class UParticleSystem* RespawnEffect;
    BITFIELD bBringUpBright:1;
    BITFIELD bBringDownFromBright:1;
    BITFIELD bFadingOut:1;
    BITFIELD bRespawning:1;
    BITFIELD bWasClothEnabled:1;
    class USkeletalMeshComponent* SkelMesh;
    TArrayNoInit<class UMaterialInstanceConstant*> MICArray;
    FVector RunningClothVelClamp;
    FVector HoverboardingClothVelClamp;
    class UParticleSystemComponent* SuccessfulCaptureSystem;
    class UDynamicLightEnvironmentComponent* LightEnvironment;
    //## END PROPS UTCTFFlag

    DECLARE_ABSTRACT_CLASS(AUTCTFFlag,AUTCarriedObject,0,UTGame)
	virtual void PostNetReceiveLocation();
};

struct UTCustomChar_Preview_eventOnToggle_Parms
{
    class USeqAct_Toggle* Action;
    UTCustomChar_Preview_eventOnToggle_Parms(EEventParm)
    {
    }
};
struct UTCustomChar_Preview_eventOnSetCustomCharProfile_Parms
{
    class UUTSeqAct_SetCustomCharProfile* Action;
    UTCustomChar_Preview_eventOnSetCustomCharProfile_Parms(EEventParm)
    {
    }
};
struct UTCustomChar_Preview_eventOnSetCustomCharPart_Parms
{
    class UUTSeqAct_SetCustomCharPart* Action;
    UTCustomChar_Preview_eventOnSetCustomCharPart_Parms(EEventParm)
    {
    }
};
class AUTCustomChar_Preview : public AActor
{
public:
    //## BEGIN PROPS UTCustomChar_Preview
    class USkeletalMeshComponent* AnimComp;
    class USkeletalMeshComponent* HeadComp;
    class USkeletalMeshComponent* HelmetComp;
    class USkeletalMeshComponent* FacemaskComp;
    class USkeletalMeshComponent* GogglesComp;
    class USkeletalMeshComponent* TorsoComp;
    class USkeletalMeshComponent* LShoPadComp;
    class USkeletalMeshComponent* RShoPadComp;
    class USkeletalMeshComponent* ArmsComp;
    class USkeletalMeshComponent* ThighsComp;
    class USkeletalMeshComponent* BootsComp;
    struct FCharacterInfo Character;
    struct FCustomCharMergeState MergeState;
    class ASkeletalMeshActor* TestMergeActor;
    class UMaterialInstanceConstant* TestMIC;
    class UMaterialInstanceConstant* TestMIC2;
    class UMaterialInstanceConstant* TestMIC3;
    class UUTCharFamilyAssetStore* FamilyAssets;
    //## END PROPS UTCustomChar_Preview

    virtual void SetPart(BYTE InPart,const FString& InPartID);
    virtual void SetCharacter(const FString& InFaction,const FString& InCharID);
    virtual void SetCharacterData(struct FCustomCharData InCharData);
    virtual void NotifyCharacterDataChanged();
    DECLARE_FUNCTION(execSetPart)
    {
        P_GET_BYTE(InPart);
        P_GET_STR(InPartID);
        P_FINISH;
        SetPart(InPart,InPartID);
    }
    DECLARE_FUNCTION(execSetCharacter)
    {
        P_GET_STR(InFaction);
        P_GET_STR(InCharID);
        P_FINISH;
        SetCharacter(InFaction,InCharID);
    }
    DECLARE_FUNCTION(execSetCharacterData)
    {
        P_GET_STRUCT_INIT(struct FCustomCharData,InCharData);
        P_FINISH;
        SetCharacterData(InCharData);
    }
    DECLARE_FUNCTION(execNotifyCharacterDataChanged)
    {
        P_FINISH;
        NotifyCharacterDataChanged();
    }
    void eventOnToggle(class USeqAct_Toggle* Action)
    {
        UTCustomChar_Preview_eventOnToggle_Parms Parms(EC_EventParm);
        Parms.Action=Action;
        ProcessEvent(FindFunctionChecked(UTGAME_OnToggle),&Parms);
    }
    void eventOnSetCustomCharProfile(class UUTSeqAct_SetCustomCharProfile* Action)
    {
        UTCustomChar_Preview_eventOnSetCustomCharProfile_Parms Parms(EC_EventParm);
        Parms.Action=Action;
        ProcessEvent(FindFunctionChecked(UTGAME_OnSetCustomCharProfile),&Parms);
    }
    void eventOnSetCustomCharPart(class UUTSeqAct_SetCustomCharPart* Action)
    {
        UTCustomChar_Preview_eventOnSetCustomCharPart_Parms Parms(EC_EventParm);
        Parms.Action=Action;
        ProcessEvent(FindFunctionChecked(UTGAME_OnSetCustomCharPart),&Parms);
    }
    DECLARE_CLASS(AUTCustomChar_Preview,AActor,0,UTGame)
	/** Utility for getting the component for a particular part of the preview character. */
	USkeletalMeshComponent* GetPartComponent(BYTE Part);
};

struct UTDeployedActor_eventOnDeployableUsedUp_Parms
{
    class AActor* ChildDeployable;
    UTDeployedActor_eventOnDeployableUsedUp_Parms(EEventParm)
    {
    }
};
class AUTDeployedActor : public AActor
{
public:
    //## BEGIN PROPS UTDeployedActor
    class AController* InstigatorController;
    BYTE TeamNum;
    class UMeshComponent* Mesh;
    FVector HUDLocation;
    FScriptDelegate __OnDeployableUsedUp__Delegate;
    //## END PROPS UTDeployedActor

    void delegateOnDeployableUsedUp(class AActor* ChildDeployable)
    {
        UTDeployedActor_eventOnDeployableUsedUp_Parms Parms(EC_EventParm);
        Parms.ChildDeployable=ChildDeployable;
        ProcessDelegate(UTGAME_OnDeployableUsedUp,&__OnDeployableUsedUp__Delegate,&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTDeployedActor,AActor,0,UTGame)
	virtual UBOOL IgnoreBlockingBy( const AActor *Other) const;
};

struct FStaticMeshDatum
{
    class UStaticMesh* TheStaticMesh;
    class USkeletalMesh* TheSkelMesh;
    class UPhysicsAsset* ThePhysAsset;
};

class AUTGib : public AActor
{
public:
    //## BEGIN PROPS UTGib
    class USoundCue* HitSound;
    class UMeshComponent* GibMeshComp;
    class USkeletalMeshComponent* GibMesh_SkeletalMesh;
    class UStaticMeshComponent* GibMesh_StaticMesh;
    class UMaterialInstanceConstant* MIC_Gib;
    class UMaterialInstance* MIC_Decal;
    class UParticleSystemComponent* PSC_GibEffect;
    TArrayNoInit<struct FStaticMeshDatum> GibMeshesData;
    //## END PROPS UTGib

    DECLARE_ABSTRACT_CLASS(AUTGib,AActor,0,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

	void TickSpecial( FLOAT DeltaSeconds );
};

class AUTWeaponShield : public AActor
{
public:
    //## BEGIN PROPS UTWeaponShield
    //## END PROPS UTWeaponShield

    DECLARE_ABSTRACT_CLASS(AUTWeaponShield,AActor,0,UTGame)
	virtual UBOOL IgnoreBlockingBy(const AActor* Other) const;
	virtual UBOOL ShouldTrace(UPrimitiveComponent* Primitive, AActor* SourceActor, DWORD TraceFlags);
};

class UUTActorFactoryAI : public UActorFactoryAI
{
public:
    //## BEGIN PROPS UTActorFactoryAI
    BITFIELD bForceDeathmatchAI:1;
    BITFIELD bUseCompartment:1;
    //## END PROPS UTActorFactoryAI

    DECLARE_CLASS(UUTActorFactoryAI,UActorFactoryAI,0|CLASS_Config,UTGame)
	virtual AActor* CreateActor(const FVector* const Location, const FRotator* const Rotation, const class USeqAct_ActorFactory* const ActorFactoryData);
};

class UUTActorFactoryMover : public UActorFactoryDynamicSM
{
public:
    //## BEGIN PROPS UTActorFactoryMover
    BITFIELD bCreateKismetEvent:1 GCC_BITFIELD_MAGIC;
    class UClass* EventClass;
    //## END PROPS UTActorFactoryMover

    DECLARE_CLASS(UUTActorFactoryMover,UActorFactoryDynamicSM,0|CLASS_Config,UTGame)
	virtual AActor* CreateActor(const FVector* const Location, const FRotator* const Rotation, const USeqAct_ActorFactory* const ActorFactoryData);
};

class UUTActorFactoryVehicle : public UActorFactoryVehicle
{
public:
    //## BEGIN PROPS UTActorFactoryVehicle
    BITFIELD bTeamLocked:1;
    BYTE TeamNum GCC_BITFIELD_MAGIC;
    //## END PROPS UTActorFactoryVehicle

    DECLARE_CLASS(UUTActorFactoryVehicle,UActorFactoryVehicle,0|CLASS_Config,UTGame)
	virtual AActor* CreateActor( const FVector* const Location, const FRotator* const Rotation, const class USeqAct_ActorFactory* const ActorFactoryData );
};

class UUTActorFactoryPickup : public UActorFactory
{
public:
    //## BEGIN PROPS UTActorFactoryPickup
    class UClass* InventoryClass;
    //## END PROPS UTActorFactoryPickup

    DECLARE_CLASS(UUTActorFactoryPickup,UActorFactory,0|CLASS_Config,UTGame)
	virtual AActor* CreateActor(const FVector* const Location, const FRotator* const Rotation, const class USeqAct_ActorFactory* const ActorFactoryData);
};

class UUTCheatManager : public UCheatManager
{
public:
    //## BEGIN PROPS UTCheatManager
    class UClass* LMC;
    //## END PROPS UTCheatManager

    DECLARE_CLASS(UUTCheatManager,UCheatManager,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTCheatManager)
};

struct FLightValues
{
    FLOAT StartTime;
    FLOAT Radius;
    FLOAT Brightness;
    FColor LightColor;
};

struct UTExplosionLight_eventOnLightFinished_Parms
{
    class UUTExplosionLight* Light;
    UTExplosionLight_eventOnLightFinished_Parms(EEventParm)
    {
    }
};
class UUTExplosionLight : public UPointLightComponent
{
public:
    //## BEGIN PROPS UTExplosionLight
    BITFIELD bCheckFrameRate:1;
    BITFIELD bInitialized:1;
    FLOAT HighDetailFrameTime;
    FLOAT Lifetime;
    INT TimeShiftIndex;
    TArrayNoInit<struct FLightValues> TimeShift;
    FScriptDelegate __OnLightFinished__Delegate;
    //## END PROPS UTExplosionLight

    void ResetLight();
    DECLARE_FUNCTION(execResetLight)
    {
        P_FINISH;
        ResetLight();
    }
    void delegateOnLightFinished(class UUTExplosionLight* Light)
    {
        UTExplosionLight_eventOnLightFinished_Parms Parms(EC_EventParm);
        Parms.Light=Light;
        ProcessDelegate(UTGAME_OnLightFinished,&__OnLightFinished__Delegate,&Parms);
    }
    DECLARE_CLASS(UUTExplosionLight,UPointLightComponent,0,UTGame)
	virtual void Attach();
	virtual void Tick(FLOAT DeltaTime);
};

struct UTSkeletalMeshComponent_eventPreloadTextures_Parms
{
    UBOOL bForcePreload;
    FLOAT ClearTime;
    UTSkeletalMeshComponent_eventPreloadTextures_Parms(EEventParm)
    {
    }
};
class UUTSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
    //## BEGIN PROPS UTSkeletalMeshComponent
    FLOAT FOV;
    BITFIELD bForceLoadTextures:1;
    FLOAT ClearStreamingTime;
    //## END PROPS UTSkeletalMeshComponent

    void SetFOV(FLOAT NewFOV);
    DECLARE_FUNCTION(execSetFOV)
    {
        P_GET_FLOAT(NewFOV);
        P_FINISH;
        SetFOV(NewFOV);
    }
    void eventPreloadTextures(UBOOL bForcePreload,FLOAT ClearTime)
    {
        UTSkeletalMeshComponent_eventPreloadTextures_Parms Parms(EC_EventParm);
        Parms.bForcePreload=bForcePreload ? FIRST_BITFIELD : 0;
        Parms.ClearTime=ClearTime;
        ProcessEvent(FindFunctionChecked(UTGAME_PreloadTextures),&Parms);
    }
    DECLARE_CLASS(UUTSkeletalMeshComponent,USkeletalMeshComponent,0,UTGame)
	/** Creates a FUTSkeletalMeshSceneProxy (defined in UTWeapon.cpp) */
	virtual FPrimitiveSceneProxy* CreateSceneProxy();
	virtual void Tick(FLOAT DeltaTime);
};

class UUTParticleSystemComponent : public UParticleSystemComponent
{
public:
    //## BEGIN PROPS UTParticleSystemComponent
    //## END PROPS UTParticleSystemComponent

    DECLARE_CLASS(UUTParticleSystemComponent,UParticleSystemComponent,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTParticleSystemComponent)
};

class ULinkRenderingComponent : public UPathRenderingComponent
{
public:
    //## BEGIN PROPS LinkRenderingComponent
    //## END PROPS LinkRenderingComponent

    DECLARE_CLASS(ULinkRenderingComponent,UPathRenderingComponent,0,UTGame)
	virtual void UpdateBounds();
	virtual void Render(const FSceneView* View,class FPrimitiveDrawInterface* PDI);
};

struct FMusicSegment
{
    FLOAT TempoOverride;
    BYTE CrossfadeRule;
    INT CrossfadeToMeNumMeasuresDuration;
    class USoundCue* TheCue;
};

struct FStingersForAMap
{
    class USoundCue* Died;
    class USoundCue* DoubleKill;
    class USoundCue* EnemyGrabFlag;
    class USoundCue* FirstKillingSpree;
    class USoundCue* FlagReturned;
    class USoundCue* GrabFlag;
    class USoundCue* Kill;
    class USoundCue* LongKillingSpree;
    class USoundCue* MajorKill;
    class USoundCue* MonsterKill;
    class USoundCue* MultiKill;
    class USoundCue* ReturnFlag;
    class USoundCue* ScoreLosing;
    class USoundCue* ScoreTie;
    class USoundCue* ScoreWinning;
};

struct FMusicForAMap
{
    FLOAT Tempo;
    struct FMusicSegment Action;
    struct FMusicSegment Ambient;
    struct FMusicSegment Intro;
    struct FMusicSegment Suspense;
    struct FMusicSegment Tension;
    struct FMusicSegment Victory;
};

class UUTTypes : public UObject
{
public:
    //## BEGIN PROPS UTTypes
    //## END PROPS UTTypes

    DECLARE_CLASS(UUTTypes,UObject,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTTypes)
};

class UUTMapMusicInfo : public UObject
{
public:
    //## BEGIN PROPS UTMapMusicInfo
    struct FMusicForAMap MapMusic;
    struct FStingersForAMap MapStingers;
    //## END PROPS UTMapMusicInfo

    DECLARE_CLASS(UUTMapMusicInfo,UObject,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTMapMusicInfo)
};

class UUTMapInfo : public UMapInfo
{
public:
    //## BEGIN PROPS UTMapInfo
    INT RecommendedPlayersMin;
    INT RecommendedPlayersMax;
    class UUTMapMusicInfo* MapMusicInfo;
    BITFIELD bBuildTranslocatorPaths:1;
    class UTexture* MapTexture;
    FLOAT MapTextureYaw;
    FVector MapCenter;
    FLOAT MapExtent;
    INT MapYaw;
    FLOAT RotatingMiniMapRange;
    FLOAT DefaultMapSize;
    TArrayNoInit<class AUTGameObjective*> Objectives;
    BITFIELD bMapUpToDate:1;
    class AActor* CurrentActor;
    class AActor* WatchedActor;
    class UMaterial* HUDIcons;
    class UTexture2D* HUDIconsT;
    FVector MapRotX;
    FVector MapRotY;
    INT CurrentMapRotYaw;
    class UMaterialInstanceConstant* MapMaterialInstance;
    class UMaterial* MapMaterialReference;
    FLOAT UseableRadius;
    FVector ActualMapCenter;
    FLOAT RadarWidth;
    FLOAT RadarRange;
    FVector CenterPos;
    FLOAT MapScale;
    FLOAT ColorPercent;
    class UMaterialInstanceConstant* GreenIconMaterialInstance;
    FVector CurrentObjectiveHUDLocation;
    //## END PROPS UTMapInfo

    DECLARE_CLASS(UUTMapInfo,UMapInfo,0,UTGame)
	virtual void CheckForErrors();
};

class UUTTrajectoryReachSpec : public UAdvancedReachSpec
{
public:
    //## BEGIN PROPS UTTrajectoryReachSpec
    //## END PROPS UTTrajectoryReachSpec

    DECLARE_ABSTRACT_CLASS(UUTTrajectoryReachSpec,UAdvancedReachSpec,0,UTGame)
	virtual void AddToDebugRenderProxy(class FDebugRenderSceneProxy* DRSP);
	virtual FVector GetInitialVelocity() { return FVector(0.f,0.f,0.f); };
};

class UUTJumpPadReachSpec : public UUTTrajectoryReachSpec
{
public:
    //## BEGIN PROPS UTJumpPadReachSpec
    //## END PROPS UTJumpPadReachSpec

    virtual INT CostFor(class APawn* P);
    DECLARE_CLASS(UUTJumpPadReachSpec,UUTTrajectoryReachSpec,0,UTGame)
	virtual FVector GetInitialVelocity();
};

class UUTTranslocatorReachSpec : public UUTTrajectoryReachSpec
{
public:
    //## BEGIN PROPS UTTranslocatorReachSpec
    FVector CachedVelocity;
    FLOAT RequiredJumpZ;
    FLOAT OriginalGravityZ;
    //## END PROPS UTTranslocatorReachSpec

    virtual INT CostFor(class APawn* P);
    DECLARE_CLASS(UUTTranslocatorReachSpec,UUTTrajectoryReachSpec,0,UTGame)
	virtual FPlane PathColor()
	{
		// light purple path = translocator
		return FPlane(1.f,0.5f,1.f, 0.f);
	}

	UBOOL PrepareForMove(AController *C);
	virtual FVector GetInitialVelocity();
};

class UUTSeqAct_ServerTravel : public USequenceAction
{
public:
    //## BEGIN PROPS UTSeqAct_ServerTravel
    FStringNoInit TravelURL;
    //## END PROPS UTSeqAct_ServerTravel

    DECLARE_CLASS(UUTSeqAct_ServerTravel,USequenceAction,0,UTGame)
	virtual void OnReceivedImpulse( class USequenceOp* ActivatorOp, INT InputLinkIndex );
};

class UUTSeqAct_TutorialMsg : public USequenceAction
{
public:
    //## BEGIN PROPS UTSeqAct_TutorialMsg
    FStringNoInit TutorialMessage;
    class USurface* TutorialImage;
    class UUTUIScene_MessageBox* MsgBox;
    BITFIELD bFinished:1;
    //## END PROPS UTSeqAct_TutorialMsg

    DECLARE_CLASS(UUTSeqAct_TutorialMsg,USequenceAction,0,UTGame)
	virtual UBOOL UpdateOp(FLOAT deltaTime);
};

#define UCONST_STATS_COLUMN_DM_DEATHS 2
#define UCONST_STATS_COLUMN_DM_KILLS 1
#define UCONST_STATS_COLUMN_SKILL_GAMESPLAYED 62
#define UCONST_STATS_COLUMN_TRUESKILL 61
#define UCONST_STATS_VIEW_ONS_TRUESKILL 0xFFFF0002
#define UCONST_STATS_VIEW_CTF_TRUESKILL 0xFFFF0001
#define UCONST_STATS_VIEW_DM_TRUESKILL 0xFFFF0000
#define UCONST_STATS_VIEW_DM_RANKED_ALLTIME 2
#define UCONST_STATS_VIEW_DM_PLAYER_ALLTIME 1
#define UCONST_QUERY_DM 0
#define UCONST_PROPERTY_CUSTOMGAMEMODE 0x40000002
#define UCONST_PROPERTY_CUSTOMMAPNAME 0x40000001
#define UCONST_PROPERTY_LEADERBOARDRATING 0x20000004
#define UCONST_PROPERTY_DEATHS 0x10000006
#define UCONST_PROPERTY_KILLS 0x10000005
#define UCONST_CONTEXT_VSBOTS_4_TO_1 5
#define UCONST_CONTEXT_VSBOTS_3_TO_1 4
#define UCONST_CONTEXT_VSBOTS_2_TO_1 3
#define UCONST_CONTEXT_VSBOTS_1_TO_1 2
#define UCONST_CONTEXT_VSBOTS_1_TO_2 1
#define UCONST_CONTEXT_VSBOTS_NONE 0
#define UCONST_CONTEXT_LOCKEDSERVER_YES 1
#define UCONST_CONTEXT_LOCKEDSERVER_NO 0
#define UCONST_CONTEXT_PURESERVER_YES 1
#define UCONST_CONTEXT_PURESERVER_NO 0
#define UCONST_CONTEXT_TIMELIMIT_30 4
#define UCONST_CONTEXT_TIMELIMIT_20 3
#define UCONST_CONTEXT_TIMELIMIT_15 2
#define UCONST_CONTEXT_TIMELIMIT_10 1
#define UCONST_CONTEXT_TIMELIMIT_5 0
#define UCONST_CONTEXT_NUMBOTS_8 8
#define UCONST_CONTEXT_NUMBOTS_7 7
#define UCONST_CONTEXT_NUMBOTS_6 6
#define UCONST_CONTEXT_NUMBOTS_5 5
#define UCONST_CONTEXT_NUMBOTS_4 4
#define UCONST_CONTEXT_NUMBOTS_3 3
#define UCONST_CONTEXT_NUMBOTS_2 2
#define UCONST_CONTEXT_NUMBOTS_1 1
#define UCONST_CONTEXT_NUMBOTS_0 0
#define UCONST_CONTEXT_GOALSCORE_30 4
#define UCONST_CONTEXT_GOALSCORE_20 3
#define UCONST_CONTEXT_GOALSCORE_15 2
#define UCONST_CONTEXT_GOALSCORE_10 1
#define UCONST_CONTEXT_GOALSCORE_5 0
#define UCONST_CONTEXT_BOTSKILL_GODLIKE 8
#define UCONST_CONTEXT_BOTSKILL_INHUMAN 7
#define UCONST_CONTEXT_BOTSKILL_MASTERFUL 6
#define UCONST_CONTEXT_BOTSKILL_ADEPT 5
#define UCONST_CONTEXT_BOTSKILL_SKILLED 4
#define UCONST_CONTEXT_BOTSKILL_EXPERIENCED 3
#define UCONST_CONTEXT_BOTSKILL_AVERAGE 2
#define UCONST_CONTEXT_BOTSKILL_NOVICE 1
#define UCONST_CONTEXT_BOTSKILL_AUTOADJUSTSKILL 0
#define UCONST_CONTEXT_MAPNAME_CUSTOM 0
#define UCONST_CONTEXT_VSBOTS 8
#define UCONST_CONTEXT_LOCKEDSERVER 7
#define UCONST_CONTEXT_PURESERVER 6
#define UCONST_CONTEXT_TIMELIMIT 5
#define UCONST_CONTEXT_NUMBOTS 4
#define UCONST_CONTEXT_GOALSCORE 3
#define UCONST_CONTEXT_MAPNAME 1
#define UCONST_CONTEXT_BOTSKILL 0
#define UCONST_CONTEXT_GAME_MODE_ONS 2
#define UCONST_CONTEXT_GAME_MODE_CTF 1
#define UCONST_CONTEXT_GAME_MODE_DM 0
#define UCONST_CONTEXT_GAME_MODE 0x0000800B
#define UCONST_CONTEXT_PRESENCE_MENUPRESENCE 0
#define UCONST_GS_EMAIL_MAXLENGTH 255
#define UCONST_GS_PASSWORD_MAXLENGTH 15
#define UCONST_GS_USERNAME_MAXLENGTH 15

class UUTLeaderboardSettings : public USettings
{
public:
    //## BEGIN PROPS UTLeaderboardSettings
    //## END PROPS UTLeaderboardSettings

    DECLARE_CLASS(UUTLeaderboardSettings,USettings,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTLeaderboardSettings)
};

struct UTPlayerInput_eventOnInputChar_Parms
{
    INT ControllerId;
    FString Unicode;
    UBOOL ReturnValue;
    UTPlayerInput_eventOnInputChar_Parms(EEventParm)
    {
    }
};
struct UTPlayerInput_eventOnInputAxis_Parms
{
    INT ControllerId;
    FName Key;
    FLOAT Delta;
    FLOAT DeltaTime;
    UBOOL ReturnValue;
    UTPlayerInput_eventOnInputAxis_Parms(EEventParm)
    {
    }
};
struct UTPlayerInput_eventOnInputKey_Parms
{
    INT ControllerId;
    FName Key;
    BYTE Event;
    FLOAT AmountDepressed;
    UBOOL bGamepad;
    UBOOL ReturnValue;
    UTPlayerInput_eventOnInputKey_Parms(EEventParm)
    {
    }
};
class UUTPlayerInput : public UGamePlayerInput
{
public:
    //## BEGIN PROPS UTPlayerInput
    FLOAT LastDuckTime;
    BITFIELD bHoldDuck:1;
    BYTE ForcedDoubleClick GCC_BITFIELD_MAGIC;
    FScriptDelegate __OnInputKey__Delegate;
    FScriptDelegate __OnInputAxis__Delegate;
    FScriptDelegate __OnInputChar__Delegate;
    //## END PROPS UTPlayerInput

    UBOOL delegateOnInputChar(INT ControllerId,const FString& Unicode)
    {
        UTPlayerInput_eventOnInputChar_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.ControllerId=ControllerId;
        Parms.Unicode=Unicode;
        ProcessDelegate(UTGAME_OnInputChar,&__OnInputChar__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    UBOOL delegateOnInputAxis(INT ControllerId,FName Key,FLOAT Delta,FLOAT DeltaTime)
    {
        UTPlayerInput_eventOnInputAxis_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.ControllerId=ControllerId;
        Parms.Key=Key;
        Parms.Delta=Delta;
        Parms.DeltaTime=DeltaTime;
        ProcessDelegate(UTGAME_OnInputAxis,&__OnInputAxis__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    UBOOL delegateOnInputKey(INT ControllerId,FName Key,BYTE Event,FLOAT AmountDepressed,UBOOL bGamepad)
    {
        UTPlayerInput_eventOnInputKey_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.ControllerId=ControllerId;
        Parms.Key=Key;
        Parms.Event=Event;
        Parms.AmountDepressed=AmountDepressed;
        Parms.bGamepad=bGamepad ? FIRST_BITFIELD : 0;
        ProcessDelegate(UTGAME_OnInputKey,&__OnInputKey__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UUTPlayerInput,UGamePlayerInput,0|CLASS_Transient|CLASS_Config,UTGame)
    DECLARE_WITHIN(AUTPlayerController)
    NO_DEFAULT_CONSTRUCTOR(UUTPlayerInput)
};

struct UTConsolePlayerInput_eventPostBeginPlay_Parms
{
    UTConsolePlayerInput_eventPostBeginPlay_Parms(EEventParm)
    {
    }
};
class UUTConsolePlayerInput : public UUTPlayerInput
{
public:
    //## BEGIN PROPS UTConsolePlayerInput
    FLOAT SensitivityMultiplier;
    BITFIELD bAutoCenterPitch:1;
    BITFIELD bAutoCenterVehiclePitch:1;
    BITFIELD bViewAccelerationEnabled:1;
    BITFIELD bDebugViewAcceleration:1;
    BITFIELD bTargetFrictionEnabled:1;
    BITFIELD bDebugTargetFriction:1;
    BITFIELD bAppliedTargetFriction:1;
    BITFIELD bIsLookingUp:1;
    BITFIELD bIsLookingDown:1;
    FLOAT LastTurnTime;
    FLOAT AutoCenterDelay;
    FLOAT AutoVehicleCenterSpeed;
    FLOAT SlowTurnScaling;
    FLOAT ViewAccel_YawThreshold;
    FLOAT ViewAccel_DiagonalThreshold;
    FLOAT ViewAccel_BaseMultiplier;
    FLOAT ViewAccel_CurrMutliplier;
    FLOAT ViewAccel_TimeToHoldBeforeFastAcceleration;
    FLOAT ViewAccel_TimeHeld;
    FLOAT ViewAccel_Twitchy;
    FLOAT Dodge_Threshold;
    class APawn* LastFrictionTarget;
    FLOAT LastFrictionTargetTime;
    FLOAT LastDistToTarget;
    FLOAT LastDistMultiplier;
    FLOAT LastDistFromAimZ;
    FLOAT LastDistFromAimY;
    FLOAT LastFrictionMultiplier;
    FLOAT LastAdhesionAmtY;
    FLOAT LastAdhesionAmtZ;
    FLOAT LastTargetRadius;
    FLOAT LastTargetHeight;
    FLOAT LastDistFromAimYa;
    FLOAT LastDistFromAimZa;
    FLOAT LastAdjustY;
    FLOAT LastAdjustZ;
    FVector LastCamLoc;
    FRotator LastDeltaRot;
    FLOAT LeftThumbStickDeadZoneThreshold;
    FLOAT RightThumbStickDeadZoneThreshold;
    FLOAT MagicScaleForSensitivityMiddle;
    FLOAT MagicScaleForSensitivityEdge;
    FLOAT ViewAccel_RampSpeed;
    FLOAT ViewAccel_MaxTurnSpeed;
    FLOAT ViewAccel_PitchThreshold;
    FLOAT ViewAccel_LookingUpOrDownBoundary;
    FLOAT ViewAccel_BackToCenterBoundary;
    FLOAT ViewAccel_BackToCenterSpeed;
    FLOAT AutoPitchCenterSpeed;
    FLOAT AutoPitchStopAdjustingValue;
    //## END PROPS UTConsolePlayerInput

    void eventPostBeginPlay()
    {
        if(IsProbing(NAME_PostBeginPlay)) {
        ProcessEvent(FindFunctionChecked(UTGAME_PostBeginPlay),NULL);
        }
    }
    DECLARE_CLASS(UUTConsolePlayerInput,UUTPlayerInput,0|CLASS_Transient|CLASS_Config,UTGame)
    DECLARE_WITHIN(AUTConsolePlayerController)
    NO_DEFAULT_CONSTRUCTOR(UUTConsolePlayerInput)
};

class UUTDataStore_OnlineStats : public UUIDataStore_OnlineStats
{
public:
    //## BEGIN PROPS UTDataStore_OnlineStats
    class UClass* LeaderboardSettingsClass;
    class USettings* LeaderboardSettings;
    class UUIDataProvider_Settings* SettingsProvider;
    //## END PROPS UTDataStore_OnlineStats

    DECLARE_CLASS(UUTDataStore_OnlineStats,UUIDataStore_OnlineStats,0|CLASS_Transient,UTGame)
private:
// UIDataStore interface

	/**
	 * Loads and creates an instance of the registered filter object
	 */
	virtual void InitializeDataStore(void);

	/**
	 * Returns the stats read results as a collection and appends the filter provider
	 *
	 * @param OutFields	out value that receives the list of exposed properties
	 */
	virtual void GetSupportedDataFields(TArray<FUIDataProviderField>& OutFields);

	/**
	 * Returns the list element provider for the specified proprety name
	 *
	 * @param PropertyName the name of the property to look up
	 *
	 * @return pointer to the interface or null if the property name is invalid
	 */
	virtual TScriptInterface<IUIListElementProvider> ResolveListElementProvider(const FString& PropertyName)
	{
		// Make a copy because we potentially modify the string
		FString CompareName(PropertyName);
		FString ProviderName;
		// If there is an intervening provider name, snip it off
		if (ParseNextDataTag(CompareName,ProviderName) == FALSE)
		{
			CompareName = ProviderName;
		}
		// Check for the stats results
		if (FName(*CompareName) == StatsReadName)
		{
			return this;
		}
		// See if this is for one of our filters
		return SettingsProvider->ResolveListElementProvider(CompareName);
	}
};

class UUTCharFamilyAssetStore : public UObject
{
public:
    //## BEGIN PROPS UTCharFamilyAssetStore
    FStringNoInit FamilyID;
    TArrayNoInit<class UObject*> FamilyAssets;
    INT NumPendingPackages;
    FLOAT StartLoadTime;
    //## END PROPS UTCharFamilyAssetStore

    DECLARE_CLASS(UUTCharFamilyAssetStore,UObject,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTCharFamilyAssetStore)
};

#endif

AUTOGENERATE_FUNCTION(UDemoCamMod_ScreenShake,-1,execUpdateScreenShake);
AUTOGENERATE_FUNCTION(AUTAmmoPickupFactory,-1,execTransformAmmoType);
AUTOGENERATE_FUNCTION(AUTConsolePlayerController,-1,execGetTargetAdhesionFrictionTarget);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execCharDataFromString);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execCharDataToString);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execMakeRandomCharData);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execMakeCharPortraitTexture);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execResetCustomCharMerge);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execFinishCustomCharMerge);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execStartCustomCharMerge);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execLoadFamilyAssets);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execFindFamilyInfo);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execFindCharacter);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execFindPartSkelMesh);
AUTOGENERATE_FUNCTION(UUTCustomChar_Data,-1,execFindPartObjName);
AUTOGENERATE_FUNCTION(AUTCustomChar_Preview,-1,execNotifyCharacterDataChanged);
AUTOGENERATE_FUNCTION(AUTCustomChar_Preview,-1,execSetCharacterData);
AUTOGENERATE_FUNCTION(AUTCustomChar_Preview,-1,execSetCharacter);
AUTOGENERATE_FUNCTION(AUTCustomChar_Preview,-1,execSetPart);
AUTOGENERATE_FUNCTION(AUTEmitCameraEffect,-1,execUpdateLocation);
AUTOGENERATE_FUNCTION(UUTExplosionLight,-1,execResetLight);
AUTOGENERATE_FUNCTION(AUTGame,-1,execSortPlayerScores);
AUTOGENERATE_FUNCTION(AUTGameReplicationInfo,-1,execSetNoStreamWorldTextureForFrames);
AUTOGENERATE_FUNCTION(AUTGameStats,-1,execGetMapFilename);
AUTOGENERATE_FUNCTION(UUTJumpPadReachSpec,-1,execCostFor);
AUTOGENERATE_FUNCTION(AUTMissionGRI,-1,execFillMissionList);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execSuggestJumpVelocity);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execIsInvisible);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execRestorePreRagdollCollisionComponent);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execGetBoundingCylinder);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execCharPolyCount);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execClipChar);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execSetGamma);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execGetUIPlayerIndex);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execUpdateShakeRotComponent);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execCheckShake);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execGetPlayerCustomCharData);
AUTOGENERATE_FUNCTION(AUTProjectile,-1,execGetTerminalVelocity);
AUTOGENERATE_FUNCTION(AUTRemoteRedeemer,-1,execIsPlayerPawn);
AUTOGENERATE_FUNCTION(AUTScout,-1,execSuggestJumpVelocity);
AUTOGENERATE_FUNCTION(UUTSkeletalMeshComponent,-1,execSetFOV);
AUTOGENERATE_FUNCTION(UUTTranslocatorReachSpec,-1,execCostFor);
AUTOGENERATE_FUNCTION(AUTVoteCollector,-1,execGetMapIndex);
AUTOGENERATE_FUNCTION(AUTVoteReplicationInfo,-1,execGetMapIndex);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef UTGAME_NATIVE_DEFS
#define UTGAME_NATIVE_DEFS

DECLARE_NATIVE_TYPE(UTGame,UDemoCamMod_ScreenShake);
DECLARE_NATIVE_TYPE(UTGame,AFlockAttractor);
DECLARE_NATIVE_TYPE(UTGame,AFlockTest_Spawner);
DECLARE_NATIVE_TYPE(UTGame,AFlockTestActor);
DECLARE_NATIVE_TYPE(UTGame,AForcedDirVolume);
DECLARE_NATIVE_TYPE(UTGame,ULinkRenderingComponent);
DECLARE_NATIVE_TYPE(UTGame,UUTActorFactoryAI);
DECLARE_NATIVE_TYPE(UTGame,UUTActorFactoryMover);
DECLARE_NATIVE_TYPE(UTGame,UUTActorFactoryPickup);
DECLARE_NATIVE_TYPE(UTGame,UUTActorFactoryVehicle);
DECLARE_NATIVE_TYPE(UTGame,AUTAmmoPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTAvoidMarker);
DECLARE_NATIVE_TYPE(UTGame,AUTCarriedObject);
DECLARE_NATIVE_TYPE(UTGame,UUTCharFamilyAssetStore);
DECLARE_NATIVE_TYPE(UTGame,UUTCheatManager);
DECLARE_NATIVE_TYPE(UTGame,AUTConsolePlayerController);
DECLARE_NATIVE_TYPE(UTGame,UUTConsolePlayerInput);
DECLARE_NATIVE_TYPE(UTGame,AUTCTFFlag);
DECLARE_NATIVE_TYPE(UTGame,UUTCustomChar_Data);
DECLARE_NATIVE_TYPE(UTGame,AUTCustomChar_Preview);
DECLARE_NATIVE_TYPE(UTGame,UUTDataStore_OnlineStats);
DECLARE_NATIVE_TYPE(UTGame,AUTDefensePoint);
DECLARE_NATIVE_TYPE(UTGame,AUTDeployable);
DECLARE_NATIVE_TYPE(UTGame,AUTDeployedActor);
DECLARE_NATIVE_TYPE(UTGame,AUTDroppedPickup);
DECLARE_NATIVE_TYPE(UTGame,AUTEmitCameraEffect);
DECLARE_NATIVE_TYPE(UTGame,AUTEmitter);
DECLARE_NATIVE_TYPE(UTGame,AUTEmitterPool);
DECLARE_NATIVE_TYPE(UTGame,AUTEntryPlayerController);
DECLARE_NATIVE_TYPE(UTGame,UUTExplosionLight);
DECLARE_NATIVE_TYPE(UTGame,UUTFamilyInfo);
DECLARE_NATIVE_TYPE(UTGame,AUTGame);
DECLARE_NATIVE_TYPE(UTGame,AUTGameObjective);
DECLARE_NATIVE_TYPE(UTGame,AUTGameReplicationInfo);
DECLARE_NATIVE_TYPE(UTGame,AUTGameStats);
DECLARE_NATIVE_TYPE(UTGame,AUTGib);
DECLARE_NATIVE_TYPE(UTGame,AUTInventory);
DECLARE_NATIVE_TYPE(UTGame,AUTInventoryManager);
DECLARE_NATIVE_TYPE(UTGame,AUTItemPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTJumpPad);
DECLARE_NATIVE_TYPE(UTGame,UUTJumpPadReachSpec);
DECLARE_NATIVE_TYPE(UTGame,AUTKActor);
DECLARE_NATIVE_TYPE(UTGame,UUTLeaderboardSettings);
DECLARE_NATIVE_TYPE(UTGame,AUTLinkedReplicationInfo);
DECLARE_NATIVE_TYPE(UTGame,UUTMapInfo);
DECLARE_NATIVE_TYPE(UTGame,UUTMapMusicInfo);
DECLARE_NATIVE_TYPE(UTGame,AUTMissionGRI);
DECLARE_NATIVE_TYPE(UTGame,AUTMissionPlayerController);
DECLARE_NATIVE_TYPE(UTGame,AUTMutator);
DECLARE_NATIVE_TYPE(UTGame,UUTParticleSystemComponent);
DECLARE_NATIVE_TYPE(UTGame,AUTPawn);
DECLARE_NATIVE_TYPE(UTGame,UUTPhysicalMaterialProperty);
DECLARE_NATIVE_TYPE(UTGame,AUTPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTPlayerController);
DECLARE_NATIVE_TYPE(UTGame,UUTPlayerInput);
DECLARE_NATIVE_TYPE(UTGame,AUTPlayerReplicationInfo);
DECLARE_NATIVE_TYPE(UTGame,AUTPowerupPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTProj_Grenade);
DECLARE_NATIVE_TYPE(UTGame,AUTProj_ScavengerBoltBase);
DECLARE_NATIVE_TYPE(UTGame,AUTProj_ScorpionGlob_Base);
DECLARE_NATIVE_TYPE(UTGame,AUTProjectile);
DECLARE_NATIVE_TYPE(UTGame,AUTRemoteRedeemer);
DECLARE_NATIVE_TYPE(UTGame,AUTReplicatedEmitter);
DECLARE_NATIVE_TYPE(UTGame,AUTScout);
DECLARE_NATIVE_TYPE(UTGame,UUTSeqAct_ServerTravel);
DECLARE_NATIVE_TYPE(UTGame,UUTSeqAct_TutorialMsg);
DECLARE_NATIVE_TYPE(UTGame,UUTSkeletalMeshComponent);
DECLARE_NATIVE_TYPE(UTGame,AUTSlowVolume);
DECLARE_NATIVE_TYPE(UTGame,AUTTeamInfo);
DECLARE_NATIVE_TYPE(UTGame,AUTTeamPlayerStart);
DECLARE_NATIVE_TYPE(UTGame,AUTTimedPowerup);
DECLARE_NATIVE_TYPE(UTGame,UUTTrajectoryReachSpec);
DECLARE_NATIVE_TYPE(UTGame,UUTTranslocatorReachSpec);
DECLARE_NATIVE_TYPE(UTGame,UUTTypes);
DECLARE_NATIVE_TYPE(UTGame,AUTVoteCollector);
DECLARE_NATIVE_TYPE(UTGame,AUTVoteReplicationInfo);
DECLARE_NATIVE_TYPE(UTGame,AUTWeap_FlakCannon);
DECLARE_NATIVE_TYPE(UTGame,AUTWeap_ImpactHammer);
DECLARE_NATIVE_TYPE(UTGame,AUTWeapon);
DECLARE_NATIVE_TYPE(UTGame,AUTWeaponLocker);
DECLARE_NATIVE_TYPE(UTGame,AUTWeaponPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTWeaponShield);

#define AUTO_INITIALIZE_REGISTRANTS_UTGAME \
	UDemoCamMod_ScreenShake::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUDemoCamMod_ScreenShakeNative; \
	AFlockAttractor::StaticClass(); \
	AFlockTest_Spawner::StaticClass(); \
	AFlockTestActor::StaticClass(); \
	AForcedDirVolume::StaticClass(); \
	ULinkRenderingComponent::StaticClass(); \
	UUTActorFactoryAI::StaticClass(); \
	UUTActorFactoryMover::StaticClass(); \
	UUTActorFactoryPickup::StaticClass(); \
	UUTActorFactoryVehicle::StaticClass(); \
	AUTAmmoPickupFactory::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTAmmoPickupFactoryNative; \
	AUTAvoidMarker::StaticClass(); \
	AUTCarriedObject::StaticClass(); \
	UUTCharFamilyAssetStore::StaticClass(); \
	UUTCheatManager::StaticClass(); \
	AUTConsolePlayerController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTConsolePlayerControllerNative; \
	UUTConsolePlayerInput::StaticClass(); \
	AUTCTFFlag::StaticClass(); \
	UUTCustomChar_Data::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTCustomChar_DataNative; \
	AUTCustomChar_Preview::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTCustomChar_PreviewNative; \
	UUTDataStore_OnlineStats::StaticClass(); \
	AUTDefensePoint::StaticClass(); \
	AUTDeployable::StaticClass(); \
	AUTDeployedActor::StaticClass(); \
	AUTDroppedPickup::StaticClass(); \
	AUTEmitCameraEffect::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTEmitCameraEffectNative; \
	AUTEmitter::StaticClass(); \
	AUTEmitterPool::StaticClass(); \
	AUTEntryPlayerController::StaticClass(); \
	UUTExplosionLight::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTExplosionLightNative; \
	UUTFamilyInfo::StaticClass(); \
	AUTGame::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTGameNative; \
	AUTGameObjective::StaticClass(); \
	AUTGameReplicationInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTGameReplicationInfoNative; \
	AUTGameStats::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTGameStatsNative; \
	AUTGib::StaticClass(); \
	AUTInventory::StaticClass(); \
	AUTInventoryManager::StaticClass(); \
	AUTItemPickupFactory::StaticClass(); \
	AUTJumpPad::StaticClass(); \
	UUTJumpPadReachSpec::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTJumpPadReachSpecNative; \
	AUTKActor::StaticClass(); \
	UUTLeaderboardSettings::StaticClass(); \
	UUTLevelCheckCommandlet::StaticClass(); \
	AUTLinkedReplicationInfo::StaticClass(); \
	UUTMapInfo::StaticClass(); \
	UUTMapMusicInfo::StaticClass(); \
	AUTMissionGRI::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTMissionGRINative; \
	AUTMissionPlayerController::StaticClass(); \
	AUTMutator::StaticClass(); \
	UUTParticleSystemComponent::StaticClass(); \
	AUTPawn::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTPawnNative; \
	UUTPhysicalMaterialProperty::StaticClass(); \
	AUTPickupFactory::StaticClass(); \
	AUTPlayerController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTPlayerControllerNative; \
	UUTPlayerInput::StaticClass(); \
	AUTPlayerReplicationInfo::StaticClass(); \
	AUTPowerupPickupFactory::StaticClass(); \
	AUTProj_Grenade::StaticClass(); \
	AUTProj_ScavengerBoltBase::StaticClass(); \
	AUTProj_ScorpionGlob_Base::StaticClass(); \
	AUTProjectile::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTProjectileNative; \
	AUTRemoteRedeemer::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTRemoteRedeemerNative; \
	UUTReplaceActorCommandlet::StaticClass(); \
	AUTReplicatedEmitter::StaticClass(); \
	AUTScout::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTScoutNative; \
	UUTSeqAct_ServerTravel::StaticClass(); \
	UUTSeqAct_TutorialMsg::StaticClass(); \
	UUTSkeletalMeshComponent::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTSkeletalMeshComponentNative; \
	AUTSlowVolume::StaticClass(); \
	AUTTeamInfo::StaticClass(); \
	AUTTeamPlayerStart::StaticClass(); \
	AUTTimedPowerup::StaticClass(); \
	UUTTrajectoryReachSpec::StaticClass(); \
	UUTTranslocatorReachSpec::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTTranslocatorReachSpecNative; \
	UUTTypes::StaticClass(); \
	AUTVoteCollector::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVoteCollectorNative; \
	AUTVoteReplicationInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVoteReplicationInfoNative; \
	AUTWeap_FlakCannon::StaticClass(); \
	AUTWeap_ImpactHammer::StaticClass(); \
	AUTWeapon::StaticClass(); \
	AUTWeaponLocker::StaticClass(); \
	AUTWeaponPickupFactory::StaticClass(); \
	AUTWeaponShield::StaticClass(); \

#endif // UTGAME_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UDemoCamMod_ScreenShake) GUTGameUDemoCamMod_ScreenShakeNatives[] = 
{ 
	MAP_NATIVE(UDemoCamMod_ScreenShake,execUpdateScreenShake)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UDemoCamMod_ScreenShake);

NATIVE_INFO(AUTAmmoPickupFactory) GUTGameAUTAmmoPickupFactoryNatives[] = 
{ 
	MAP_NATIVE(AUTAmmoPickupFactory,execTransformAmmoType)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTAmmoPickupFactory);

NATIVE_INFO(AUTConsolePlayerController) GUTGameAUTConsolePlayerControllerNatives[] = 
{ 
	MAP_NATIVE(AUTConsolePlayerController,execGetTargetAdhesionFrictionTarget)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTConsolePlayerController);

NATIVE_INFO(UUTCustomChar_Data) GUTGameUUTCustomChar_DataNatives[] = 
{ 
	MAP_NATIVE(UUTCustomChar_Data,execCharDataFromString)
	MAP_NATIVE(UUTCustomChar_Data,execCharDataToString)
	MAP_NATIVE(UUTCustomChar_Data,execMakeRandomCharData)
	MAP_NATIVE(UUTCustomChar_Data,execMakeCharPortraitTexture)
	MAP_NATIVE(UUTCustomChar_Data,execResetCustomCharMerge)
	MAP_NATIVE(UUTCustomChar_Data,execFinishCustomCharMerge)
	MAP_NATIVE(UUTCustomChar_Data,execStartCustomCharMerge)
	MAP_NATIVE(UUTCustomChar_Data,execLoadFamilyAssets)
	MAP_NATIVE(UUTCustomChar_Data,execFindFamilyInfo)
	MAP_NATIVE(UUTCustomChar_Data,execFindCharacter)
	MAP_NATIVE(UUTCustomChar_Data,execFindPartSkelMesh)
	MAP_NATIVE(UUTCustomChar_Data,execFindPartObjName)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTCustomChar_Data);

NATIVE_INFO(AUTCustomChar_Preview) GUTGameAUTCustomChar_PreviewNatives[] = 
{ 
	MAP_NATIVE(AUTCustomChar_Preview,execNotifyCharacterDataChanged)
	MAP_NATIVE(AUTCustomChar_Preview,execSetCharacterData)
	MAP_NATIVE(AUTCustomChar_Preview,execSetCharacter)
	MAP_NATIVE(AUTCustomChar_Preview,execSetPart)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTCustomChar_Preview);

NATIVE_INFO(AUTEmitCameraEffect) GUTGameAUTEmitCameraEffectNatives[] = 
{ 
	MAP_NATIVE(AUTEmitCameraEffect,execUpdateLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTEmitCameraEffect);

NATIVE_INFO(UUTExplosionLight) GUTGameUUTExplosionLightNatives[] = 
{ 
	MAP_NATIVE(UUTExplosionLight,execResetLight)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTExplosionLight);

NATIVE_INFO(AUTGame) GUTGameAUTGameNatives[] = 
{ 
	MAP_NATIVE(AUTGame,execSortPlayerScores)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTGame);

NATIVE_INFO(AUTGameReplicationInfo) GUTGameAUTGameReplicationInfoNatives[] = 
{ 
	MAP_NATIVE(AUTGameReplicationInfo,execSetNoStreamWorldTextureForFrames)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTGameReplicationInfo);

NATIVE_INFO(AUTGameStats) GUTGameAUTGameStatsNatives[] = 
{ 
	MAP_NATIVE(AUTGameStats,execGetMapFilename)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTGameStats);

NATIVE_INFO(UUTJumpPadReachSpec) GUTGameUUTJumpPadReachSpecNatives[] = 
{ 
	MAP_NATIVE(UUTJumpPadReachSpec,execCostFor)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTJumpPadReachSpec);

NATIVE_INFO(AUTMissionGRI) GUTGameAUTMissionGRINatives[] = 
{ 
	MAP_NATIVE(AUTMissionGRI,execFillMissionList)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTMissionGRI);

NATIVE_INFO(AUTPawn) GUTGameAUTPawnNatives[] = 
{ 
	MAP_NATIVE(AUTPawn,execSuggestJumpVelocity)
	MAP_NATIVE(AUTPawn,execIsInvisible)
	MAP_NATIVE(AUTPawn,execRestorePreRagdollCollisionComponent)
	MAP_NATIVE(AUTPawn,execGetBoundingCylinder)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTPawn);

NATIVE_INFO(AUTPlayerController) GUTGameAUTPlayerControllerNatives[] = 
{ 
	MAP_NATIVE(AUTPlayerController,execCharPolyCount)
	MAP_NATIVE(AUTPlayerController,execClipChar)
	MAP_NATIVE(AUTPlayerController,execSetGamma)
	MAP_NATIVE(AUTPlayerController,execGetUIPlayerIndex)
	MAP_NATIVE(AUTPlayerController,execUpdateShakeRotComponent)
	MAP_NATIVE(AUTPlayerController,execCheckShake)
	MAP_NATIVE(AUTPlayerController,execGetPlayerCustomCharData)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTPlayerController);

NATIVE_INFO(AUTProjectile) GUTGameAUTProjectileNatives[] = 
{ 
	MAP_NATIVE(AUTProjectile,execGetTerminalVelocity)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTProjectile);

NATIVE_INFO(AUTRemoteRedeemer) GUTGameAUTRemoteRedeemerNatives[] = 
{ 
	MAP_NATIVE(AUTRemoteRedeemer,execIsPlayerPawn)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTRemoteRedeemer);

NATIVE_INFO(AUTScout) GUTGameAUTScoutNatives[] = 
{ 
	MAP_NATIVE(AUTScout,execSuggestJumpVelocity)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTScout);

NATIVE_INFO(UUTSkeletalMeshComponent) GUTGameUUTSkeletalMeshComponentNatives[] = 
{ 
	MAP_NATIVE(UUTSkeletalMeshComponent,execSetFOV)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTSkeletalMeshComponent);

NATIVE_INFO(UUTTranslocatorReachSpec) GUTGameUUTTranslocatorReachSpecNatives[] = 
{ 
	MAP_NATIVE(UUTTranslocatorReachSpec,execCostFor)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTTranslocatorReachSpec);

NATIVE_INFO(AUTVoteCollector) GUTGameAUTVoteCollectorNatives[] = 
{ 
	MAP_NATIVE(AUTVoteCollector,execGetMapIndex)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVoteCollector);

NATIVE_INFO(AUTVoteReplicationInfo) GUTGameAUTVoteReplicationInfoNatives[] = 
{ 
	MAP_NATIVE(AUTVoteReplicationInfo,execGetMapIndex)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVoteReplicationInfo);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(U,DemoCamMod_ScreenShake,Shakes)
VERIFY_CLASS_OFFSET_NODIE(U,DemoCamMod_ScreenShake,TestShake)
VERIFY_CLASS_SIZE_NODIE(UDemoCamMod_ScreenShake)
VERIFY_CLASS_OFFSET_NODIE(A,FlockAttractor,Attraction)
VERIFY_CLASS_OFFSET_NODIE(A,FlockAttractor,CylinderComponent)
VERIFY_CLASS_SIZE_NODIE(AFlockAttractor)
VERIFY_CLASS_OFFSET_NODIE(A,FlockTest_Spawner,SpawnRate)
VERIFY_CLASS_OFFSET_NODIE(A,FlockTest_Spawner,AttachmentSocket)
VERIFY_CLASS_SIZE_NODIE(AFlockTest_Spawner)
VERIFY_CLASS_OFFSET_NODIE(A,FlockTestActor,Spawner)
VERIFY_CLASS_OFFSET_NODIE(A,FlockTestActor,LightEnvironment)
VERIFY_CLASS_SIZE_NODIE(AFlockTestActor)
VERIFY_CLASS_OFFSET_NODIE(A,ForcedDirVolume,TypeToForce)
VERIFY_CLASS_OFFSET_NODIE(A,ForcedDirVolume,ArrowDirection)
VERIFY_CLASS_SIZE_NODIE(AForcedDirVolume)
VERIFY_CLASS_SIZE_NODIE(ULinkRenderingComponent)
VERIFY_CLASS_SIZE_NODIE(UUTActorFactoryAI)
VERIFY_CLASS_OFFSET_NODIE(U,UTActorFactoryMover,EventClass)
VERIFY_CLASS_SIZE_NODIE(UUTActorFactoryMover)
VERIFY_CLASS_OFFSET_NODIE(U,UTActorFactoryPickup,InventoryClass)
VERIFY_CLASS_SIZE_NODIE(UUTActorFactoryPickup)
VERIFY_CLASS_OFFSET_NODIE(U,UTActorFactoryVehicle,TeamNum)
VERIFY_CLASS_SIZE_NODIE(UUTActorFactoryVehicle)
VERIFY_CLASS_OFFSET_NODIE(A,UTAmmoPickupFactory,AmmoAmount)
VERIFY_CLASS_OFFSET_NODIE(A,UTAmmoPickupFactory,TransformedClass)
VERIFY_CLASS_SIZE_NODIE(AUTAmmoPickupFactory)
VERIFY_CLASS_OFFSET_NODIE(A,UTAvoidMarker,TeamNum)
VERIFY_CLASS_OFFSET_NODIE(A,UTAvoidMarker,CollisionCylinder)
VERIFY_CLASS_SIZE_NODIE(AUTAvoidMarker)
VERIFY_CLASS_OFFSET_NODIE(A,UTCarriedObject,LastAnchor)
VERIFY_CLASS_OFFSET_NODIE(A,UTCarriedObject,LastHighlightUpdate)
VERIFY_CLASS_SIZE_NODIE(AUTCarriedObject)
VERIFY_CLASS_OFFSET_NODIE(U,UTCharFamilyAssetStore,FamilyID)
VERIFY_CLASS_OFFSET_NODIE(U,UTCharFamilyAssetStore,StartLoadTime)
VERIFY_CLASS_SIZE_NODIE(UUTCharFamilyAssetStore)
VERIFY_CLASS_OFFSET_NODIE(U,UTCheatManager,LMC)
VERIFY_CLASS_SIZE_NODIE(UUTCheatManager)
VERIFY_CLASS_OFFSET_NODIE(A,UTConsolePlayerController,DigitalButtonActionsToCommandMapping)
VERIFY_CLASS_OFFSET_NODIE(A,UTConsolePlayerController,ProfileSettingToUE3BindingMapping)
VERIFY_CLASS_SIZE_NODIE(AUTConsolePlayerController)
VERIFY_CLASS_OFFSET_NODIE(U,UTConsolePlayerInput,SensitivityMultiplier)
VERIFY_CLASS_OFFSET_NODIE(U,UTConsolePlayerInput,AutoPitchStopAdjustingValue)
VERIFY_CLASS_SIZE_NODIE(UUTConsolePlayerInput)
VERIFY_CLASS_OFFSET_NODIE(A,UTCTFFlag,RespawnEffect)
VERIFY_CLASS_OFFSET_NODIE(A,UTCTFFlag,LightEnvironment)
VERIFY_CLASS_SIZE_NODIE(AUTCTFFlag)
VERIFY_CLASS_OFFSET_NODIE(U,UTCustomChar_Data,Parts)
VERIFY_CLASS_OFFSET_NODIE(U,UTCustomChar_Data,PortraitSetup)
VERIFY_CLASS_SIZE_NODIE(UUTCustomChar_Data)
VERIFY_CLASS_OFFSET_NODIE(A,UTCustomChar_Preview,AnimComp)
VERIFY_CLASS_OFFSET_NODIE(A,UTCustomChar_Preview,FamilyAssets)
VERIFY_CLASS_SIZE_NODIE(AUTCustomChar_Preview)
VERIFY_CLASS_OFFSET_NODIE(U,UTDataStore_OnlineStats,LeaderboardSettingsClass)
VERIFY_CLASS_OFFSET_NODIE(U,UTDataStore_OnlineStats,SettingsProvider)
VERIFY_CLASS_SIZE_NODIE(UUTDataStore_OnlineStats)
VERIFY_CLASS_OFFSET_NODIE(A,UTDefensePoint,CurrentUser)
VERIFY_CLASS_OFFSET_NODIE(A,UTDefensePoint,TeamSprites)
VERIFY_CLASS_SIZE_NODIE(AUTDefensePoint)
VERIFY_CLASS_OFFSET_NODIE(A,UTDeployable,Factory)
VERIFY_CLASS_OFFSET_NODIE(A,UTDeployable,PreviewScale3p)
VERIFY_CLASS_SIZE_NODIE(AUTDeployable)
VERIFY_CLASS_OFFSET_NODIE(A,UTDeployedActor,InstigatorController)
VERIFY_CLASS_OFFSET_NODIE(A,UTDeployedActor,__OnDeployableUsedUp__Delegate)
VERIFY_CLASS_SIZE_NODIE(AUTDeployedActor)
VERIFY_CLASS_OFFSET_NODIE(A,UTDroppedPickup,YawRotationRate)
VERIFY_CLASS_OFFSET_NODIE(A,UTDroppedPickup,MyLightEnvironment)
VERIFY_CLASS_SIZE_NODIE(AUTDroppedPickup)
VERIFY_CLASS_OFFSET_NODIE(A,UTEmitCameraEffect,DistFromCamera)
VERIFY_CLASS_OFFSET_NODIE(A,UTEmitCameraEffect,Cam)
VERIFY_CLASS_SIZE_NODIE(AUTEmitCameraEffect)
VERIFY_CLASS_SIZE_NODIE(AUTEmitter)
VERIFY_CLASS_OFFSET_NODIE(A,UTEmitterPool,RelativeExplosionLights)
VERIFY_CLASS_SIZE_NODIE(AUTEmitterPool)
VERIFY_CLASS_SIZE_NODIE(AUTEntryPlayerController)
VERIFY_CLASS_OFFSET_NODIE(U,UTExplosionLight,HighDetailFrameTime)
VERIFY_CLASS_OFFSET_NODIE(U,UTExplosionLight,__OnLightFinished__Delegate)
VERIFY_CLASS_SIZE_NODIE(UUTExplosionLight)
VERIFY_CLASS_OFFSET_NODIE(U,UTFamilyInfo,FamilyID)
VERIFY_CLASS_OFFSET_NODIE(U,UTFamilyInfo,DeathMeshBreakableJoints)
VERIFY_CLASS_SIZE_NODIE(UUTFamilyInfo)
VERIFY_CLASS_OFFSET_NODIE(A,UTGame,CallSigns)
VERIFY_CLASS_OFFSET_NODIE(A,UTGame,MidGameMenuTemplate)
VERIFY_CLASS_SIZE_NODIE(AUTGame)
VERIFY_CLASS_OFFSET_NODIE(A,UTGameObjective,DefenderTeamIndex)
VERIFY_CLASS_OFFSET_NODIE(A,UTGameObjective,MaxBeaconDistance)
VERIFY_CLASS_SIZE_NODIE(AUTGameObjective)
VERIFY_CLASS_OFFSET_NODIE(A,UTGameReplicationInfo,WeaponBerserk)
VERIFY_CLASS_OFFSET_NODIE(A,UTGameReplicationInfo,WeaponOverlays)
VERIFY_CLASS_SIZE_NODIE(AUTGameReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(A,UTGameStats,StatsLog)
VERIFY_CLASS_OFFSET_NODIE(A,UTGameStats,StatSummaryObjects)
VERIFY_CLASS_SIZE_NODIE(AUTGameStats)
VERIFY_CLASS_OFFSET_NODIE(A,UTGib,HitSound)
VERIFY_CLASS_OFFSET_NODIE(A,UTGib,GibMeshesData)
VERIFY_CLASS_SIZE_NODIE(AUTGib)
VERIFY_CLASS_SIZE_NODIE(AUTInventory)
VERIFY_CLASS_OFFSET_NODIE(A,UTInventoryManager,AmmoStorage)
VERIFY_CLASS_OFFSET_NODIE(A,UTInventoryManager,LastAdjustTime)
VERIFY_CLASS_SIZE_NODIE(AUTInventoryManager)
VERIFY_CLASS_OFFSET_NODIE(A,UTItemPickupFactory,PickupSound)
VERIFY_CLASS_OFFSET_NODIE(A,UTItemPickupFactory,RespawnTime)
VERIFY_CLASS_SIZE_NODIE(AUTItemPickupFactory)
VERIFY_CLASS_OFFSET_NODIE(A,UTJumpPad,JumpVelocity)
VERIFY_CLASS_OFFSET_NODIE(A,UTJumpPad,JumpAmbientSound)
VERIFY_CLASS_SIZE_NODIE(AUTJumpPad)
VERIFY_CLASS_SIZE_NODIE(UUTJumpPadReachSpec)
VERIFY_CLASS_OFFSET_NODIE(A,UTKActor,Health)
VERIFY_CLASS_OFFSET_NODIE(A,UTKActor,__OnEncroach__Delegate)
VERIFY_CLASS_SIZE_NODIE(AUTKActor)
VERIFY_CLASS_SIZE_NODIE(UUTLeaderboardSettings)
VERIFY_CLASS_OFFSET_NODIE(A,UTLinkedReplicationInfo,NextReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(AUTLinkedReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(U,UTMapInfo,RecommendedPlayersMin)
VERIFY_CLASS_OFFSET_NODIE(U,UTMapInfo,CurrentObjectiveHUDLocation)
VERIFY_CLASS_SIZE_NODIE(UUTMapInfo)
VERIFY_CLASS_OFFSET_NODIE(U,UTMapMusicInfo,MapMusic)
VERIFY_CLASS_OFFSET_NODIE(U,UTMapMusicInfo,MapStingers)
VERIFY_CLASS_SIZE_NODIE(UUTMapMusicInfo)
VERIFY_CLASS_OFFSET_NODIE(A,UTMissionGRI,FullMissionList)
VERIFY_CLASS_OFFSET_NODIE(A,UTMissionGRI,__OnMissionChanged__Delegate)
VERIFY_CLASS_SIZE_NODIE(AUTMissionGRI)
VERIFY_CLASS_OFFSET_NODIE(A,UTMissionPlayerController,Globes)
VERIFY_CLASS_OFFSET_NODIE(A,UTMissionPlayerController,DefaultLookAt)
VERIFY_CLASS_SIZE_NODIE(AUTMissionPlayerController)
VERIFY_CLASS_SIZE_NODIE(AUTMutator)
VERIFY_CLASS_SIZE_NODIE(UUTParticleSystemComponent)
VERIFY_CLASS_OFFSET_NODIE(A,UTPawn,LightEnvironment)
VERIFY_CLASS_OFFSET_NODIE(A,UTPawn,JumpBootCharge)
VERIFY_CLASS_SIZE_NODIE(AUTPawn)
VERIFY_CLASS_OFFSET_NODIE(U,UTPhysicalMaterialProperty,MaterialType)
VERIFY_CLASS_SIZE_NODIE(UUTPhysicalMaterialProperty)
VERIFY_CLASS_OFFSET_NODIE(A,UTPickupFactory,YawRotationRate)
VERIFY_CLASS_OFFSET_NODIE(A,UTPickupFactory,GlowEmissiveParam)
VERIFY_CLASS_SIZE_NODIE(AUTPickupFactory)
VERIFY_CLASS_OFFSET_NODIE(A,UTPlayerController,ProfileWeaponHand)
VERIFY_CLASS_OFFSET_NODIE(A,UTPlayerController,VoteRI)
VERIFY_CLASS_SIZE_NODIE(AUTPlayerController)
VERIFY_CLASS_OFFSET_NODIE(U,UTPlayerInput,LastDuckTime)
VERIFY_CLASS_OFFSET_NODIE(U,UTPlayerInput,__OnInputChar__Delegate)
VERIFY_CLASS_SIZE_NODIE(UUTPlayerInput)
VERIFY_CLASS_OFFSET_NODIE(A,UTPlayerReplicationInfo,spree)
VERIFY_CLASS_OFFSET_NODIE(A,UTPlayerReplicationInfo,ClanTag)
VERIFY_CLASS_SIZE_NODIE(AUTPlayerReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(A,UTPowerupPickupFactory,Spinner)
VERIFY_CLASS_OFFSET_NODIE(A,UTPowerupPickupFactory,ParticleEffects)
VERIFY_CLASS_SIZE_NODIE(AUTPowerupPickupFactory)
VERIFY_CLASS_SIZE_NODIE(AUTProj_Grenade)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_ScavengerBoltBase,Bounces)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_ScavengerBoltBase,SlowHomeAccel)
VERIFY_CLASS_SIZE_NODIE(AUTProj_ScavengerBoltBase)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_ScorpionGlob_Base,BounceCount)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_ScorpionGlob_Base,TrackingFactor)
VERIFY_CLASS_SIZE_NODIE(AUTProj_ScorpionGlob_Base)
VERIFY_CLASS_OFFSET_NODIE(A,UTProjectile,AmbientSound)
VERIFY_CLASS_OFFSET_NODIE(A,UTProjectile,InstigatorBaseVehicle)
VERIFY_CLASS_SIZE_NODIE(AUTProjectile)
VERIFY_CLASS_OFFSET_NODIE(A,UTRemoteRedeemer,Trail)
VERIFY_CLASS_OFFSET_NODIE(A,UTRemoteRedeemer,PawnAmbientSound)
VERIFY_CLASS_SIZE_NODIE(AUTRemoteRedeemer)
VERIFY_CLASS_OFFSET_NODIE(A,UTReplicatedEmitter,EmitterTemplate)
VERIFY_CLASS_OFFSET_NODIE(A,UTReplicatedEmitter,ServerLifeSpan)
VERIFY_CLASS_SIZE_NODIE(AUTReplicatedEmitter)
VERIFY_CLASS_OFFSET_NODIE(A,UTScout,MaxDoubleJumpHeight)
VERIFY_CLASS_OFFSET_NODIE(A,UTScout,SizePersonFindName)
VERIFY_CLASS_SIZE_NODIE(AUTScout)
VERIFY_CLASS_OFFSET_NODIE(U,UTSeqAct_ServerTravel,TravelURL)
VERIFY_CLASS_SIZE_NODIE(UUTSeqAct_ServerTravel)
VERIFY_CLASS_OFFSET_NODIE(U,UTSeqAct_TutorialMsg,TutorialMessage)
VERIFY_CLASS_OFFSET_NODIE(U,UTSeqAct_TutorialMsg,MsgBox)
VERIFY_CLASS_SIZE_NODIE(UUTSeqAct_TutorialMsg)
VERIFY_CLASS_OFFSET_NODIE(U,UTSkeletalMeshComponent,FOV)
VERIFY_CLASS_OFFSET_NODIE(U,UTSkeletalMeshComponent,ClearStreamingTime)
VERIFY_CLASS_SIZE_NODIE(UUTSkeletalMeshComponent)
VERIFY_CLASS_OFFSET_NODIE(A,UTSlowVolume,ScalingFactor)
VERIFY_CLASS_OFFSET_NODIE(A,UTSlowVolume,__OnDeployableUsedUp__Delegate)
VERIFY_CLASS_SIZE_NODIE(AUTSlowVolume)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeamInfo,DesiredTeamSize)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeamInfo,TeamColorNames)
VERIFY_CLASS_SIZE_NODIE(AUTTeamInfo)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeamPlayerStart,TeamNumber)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeamPlayerStart,TeamSprites)
VERIFY_CLASS_SIZE_NODIE(AUTTeamPlayerStart)
VERIFY_CLASS_OFFSET_NODIE(A,UTTimedPowerup,TimeRemaining)
VERIFY_CLASS_OFFSET_NODIE(A,UTTimedPowerup,PowerupOverSound)
VERIFY_CLASS_SIZE_NODIE(AUTTimedPowerup)
VERIFY_CLASS_SIZE_NODIE(UUTTrajectoryReachSpec)
VERIFY_CLASS_OFFSET_NODIE(U,UTTranslocatorReachSpec,CachedVelocity)
VERIFY_CLASS_OFFSET_NODIE(U,UTTranslocatorReachSpec,OriginalGravityZ)
VERIFY_CLASS_SIZE_NODIE(UUTTranslocatorReachSpec)
VERIFY_CLASS_SIZE_NODIE(UUTTypes)
VERIFY_CLASS_OFFSET_NODIE(A,UTVoteCollector,Votes)
VERIFY_CLASS_OFFSET_NODIE(A,UTVoteCollector,WinningIndex)
VERIFY_CLASS_SIZE_NODIE(AUTVoteCollector)
VERIFY_CLASS_OFFSET_NODIE(A,UTVoteReplicationInfo,Collector)
VERIFY_CLASS_OFFSET_NODIE(A,UTVoteReplicationInfo,MyCurrnetVoteID)
VERIFY_CLASS_SIZE_NODIE(AUTVoteReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_FlakCannon,SpreadDist)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_FlakCannon,TossZ)
VERIFY_CLASS_SIZE_NODIE(AUTWeap_FlakCannon)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_ImpactHammer,MinDamage)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_ImpactHammer,AltHitEffect)
VERIFY_CLASS_SIZE_NODIE(AUTWeap_ImpactHammer)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeapon,AmmoPickupClass)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeapon,TargetAdhesionZoomedBoostValue)
VERIFY_CLASS_SIZE_NODIE(AUTWeapon)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponLocker,Weapons)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponLocker,ScaleRate)
VERIFY_CLASS_SIZE_NODIE(AUTWeaponLocker)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponPickupFactory,WeaponPickupClass)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponPickupFactory,WeaponPickupScaling)
VERIFY_CLASS_SIZE_NODIE(AUTWeaponPickupFactory)
VERIFY_CLASS_SIZE_NODIE(AUTWeaponShield)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
