/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

enum ETeamSpawning
{
    TS_All                  =0,
    TS_AxonOnly             =1,
    TS_NecrisOnly           =2,
    TS_MAX                  =3,
};
enum ETurretMoveDir
{
    TMD_Stop                =0,
    TMD_Forward             =1,
    TMD_Reverse             =2,
    TMD_MAX                 =3,
};
enum EBoostDir
{
    EBD_None                =0,
    EBD_Forward             =1,
    EBD_Left                =2,
    EBD_Right               =3,
    EBD_MAX                 =4,
};
enum EDeployState
{
    EDS_Undeployed          =0,
    EDS_Deploying           =1,
    EDS_Deployed            =2,
    EDS_UnDeploying         =3,
    EDS_MAX                 =4,
};
enum EWalkerStance
{
    WalkerStance_None       =0,
    WalkerStance_Standing   =1,
    WalkerStance_Parked     =2,
    WalkerStance_Crouched   =3,
    WalkerStance_MAX        =4,
};
enum EWalkerLegID
{
    WalkerLeg_Rear          =0,
    WalkerLeg_FrontLeft     =1,
    WalkerLeg_FrontRight    =2,
    WalkerLeg_MAX           =3,
};

#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName UTGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(ActivateRocketBoosters)
AUTOGENERATE_NAME(ApplyMorphHeal)
AUTOGENERATE_NAME(BladeHit)
AUTOGENERATE_NAME(BoardJumpEffect)
AUTOGENERATE_NAME(BreakTowLink)
AUTOGENERATE_NAME(CalcTargetVelocity)
AUTOGENERATE_NAME(CheckActiveTurret)
AUTOGENERATE_NAME(CheckReset)
AUTOGENERATE_NAME(Cloak)
AUTOGENERATE_NAME(DeactivateBallBooster)
AUTOGENERATE_NAME(DeactivateRocketBoosters)
AUTOGENERATE_NAME(EnableFullSteering)
AUTOGENERATE_NAME(EndBallMode)
AUTOGENERATE_NAME(GetBarrelLocationAndRotation)
AUTOGENERATE_NAME(GetDesiredAimPoint)
AUTOGENERATE_NAME(GetPhysFireStartLocation)
AUTOGENERATE_NAME(HideBoard)
AUTOGENERATE_NAME(HoverboardLanded)
AUTOGENERATE_NAME(JumpOutCheck)
AUTOGENERATE_NAME(LowerSteering)
AUTOGENERATE_NAME(MantaDuckEffect)
AUTOGENERATE_NAME(MantaJumpEffect)
AUTOGENERATE_NAME(MorphTargetDestroyed)
AUTOGENERATE_NAME(OnPropertyChange)
AUTOGENERATE_NAME(PlayFootStep)
AUTOGENERATE_NAME(PlayLanding)
AUTOGENERATE_NAME(PlayTakeHitEffects)
AUTOGENERATE_NAME(PlayTakeOff)
AUTOGENERATE_NAME(ReceivedHealthChange)
AUTOGENERATE_NAME(RequestDodge)
AUTOGENERATE_NAME(ScavengerDuckEffect)
AUTOGENERATE_NAME(ScavengerJumpEffect)
AUTOGENERATE_NAME(SelfDestruct)
AUTOGENERATE_NAME(SetParticleEffect)
AUTOGENERATE_NAME(SetTeamNum)
AUTOGENERATE_NAME(SetUpSimulation)
AUTOGENERATE_NAME(SpawnFootWaterEffect)
AUTOGENERATE_NAME(SpawnSeeker)
AUTOGENERATE_NAME(SpawnVehicle)
AUTOGENERATE_NAME(SpinAttackVictim)
AUTOGENERATE_NAME(TakeFireDamage)
AUTOGENERATE_NAME(TakeWaterDamage)
AUTOGENERATE_NAME(ToggleAnimBoard)
AUTOGENERATE_NAME(ViperJumpEffect)
AUTOGENERATE_NAME(WalkerDuckEffect)

#ifndef NAMES_ONLY

struct FColorOverTime
{
    FColor TargetColor;
    FLOAT Time;
};

struct UTVehicleWeapon_eventGetDesiredAimPoint_Parms
{
    class AActor* TargetActor;
    FVector ReturnValue;
    UTVehicleWeapon_eventGetDesiredAimPoint_Parms(EEventParm)
    {
    }
};
class AUTVehicleWeapon : public AUTWeapon
{
public:
    //## BEGIN PROPS UTVehicleWeapon
    INT SeatIndex;
    class AUTVehicle* MyVehicle;
    TArrayNoInit<FName> FireTriggerTags;
    TArrayNoInit<FName> AltFireTriggerTags;
    TArrayNoInit<struct FMaterialImpactEffect> ImpactEffects;
    TArrayNoInit<struct FMaterialImpactEffect> AltImpactEffects;
    struct FMaterialImpactEffect DefaultImpactEffect;
    struct FMaterialImpactEffect DefaultAltImpactEffect;
    class USoundCue* BulletWhip;
    TArrayNoInit<struct FColorOverTime> GoodAimColors;
    FLOAT LastIncorrectAimTime;
    FColor BadAimColor;
    FLOAT AimTraceRange;
    TArrayNoInit<class AActor*> AimingTraceIgnoredActors;
    FLOAT MaxFinalAimAdjustment;
    BITFIELD bPlaySoundFromSocket:1;
    BITFIELD bCurrentlyZoomed:1;
    BITFIELD bIgnoreSocketPitchRotation:1;
    BITFIELD bIgnoreDownwardPitch:1;
    class UClass* VehicleClass;
    //## END PROPS UTVehicleWeapon

    FVector eventGetDesiredAimPoint(class AActor*& TargetActor)
    {
        UTVehicleWeapon_eventGetDesiredAimPoint_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        Parms.TargetActor=TargetActor;
        ProcessEvent(FindFunctionChecked(UTGAME_GetDesiredAimPoint),&Parms);
        TargetActor=Parms.TargetActor;
        return Parms.ReturnValue;
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicleWeapon,AUTWeapon,0|CLASS_Config|CLASS_NativeReplication,UTGame)
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

struct FDeployableData
{
    class UClass* DeployableClass;
    BYTE MaxCnt;
    FVector DropOffset;
    TArrayNoInit<class AActor*> Queue;

    /** Constructors */
    FDeployableData() {}
    FDeployableData(EEventParm)
    {
        appMemzero(this, sizeof(FDeployableData));
    }
};

#define UCONST_NUMDEPLOYABLETYPES 5

class AUTVWeap_NightshadeGun : public AUTVehicleWeapon
{
public:
    //## BEGIN PROPS UTVWeap_NightshadeGun
    struct FDeployableData DeployableList[5];
    BITFIELD bShowDeployableName:1;
    BITFIELD bBeamHit:1;
    BYTE Counts[5] GCC_BITFIELD_MAGIC;
    INT DeployableIndex;
    class USoundCue* AltFireModeChangeSound;
    class AActor* LinkedTo;
    class UPrimitiveComponent* LinkedComponent;
    class AActor* Victim;
    INT LinkStrength;
    FLOAT LinkFlexibility;
    FLOAT LinkBreakDelay;
    FLOAT MomentumTransfer;
    FLOAT ReaccquireTimer;
    FLOAT SavedDamage;
    struct FTextureCoordinates IconCoords[5];
    class USoundCue* DeployedItemSound;
    //## END PROPS UTVWeap_NightshadeGun

    DECLARE_ABSTRACT_CLASS(AUTVWeap_NightshadeGun,AUTVehicleWeapon,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTVWeap_NightshadeGun)
};

struct UTVWeap_SPMACannon_eventGetPhysFireStartLocation_Parms
{
    FVector ReturnValue;
    UTVWeap_SPMACannon_eventGetPhysFireStartLocation_Parms(EEventParm)
    {
    }
};
struct UTVWeap_SPMACannon_eventCalcTargetVelocity_Parms
{
    UTVWeap_SPMACannon_eventCalcTargetVelocity_Parms(EEventParm)
    {
    }
};
class AUTVWeap_SPMACannon : public AUTVehicleWeapon
{
public:
    //## BEGIN PROPS UTVWeap_SPMACannon
    class AUTProj_SPMACamera* RemoteCamera;
    FVector TargetVelocity;
    class USoundCue* BoomSound;
    BITFIELD bCanHitTargetVector:1;
    //## END PROPS UTVWeap_SPMACannon

    FVector eventGetPhysFireStartLocation()
    {
        UTVWeap_SPMACannon_eventGetPhysFireStartLocation_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        ProcessEvent(FindFunctionChecked(UTGAME_GetPhysFireStartLocation),&Parms);
        return Parms.ReturnValue;
    }
    void eventCalcTargetVelocity()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_CalcTargetVelocity),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTVWeap_SPMACannon,AUTVehicleWeapon,0|CLASS_Config,UTGame)
	//virtual void TickSpecial( FLOAT DeltaSeconds );
};

class AUTVWeap_TowCable : public AUTVehicleWeapon
{
public:
    //## BEGIN PROPS UTVWeap_TowCable
    BITFIELD bLinked:1;
    FLOAT LastLinkStartTime;
    class AUTVehicle_Hoverboard* MyHoverboard;
    class AUTVehicle* PotentialTowTruck;
    class USoundCue* FireFailSound;
    FLOAT MaxAttachRange;
    FLOAT CrossScaler;
    FLOAT CrossScaleTime;
    class AUTVehicle* LastPotentialTowTruck;
    FName LastPointName;
    class UTexture2D* CrossHairTexture;
    //## END PROPS UTVWeap_TowCable

    DECLARE_CLASS(AUTVWeap_TowCable,AUTVehicleWeapon,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct UTVehicleFactory_eventSpawnVehicle_Parms
{
    UTVehicleFactory_eventSpawnVehicle_Parms(EEventParm)
    {
    }
};
class AUTVehicleFactory : public ANavigationPoint
{
public:
    //## BEGIN PROPS UTVehicleFactory
    class UClass* VehicleClass;
    class AUTVehicle* ChildVehicle;
    FLOAT RespawnProgress;
    FLOAT RespawnRateModifier;
    BITFIELD bMayReverseSpawnDirection:1;
    BITFIELD bStartNeutral:1;
    BITFIELD bHasLockedVehicle:1;
    BITFIELD bDisabled:1;
    BITFIELD bReplicateChildVehicle:1;
    class AUTGameObjective* ReverseObjective;
    INT TeamNum;
    FVector HUDLocation;
    class UMaterialInstanceConstant* HUDMaterialInstance;
    TArrayNoInit<FRotator> InitialGunRotations;
    class AUTOnslaughtObjective* ONSObjectiveOverride;
    BYTE TeamSpawningControl;
    //## END PROPS UTVehicleFactory

    void eventSpawnVehicle()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_SpawnVehicle),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicleFactory,ANavigationPoint,0|CLASS_NativeReplication,UTGame)
	virtual void CheckForErrors();
	virtual void TickSpecial( FLOAT DeltaSeconds );
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

class AUTVehicleFactory_TrackTurretBase : public AUTVehicleFactory
{
public:
    //## BEGIN PROPS UTVehicleFactory_TrackTurretBase
    class AInterpActor* MoverBase;
    FLOAT InitialPosition;
    BITFIELD bIgnoreMatineeRotation:1;
    FLOAT TurretAccelRate;
    FLOAT LastPosition;
    FLOAT MovementModifier;
    BYTE LastMoveDir;
    BITFIELD bInMotion:1 GCC_BITFIELD_MAGIC;
    FLOAT LastSteering;
    FLOAT LastThrottle;
    //## END PROPS UTVehicleFactory_TrackTurretBase

    virtual void TurretDeathReset();
    virtual void ResetTurret();
    virtual void ForceTurretStop();
    DECLARE_FUNCTION(execTurretDeathReset)
    {
        P_FINISH;
        TurretDeathReset();
    }
    DECLARE_FUNCTION(execResetTurret)
    {
        P_FINISH;
        ResetTurret();
    }
    DECLARE_FUNCTION(execForceTurretStop)
    {
        P_FINISH;
        ForceTurretStop();
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicleFactory_TrackTurretBase,AUTVehicleFactory,0,UTGame)
	void AdjustMovement(FLOAT Steering, FLOAT Throttle);
	virtual void physInterpolating(FLOAT DeltaTime);
};

struct UTVehicleBase_eventHoldGameObject_Parms
{
    class AUTCarriedObject* GameObj;
    UTVehicleBase_eventHoldGameObject_Parms(EEventParm)
    {
    }
};
class AUTVehicleBase : public ASVehicle
{
public:
    //## BEGIN PROPS UTVehicleBase
    class UUTUIScene_VehicleHud* PawnHudScene;
    BITFIELD bShouldEject:1;
    class UTexture2D* HUDIcons;
    struct FTextureCoordinates HudCoords;
    //## END PROPS UTVehicleBase

    void eventHoldGameObject(class AUTCarriedObject* GameObj)
    {
        UTVehicleBase_eventHoldGameObject_Parms Parms(EC_EventParm);
        Parms.GameObj=GameObj;
        ProcessEvent(FindFunctionChecked(UTGAME_HoldGameObject),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicleBase,ASVehicle,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTVehicleBase)
};

struct FVehicleSeat
{
    class APawn* StoragePawn;
    class AVehicle* SeatPawn;
    class UClass* GunClass;
    class AUTVehicleWeapon* Gun;
    TArrayNoInit<FName> GunSocket;
    TArrayNoInit<FName> GunPivotPoints;
    INT BarrelIndex;
    FStringNoInit TurretVarPrefix;
    FName WeaponRotationName;
    FName FlashLocationName;
    FName FlashCountName;
    FName FiringModeName;
    FPointer WeaponRotationProperty;
    FPointer FlashLocationProperty;
    FPointer FlashCountProperty;
    FPointer FiringModeProperty;
    FRotator LastWeaponRotation;
    TArrayNoInit<FName> TurretControls;
    TArrayNoInit<class UUTSkelControl_TurretConstrained*> TurretControllers;
    FVector AimPoint;
    class AActor* AimTarget;
    FName CameraTag;
    FVector CameraBaseOffset;
    FVector CameraSafeOffset;
    FLOAT CameraOffset;
    FLOAT CameraEyeHeight;
    FLOAT ViewPitchMin;
    FLOAT ViewPitchMax;
    BITFIELD bSeatVisible:1;
    FName SeatBone;
    FVector SeatOffset;
    FRotator SeatRotation;
    FName SeatSocket;
    class UClass* MuzzleFlashLightClass;
    class UUTExplosionLight* MuzzleFlashLight;
    class UClass* ImpactFlashLightClass;
    FLOAT DriverDamageMult;
    class UAudioComponent* SeatMotionAudio;
    class AVehicleMovementEffect* SeatMovementEffect;
    FVector2D SeatIconPOS;

    /** Constructors */
    FVehicleSeat() {}
    FVehicleSeat(EEventParm)
    {
        appMemzero(this, sizeof(FVehicleSeat));
    }
};

struct FVehicleEffect
{
    FName EffectStartTag;
    FName EffectEndTag;
    BITFIELD bRestartRunning:1;
    class UParticleSystem* EffectTemplate;
    FName EffectSocket;
    class UParticleSystemComponent* EffectRef;
};

struct FVehicleAnim
{
    FName AnimTag;
    TArrayNoInit<FName> AnimSeqs;
    FLOAT AnimRate;
    BITFIELD bAnimLoopLastSeq:1;
    FName AnimPlayerName;

    /** Constructors */
    FVehicleAnim() {}
    FVehicleAnim(EEventParm)
    {
        appMemzero(this, sizeof(FVehicleAnim));
    }
};

struct FVehicleSound
{
    FName SoundStartTag;
    FName SoundEndTag;
    class USoundCue* SoundTemplate;
    class UAudioComponent* SoundRef;
};

struct FFDamageMorphTargets
{
    FName MorphNodeName;
    class UMorphNodeWeight* MorphNode;
    FName LinkedMorphNodeName;
    INT LinkedMorphNodeIndex;
    FName InfluenceBone;
    INT Health;
    TArrayNoInit<FName> DamagePropNames;

    /** Constructors */
    FFDamageMorphTargets() {}
    FFDamageMorphTargets(EEventParm)
    {
        appMemzero(this, sizeof(FFDamageMorphTargets));
    }
};

struct FTimePosition
{
    FVector Position;
    FLOAT Time;
};

#define UCONST_UTVEHICLE_UNSET_TEAM 128

struct UTVehicle_eventMorphTargetDestroyed_Parms
{
    INT MorphNodeIndex;
    UTVehicle_eventMorphTargetDestroyed_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventApplyMorphHeal_Parms
{
    INT Amount;
    UTVehicle_eventApplyMorphHeal_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventReceivedHealthChange_Parms
{
    UTVehicle_eventReceivedHealthChange_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventOnPropertyChange_Parms
{
    FName PropName;
    UTVehicle_eventOnPropertyChange_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventGetBarrelLocationAndRotation_Parms
{
    INT SeatIndex;
    FVector SocketLocation;
    FRotator SocketRotation;
    UTVehicle_eventGetBarrelLocationAndRotation_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventPlayTakeHitEffects_Parms
{
    UTVehicle_eventPlayTakeHitEffects_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventCheckReset_Parms
{
    UTVehicle_eventCheckReset_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventSetTeamNum_Parms
{
    BYTE T;
    UTVehicle_eventSetTeamNum_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventTakeFireDamage_Parms
{
    UTVehicle_eventTakeFireDamage_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventTakeWaterDamage_Parms
{
    FLOAT DeltaTime;
    UTVehicle_eventTakeWaterDamage_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventJumpOutCheck_Parms
{
    UTVehicle_eventJumpOutCheck_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventSelfDestruct_Parms
{
    class AActor* ImpactedActor;
    UTVehicle_eventSelfDestruct_Parms(EEventParm)
    {
    }
};
class AUTVehicle : public AUTVehicleBase
{
public:
    //## BEGIN PROPS UTVehicle
    BITFIELD bDriverHoldsFlag:1;
    BITFIELD bCanCarryFlag:1;
    BITFIELD bTeamLocked:1;
    BITFIELD bValidLinkTarget:1;
    BITFIELD bEnteringUnlocks:1;
    BITFIELD bHasCustomEntryRadius:1;
    BITFIELD bKeyVehicle:1;
    BITFIELD bDefensive:1;
    BITFIELD bEjectPassengersWhenFlipped:1;
    BITFIELD bMustBeUpright:1;
    BITFIELD bStickDeflectionThrottle:1;
    BITFIELD bHasWeaponBar:1;
    BITFIELD bNeverReset:1;
    BITFIELD bEjectKilledBodies:1;
    BITFIELD bLightArmor:1;
    BITFIELD bShouldLeaveForCombat:1;
    BITFIELD bDrawHealthOnHUD:1;
    BITFIELD bDriverCastsShadow:1;
    BITFIELD bHasBeenDriven:1;
    BITFIELD bFrontalCollision:1;
    BITFIELD bFrontalCollisionWithFixed:1;
    BITFIELD bUseLookSteer:1;
    BITFIELD bSteerToLeftStickDirection:1;
    BITFIELD bForceDirectionAllowedNegative:1;
    BITFIELD bAllowedExit:1;
    BITFIELD bHomingTarget:1;
    BITFIELD bDeadVehicle:1;
    BITFIELD bHasTurretExplosion:1;
    BITFIELD bIsBurning:1;
    BITFIELD bIsScraping:1;
    BITFIELD bPostRenderTraceSucceeded:1;
    BITFIELD bPlayingSpawnEffect:1;
    BITFIELD bReducedFallingCollisionDamage:1;
    BITFIELD bUnlimitedCameraDistance:1;
    BITFIELD bRotateCameraUnderVehicle:1;
    BITFIELD bNoZSmoothing:1;
    BITFIELD bNoFollowJumpZ:1;
    BITFIELD bFixedCamZ:1;
    BITFIELD bCameraNeverHidesVehicle:1;
    BITFIELD bStopDeathCamera:1;
    BITFIELD bIsConsoleTurning:1;
    BITFIELD bShowDamageDebug:1;
    BITFIELD bStealthVehicle:1;
    BITFIELD bIsDisabled:1;
    BITFIELD bNoZDampingInAir:1;
    BITFIELD bNoZDamping:1;
    class USoundCue* VehicleLockedSound;
    class UPhysicalMaterial* DrivingPhysicalMaterial;
    class UPhysicalMaterial* DefaultPhysicalMaterial;
    FLOAT LastCheckUpsideDownTime;
    FLOAT FlippedCount;
    class ULightEnvironmentComponent* LightEnvironment;
    BYTE Team;
    FLOAT VehicleLostTime;
    FLOAT PlayerStartTime;
    FLOAT RespawnTime;
    FLOAT InitialSpawnDelay;
    FLOAT LinkHealMult;
    class UAudioComponent* LinkedToAudio;
    class USoundCue* LinkedToCue;
    class USoundCue* LinkedEndSound;
    TArrayNoInit<FName> LinkToSockets;
    FLOAT MaxDesireability;
    FLOAT ObjectiveGetOutDist;
    TArrayNoInit<class USoundCue*> HornSounds;
    FLOAT HornAIRadius;
    FLOAT LastHornTime;
    FLOAT LeftStickDirDeadZone;
    FLOAT LookSteerSensitivity;
    FLOAT LookSteerDeadZone;
    FVector ForceMovementDirection;
    class USoundCue* LockedOnSound;
    class UClass* RanOverDamageType;
    FLOAT MinRunOverSpeed;
    class USoundCue* RanOverSound;
    INT StolenAnnouncementIndex;
    class USoundCue* StolenSound;
    FLOAT LastRunOverWarningTime;
    FLOAT MinRunOverWarningAim;
    class AUTVehicle* NextVehicle;
    class AUTVehicleFactory* ParentFactory;
    class AUTBot* Reservation;
    FLOAT ResetTime;
    FStringNoInit VehiclePositionString;
    FStringNoInit VehicleNameString;
    FLOAT TeamBeaconMaxDist;
    FLOAT TeamBeaconPlayerInfoMaxDist;
    FLOAT HUDExtent;
    FLOAT WaterDamage;
    FLOAT AccumulatedWaterDamage;
    class UClass* VehicleDrowningDamType;
    class UClass* ExplosionLightClass;
    FLOAT MaxExplosionLightDistance;
    FRotator WeaponRotation;
    TArrayNoInit<struct FVehicleSeat> Seats;
    INT SeatMask;
    TArrayNoInit<struct FVehicleEffect> VehicleEffects;
    TArrayNoInit<struct FVehicleAnim> VehicleAnims;
    TArrayNoInit<struct FVehicleSound> VehicleSounds;
    TArrayNoInit<struct FFDamageMorphTargets> DamageMorphTargets;
    TArrayNoInit<class UUTSkelControl_Damage*> DamageSkelControls;
    INT ClientHealth;
    class UMaterialInstanceConstant* DamageMaterialInstance;
    class UMaterialInterface* TeamMaterials[2];
    FLOAT DamageSmokeThreshold;
    FLOAT FireDamageThreshold;
    FLOAT FireDamagePerSec;
    FLOAT UpsideDownDamagePerSec;
    FLOAT AccruedFireDamage;
    class UClass* ExplosionDamageType;
    class AController* KillerController;
    struct FViewShakeInfo ProximityShake;
    FLOAT ProximityShakeRadius;
    FLOAT MaxImpactEffectDistance;
    FLOAT MaxFireEffectDistance;
    FLOAT LastJumpOutCheck;
    class UParticleSystem* ExplosionTemplate;
    TArrayNoInit<struct FDistanceBasedParticleTemplate> BigExplosionTemplates;
    FName BigExplosionSocket;
    TArrayNoInit<class UMaterialInstanceConstant*> BurnOutMaterialInstances;
    FLOAT BurnOutTime;
    FLOAT DeadVehicleLifeSpan;
    FLOAT ExplosionDamage;
    FLOAT ExplosionRadius;
    FLOAT ExplosionMomentum;
    class UCameraAnim* DeathExplosionShake;
    FLOAT InnerExplosionShakeRadius;
    FLOAT OuterExplosionShakeRadius;
    FName TurretScaleControlName;
    FName TurretSocketName;
    TArrayNoInit<struct FDistanceBasedParticleTemplate> DistanceTurretExplosionTemplates;
    FVector TurretOffset;
    class AUTVehicleDeathPiece* DestroyedTurret;
    class UStaticMesh* DestroyedTurretTemplate;
    FLOAT TurretExplosiveForce;
    class USoundCue* ExplosionSound;
    class USoundCue* ImpactHitSound;
    FLOAT LastDeathImpactTime;
    class USoundCue* LargeChunkImpactSound;
    class USoundCue* MediumChunkImpactSound;
    class USoundCue* SmallChunkImpactSound;
    FLOAT RemainingBurn;
    FName BurnTimeParameterName;
    FName BurnValueParameterName;
    class UAudioComponent* ScrapeSound;
    class UAudioComponent* TireAudioComp;
    TArrayNoInit<struct FMaterialSoundEffect> TireSoundList;
    FName CurrentTireMaterial;
    FLOAT SpawnRadius;
    FName DrivingAnim;
    class USoundCue* SpawnInSound;
    class USoundCue* SpawnOutSound;
    FVector FlagOffset;
    FRotator FlagRotation;
    FName FlagBone;
    class UTexture2D* LockedTexture;
    class UMaterialInstanceConstant* HUDMaterialInstance;
    FVector HUDLocation;
    FLOAT MapSize;
    FLOAT IconXStart;
    FLOAT IconYStart;
    FLOAT IconXWidth;
    FLOAT IconYWidth;
    FLOAT LastPostRenderTraceTime;
    INT LastHealth;
    FLOAT HealthPulseTime;
    FVector TeamBeaconOffset;
    class AUTPlayerReplicationInfo* PassengerPRI;
    FVector PassengerTeamBeaconOffset;
    class UParticleSystem* SpawnInTemplates[2];
    FLOAT SpawnInTime;
    class AUTEmitter* SpawnEffect;
    class UMaterialInterface* BurnOutMaterial[2];
    FLOAT CollisionDamageMult;
    FLOAT LastCollisionDamageTime;
    FLOAT SeatCameraScale;
    FLOAT CameraScaleMin;
    FLOAT CameraScaleMax;
    FLOAT OldCamPosZ;
    FLOAT CameraSmoothingFactor;
    FLOAT DefaultFOV;
    TArrayNoInit<struct FTimePosition> OldPositions;
    FLOAT CameraLag;
    FVector CameraOffset;
    FLOAT LookForwardDist;
    FLOAT MinCameraDistSq;
    FVector OldCameraPosition;
    TArrayNoInit<class AUTBot*> Trackers;
    struct FTakeHitInfo LastTakeHitInfo;
    FLOAT LastTakeHitTimeout;
    FLOAT DisabledTime;
    FLOAT TimeLastDisabled;
    class UParticleSystem* DisabledTemplate;
    class UParticleSystemComponent* DisabledEffectComponent;
    TArrayNoInit<FName> HoverBoardAttachSockets;
    TArrayNoInit<struct FMaterialParticleEffect> WheelParticleEffects;
    class UStaticMesh* ReferenceMovementMesh;
    //## END PROPS UTVehicle

    virtual FRotator SeatWeaponRotation(INT SeatIndex,FRotator NewRot=FRotator(),UBOOL bReadValue=0);
    virtual FVector SeatFlashLocation(INT SeatIndex,FVector NewLoc=FVector(),UBOOL bReadValue=0);
    virtual BYTE SeatFlashCount(INT SeatIndex,BYTE NewCount=0,UBOOL bReadValue=0);
    virtual BYTE SeatFiringMode(INT SeatIndex,BYTE NewFireMode=0,UBOOL bReadValue=0);
    virtual void ForceWeaponRotation(INT SeatIndex,FRotator NewRotation);
    virtual FVector GetSeatPivotPoint(INT SeatIndex);
    virtual INT GetBarrelIndex(INT SeatIndex);
    virtual void InitDamageSkel();
    virtual void UpdateDamageMaterial();
    virtual void ApplyMorphDamage(FVector HitLocation,INT Damage,FVector Momentum);
    DECLARE_FUNCTION(execSeatWeaponRotation)
    {
        P_GET_INT(SeatIndex);
        P_GET_STRUCT_OPTX(FRotator,NewRot,FRotator());
        P_GET_UBOOL_OPTX(bReadValue,0);
        P_FINISH;
        *(FRotator*)Result=SeatWeaponRotation(SeatIndex,NewRot,bReadValue);
    }
    DECLARE_FUNCTION(execSeatFlashLocation)
    {
        P_GET_INT(SeatIndex);
        P_GET_STRUCT_OPTX(FVector,NewLoc,FVector());
        P_GET_UBOOL_OPTX(bReadValue,0);
        P_FINISH;
        *(FVector*)Result=SeatFlashLocation(SeatIndex,NewLoc,bReadValue);
    }
    DECLARE_FUNCTION(execSeatFlashCount)
    {
        P_GET_INT(SeatIndex);
        P_GET_BYTE_OPTX(NewCount,0);
        P_GET_UBOOL_OPTX(bReadValue,0);
        P_FINISH;
        *(BYTE*)Result=SeatFlashCount(SeatIndex,NewCount,bReadValue);
    }
    DECLARE_FUNCTION(execSeatFiringMode)
    {
        P_GET_INT(SeatIndex);
        P_GET_BYTE_OPTX(NewFireMode,0);
        P_GET_UBOOL_OPTX(bReadValue,0);
        P_FINISH;
        *(BYTE*)Result=SeatFiringMode(SeatIndex,NewFireMode,bReadValue);
    }
    DECLARE_FUNCTION(execForceWeaponRotation)
    {
        P_GET_INT(SeatIndex);
        P_GET_STRUCT(FRotator,NewRotation);
        P_FINISH;
        ForceWeaponRotation(SeatIndex,NewRotation);
    }
    DECLARE_FUNCTION(execGetSeatPivotPoint)
    {
        P_GET_INT(SeatIndex);
        P_FINISH;
        *(FVector*)Result=GetSeatPivotPoint(SeatIndex);
    }
    DECLARE_FUNCTION(execGetBarrelIndex)
    {
        P_GET_INT(SeatIndex);
        P_FINISH;
        *(INT*)Result=GetBarrelIndex(SeatIndex);
    }
    DECLARE_FUNCTION(execIsSeatControllerReplicationViewer);
    DECLARE_FUNCTION(execInitDamageSkel)
    {
        P_FINISH;
        InitDamageSkel();
    }
    DECLARE_FUNCTION(execUpdateDamageMaterial)
    {
        P_FINISH;
        UpdateDamageMaterial();
    }
    DECLARE_FUNCTION(execApplyMorphDamage)
    {
        P_GET_STRUCT(FVector,HitLocation);
        P_GET_INT(Damage);
        P_GET_STRUCT(FVector,Momentum);
        P_FINISH;
        ApplyMorphDamage(HitLocation,Damage,Momentum);
    }
    void eventMorphTargetDestroyed(INT MorphNodeIndex)
    {
        UTVehicle_eventMorphTargetDestroyed_Parms Parms(EC_EventParm);
        Parms.MorphNodeIndex=MorphNodeIndex;
        ProcessEvent(FindFunctionChecked(UTGAME_MorphTargetDestroyed),&Parms);
    }
    void eventApplyMorphHeal(INT Amount)
    {
        UTVehicle_eventApplyMorphHeal_Parms Parms(EC_EventParm);
        Parms.Amount=Amount;
        ProcessEvent(FindFunctionChecked(UTGAME_ApplyMorphHeal),&Parms);
    }
    void eventReceivedHealthChange()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ReceivedHealthChange),NULL);
    }
    void eventOnPropertyChange(FName PropName)
    {
        UTVehicle_eventOnPropertyChange_Parms Parms(EC_EventParm);
        Parms.PropName=PropName;
        ProcessEvent(FindFunctionChecked(UTGAME_OnPropertyChange),&Parms);
    }
    void eventGetBarrelLocationAndRotation(INT SeatIndex,FVector& SocketLocation,FRotator& SocketRotation)
    {
        UTVehicle_eventGetBarrelLocationAndRotation_Parms Parms(EC_EventParm);
        Parms.SeatIndex=SeatIndex;
        Parms.SocketLocation=SocketLocation;
        Parms.SocketRotation=SocketRotation;
        ProcessEvent(FindFunctionChecked(UTGAME_GetBarrelLocationAndRotation),&Parms);
        SocketLocation=Parms.SocketLocation;
        SocketRotation=Parms.SocketRotation;
    }
    void eventPlayTakeHitEffects()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_PlayTakeHitEffects),NULL);
    }
    void eventCheckReset()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_CheckReset),NULL);
    }
    void eventSetTeamNum(BYTE T)
    {
        UTVehicle_eventSetTeamNum_Parms Parms(EC_EventParm);
        Parms.T=T;
        ProcessEvent(FindFunctionChecked(UTGAME_SetTeamNum),&Parms);
    }
    void eventTakeFireDamage()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_TakeFireDamage),NULL);
    }
    void eventTakeWaterDamage(FLOAT DeltaTime)
    {
        UTVehicle_eventTakeWaterDamage_Parms Parms(EC_EventParm);
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(UTGAME_TakeWaterDamage),&Parms);
    }
    void eventJumpOutCheck()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_JumpOutCheck),NULL);
    }
    void eventSelfDestruct(class AActor* ImpactedActor)
    {
        UTVehicle_eventSelfDestruct_Parms Parms(EC_EventParm);
        Parms.ImpactedActor=ImpactedActor;
        ProcessEvent(FindFunctionChecked(UTGAME_SelfDestruct),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicle,AUTVehicleBase,0|CLASS_Config|CLASS_NativeReplication,UTGame)
	virtual FVector GetDampingForce(const FVector& InForce);
	void RequestTrackingFor(AUTBot *Bot);
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual UBOOL JumpOutCheck(AActor *GoalActor, FLOAT Distance, FLOAT ZDiff);
	virtual FLOAT GetMaxRiseForce();
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
	virtual void OnRigidBodyCollision(const FRigidBodyCollisionInfo& Info0, const FRigidBodyCollisionInfo& Info1, const FCollisionImpactData& RigidCollisionData);
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void ApplyWeaponRotation(INT SeatIndex, FRotator NewRotation);
	UBOOL CheckAutoDestruct(ATeamInfo* InstigatorTeam, FLOAT CheckRadius);
	virtual void PreNetReceive();
	virtual void PostNetReceive();
};

class AUTHoverVehicle : public AUTVehicle
{
public:
    //## BEGIN PROPS UTHoverVehicle
    TArrayNoInit<INT> GroundEffectIndices;
    FLOAT MaxGroundEffectDist;
    FName GroundEffectDistParameterName;
    FLOAT CustomGravityScaling;
    FLOAT StallZGravityScaling;
    FLOAT FullAirSpeed;
    //## END PROPS UTHoverVehicle

    DECLARE_ABSTRACT_CLASS(AUTHoverVehicle,AUTVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
	virtual FLOAT GetGravityZ();
};

class AUTAirVehicle : public AUTHoverVehicle
{
public:
    //## BEGIN PROPS UTAirVehicle
    TArrayNoInit<INT> ContrailEffectIndices;
    FName ContrailColorParameterName;
    BITFIELD bAutoLand:1;
    BITFIELD bIsAutoLanding:1;
    FLOAT PushForce;
    FStringNoInit RadarLockMessage;
    FLOAT LastRadarLockWarnTime;
    //## END PROPS UTAirVehicle

    virtual FLOAT GetGravityZ();
    DECLARE_ABSTRACT_CLASS(AUTAirVehicle,AUTHoverVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
};

class AUTVehicle_Cicada : public AUTAirVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Cicada
    FVector TurretFlashLocation;
    FRotator TurretWeaponRotation;
    BYTE TurretFlashCount;
    BYTE TurretFiringMode;
    BITFIELD bFreelanceStart:1 GCC_BITFIELD_MAGIC;
    TArrayNoInit<INT> JetEffectIndices;
    class UParticleSystem* TurretBeamTemplate;
    class UUTSkelControl_JetThruster* JetControl;
    FName JetScalingParam;
    //## END PROPS UTVehicle_Cicada

    DECLARE_ABSTRACT_CLASS(AUTVehicle_Cicada,AUTAirVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
	virtual UBOOL HasRelevantDriver();
};

struct FBeamLockData
{
    class AActor* LockedTarget;
    FName LockedBone;
};

struct FJetSFXInfo
{
    FName ExhaustTag;
    FLOAT Exhaust;
    FLOAT ExhaustCur;
    FLOAT ExhaustRampUpTime;
    FLOAT ExhaustRampDownTime;
};

struct UTVehicle_Fury_eventPlayTakeOff_Parms
{
    UTVehicle_Fury_eventPlayTakeOff_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Fury_eventPlayLanding_Parms
{
    UTVehicle_Fury_eventPlayLanding_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Fury_eventDeactivateRocketBoosters_Parms
{
    UTVehicle_Fury_eventDeactivateRocketBoosters_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Fury_eventActivateRocketBoosters_Parms
{
    BYTE BoostDir;
    UTVehicle_Fury_eventActivateRocketBoosters_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Fury_eventLowerSteering_Parms
{
    UTVehicle_Fury_eventLowerSteering_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Fury_eventEnableFullSteering_Parms
{
    UTVehicle_Fury_eventEnableFullSteering_Parms(EEventParm)
    {
    }
};
class AUTVehicle_Fury : public AUTAirVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Fury
    class UUTAnimNodeSequence* AnimPlayer;
    class UAnimNodeBlend* BlendNode;
    FLOAT TargetTranslationZ;
    FLOAT TargetTranslationTime;
    FLOAT TakeOffRate;
    class UUTAnimBlendByCollision* ArmBlendNodes[4];
    FLOAT BoostAirSpeed;
    FLOAT BoosterForceMagnitude[4];
    BYTE BoostAttempt;
    BYTE BoostStatus;
    FLOAT BoostEnergy;
    FLOAT BoostRechargeRate;
    FLOAT BoostCost[4];
    BITFIELD bSteeringLimited:1;
    FLOAT MaxBoostDuration[4];
    FLOAT BoostEndTime;
    FLOAT BoostDisabledTimer;
    FLOAT BoostPowerSpeed;
    FLOAT BoostChargeRate;
    FLOAT BoosterFOVAngle;
    FLOAT MinTurnStrafeForce;
    FLOAT MinTurnThrustForce;
    FLOAT MinTurnRiseForce;
    FLOAT UprightRollMinThreshold;
    FLOAT UprightRollMaxThreshold;
    FLOAT UprightMaxModifier;
    class UParticleSystem* BeamTemplate;
    class UParticleSystemComponent* BeamEmitter[4];
    FName BeamSockets[4];
    FName EndPointParamName;
    class USoundCue* BeamFireSound;
    class USoundCue* AfterburnerSound;
    class USoundCue* StrafeSound;
    class UAudioComponent* BeamAmbientSound;
    class UAudioComponent* BoostComponent;
    struct FBeamLockData BeamLockedInfo;
    struct FJetSFXInfo JetSFX[3];
    FName BoosterNames[3];
    FLOAT BoostRampUpTime;
    FLOAT BoostRampDownTime;
    FLOAT CustomEntryRadius;
    //## END PROPS UTVehicle_Fury

    virtual void Boost(struct FJetSFXInfo& SFXInfo,FLOAT RampUpTime,FLOAT RampDownTime);
    virtual void BoostTo(struct FJetSFXInfo& SFXInfo,FLOAT NewExhaust,FLOAT RampTime);
    DECLARE_FUNCTION(execBoost)
    {
        P_GET_STRUCT_REF(struct FJetSFXInfo,SFXInfo);
        P_GET_FLOAT(RampUpTime);
        P_GET_FLOAT(RampDownTime);
        P_FINISH;
        Boost(SFXInfo,RampUpTime,RampDownTime);
    }
    DECLARE_FUNCTION(execBoostTo)
    {
        P_GET_STRUCT_REF(struct FJetSFXInfo,SFXInfo);
        P_GET_FLOAT(NewExhaust);
        P_GET_FLOAT(RampTime);
        P_FINISH;
        BoostTo(SFXInfo,NewExhaust,RampTime);
    }
    void eventPlayTakeOff()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_PlayTakeOff),NULL);
    }
    void eventPlayLanding()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_PlayLanding),NULL);
    }
    void eventDeactivateRocketBoosters()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_DeactivateRocketBoosters),NULL);
    }
    void eventActivateRocketBoosters(BYTE BoostDir)
    {
        UTVehicle_Fury_eventActivateRocketBoosters_Parms Parms(EC_EventParm);
        Parms.BoostDir=BoostDir;
        ProcessEvent(FindFunctionChecked(UTGAME_ActivateRocketBoosters),&Parms);
    }
    void eventLowerSteering()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_LowerSteering),NULL);
    }
    void eventEnableFullSteering()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_EnableFullSteering),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicle_Fury,AUTAirVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

class AUTVehicle_Raptor : public AUTAirVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Raptor
    BITFIELD bForwardMode:1;
    FName TurretPivotSocketName;
    class UParticleSystem* TeamMF[2];
    //## END PROPS UTVehicle_Raptor

    DECLARE_CLASS(AUTVehicle_Raptor,AUTAirVehicle,0|CLASS_Config,UTGame)
	virtual FVector GetSeatPivotPoint(int SeatIndex);
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct FTowInfoData
{
    class AUTVehicle* TowTruck;
    FName TowAttachPoint;
};

struct UTVehicle_Hoverboard_eventHoverboardLanded_Parms
{
    UTVehicle_Hoverboard_eventHoverboardLanded_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventHideBoard_Parms
{
    UTVehicle_Hoverboard_eventHideBoard_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventToggleAnimBoard_Parms
{
    UBOOL bAnimBoard;
    FLOAT delay;
    UTVehicle_Hoverboard_eventToggleAnimBoard_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventBreakTowLink_Parms
{
    UTVehicle_Hoverboard_eventBreakTowLink_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventBoardJumpEffect_Parms
{
    UTVehicle_Hoverboard_eventBoardJumpEffect_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventRequestDodge_Parms
{
    UTVehicle_Hoverboard_eventRequestDodge_Parms(EEventParm)
    {
    }
};
class AUTVehicle_Hoverboard : public AUTHoverVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Hoverboard
    class UUTSkeletalMeshComponent* HoverboardMesh;
    FVector MeshLocationOffset;
    FRotator MeshRotationOffset;
    FLOAT JumpForceMag;
    FLOAT DodgeForceMag;
    FLOAT TrickJumpWarmupMax;
    FLOAT JumpCheckTraceDist;
    FLOAT TrickJumpWarmup;
    FLOAT TrickSpinWarmup;
    FLOAT JumpDelay;
    FLOAT LastJumpTime;
    BITFIELD bInAJump:1;
    BITFIELD bLeftGround:1;
    BITFIELD bDoHoverboardJump:1;
    BITFIELD bIsDodging:1;
    BITFIELD bTrickJumping:1;
    BITFIELD bGrabbingBoard:1;
    BITFIELD bGrab1:1;
    BITFIELD bGrab2:1;
    BITFIELD bForceSpinWarmup:1;
    BITFIELD bDisableRepulsorsAtMaxFallSpeed:1;
    BITFIELD bInTow:1;
    BITFIELD bRagdolling:1;
    FLOAT TakeoffYaw;
    FLOAT AutoSpin;
    FLOAT SpinHeadingOffset;
    FLOAT SpinSpeed;
    FLOAT LandedCountdown;
    FVector DodgeForce;
    FLOAT LeanUprightStiffness;
    FLOAT LeanUprightDamping;
    class URB_StayUprightSetup* LeanUprightConstraintSetup;
    class URB_ConstraintInstance* LeanUprightConstraintInstance;
    class URB_ConstraintSetup* FootBoardConstraintSetup;
    class URB_ConstraintInstance* LeftFootBoardConstraintInstance;
    class URB_ConstraintInstance* RightFootBoardConstraintInstance;
    FVector GroundNormal;
    FLOAT CurrentLookYaw;
    class USkelControlSingleBone* SpineTurnControl;
    class USkelControlLookAt* TowControl;
    FLOAT MaxTrackYaw;
    FLOAT CurrentHeadYaw;
    FLOAT TurnLeanFactor;
    FLOAT MaxLeanPitchSpeed;
    FLOAT TargetPitch;
    FLOAT DownhillDownForce;
    FLOAT WaterCheckLevel;
    class URB_DistanceJointSetup* DistanceJointSetup;
    class URB_ConstraintInstance* DistanceJointInstance;
    FLOAT MaxTowDistance;
    struct FTowInfoData TowInfo;
    FVector TowLocalAttachPos;
    FLOAT HoverboardTowSteerMaxAngle;
    FLOAT CurrentTowDistance;
    FLOAT TowDistanceChangeSpeed;
    FLOAT TowLineBlockedBreakTime;
    FLOAT TowLineBlockedFor;
    class UParticleSystemComponent* TowBeamEmitter;
    class UParticleSystemComponent* TowBeamEndPointEffect;
    class UParticleSystemComponent* HoverboardDust;
    class UParticleSystem* RedDustEffect;
    class UParticleSystem* BlueDustEffect;
    class UParticleSystemComponent* ThrusterEffect;
    FName ThrusterEffectSocket;
    class UParticleSystem* RedThrusterEffect;
    class UParticleSystem* BlueThrusterEffect;
    class UParticleSystem* TowBeamTeamEmitters[2];
    class UParticleSystem* TowBeamTeamEndPoints[2];
    FName TowBeamEndParameterName;
    class UAudioComponent* CurveSound;
    class USoundCue* EngineThrustSound;
    class USoundCue* TurnSound;
    class USoundCue* JumpSound;
    class UAudioComponent* TowLoopComponent;
    class USoundCue* TowLoopCue;
    class USoundCue* TowStartedSound;
    class USoundCue* TowEndedSound;
    FLOAT CameraInitialOut;
    FVector HoverCamOffset;
    FRotator HoverCamRotOffset;
    FVector VelLookAtOffset;
    FVector VelBasedCamOffset;
    FLOAT VelRollFactor;
    FLOAT HoverCamMaxVelUsed;
    FLOAT ViewRollRate;
    INT CurrentViewRoll;
    FLOAT TargetPhysicsWeight;
    FLOAT PhysWeightBlendTimeToGo;
    FLOAT PhysWeightBlendTime;
    BYTE DoubleClickMove;
    class UStaticMeshComponent* HandleMesh;
    INT FallingDamageRagdollThreshold;
    //## END PROPS UTVehicle_Hoverboard

    void AttachTowCable();
    DECLARE_FUNCTION(execAttachTowCable)
    {
        P_FINISH;
        AttachTowCable();
    }
    void eventHoverboardLanded()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_HoverboardLanded),NULL);
    }
    void eventHideBoard()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_HideBoard),NULL);
    }
    void eventToggleAnimBoard(UBOOL bAnimBoard,FLOAT delay)
    {
        UTVehicle_Hoverboard_eventToggleAnimBoard_Parms Parms(EC_EventParm);
        Parms.bAnimBoard=bAnimBoard ? FIRST_BITFIELD : 0;
        Parms.delay=delay;
        ProcessEvent(FindFunctionChecked(UTGAME_ToggleAnimBoard),&Parms);
    }
    void eventBreakTowLink()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_BreakTowLink),NULL);
    }
    void eventBoardJumpEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_BoardJumpEffect),NULL);
    }
    void eventRequestDodge()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_RequestDodge),NULL);
    }
    DECLARE_CLASS(AUTVehicle_Hoverboard,AUTHoverVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );

#if WITH_NOVODEX
	virtual void PostInitRigidBody(NxActor* nActor, NxActorDesc& ActorDesc, UPrimitiveComponent* PrimComp);
#endif // WITH_NOVODEX
};

struct UTVehicle_Manta_eventMantaDuckEffect_Parms
{
    UTVehicle_Manta_eventMantaDuckEffect_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Manta_eventMantaJumpEffect_Parms
{
    UTVehicle_Manta_eventMantaJumpEffect_Parms(EEventParm)
    {
    }
};
class AUTVehicle_Manta : public AUTHoverVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Manta
    FLOAT JumpForceMag;
    FLOAT JumpCheckTraceDist;
    FLOAT JumpDelay;
    FLOAT LastJumpTime;
    FLOAT DuckForceMag;
    BITFIELD bDoBikeJump:1;
    BITFIELD bHoldingDuck:1;
    BITFIELD bPressingAltFire:1;
    class USoundCue* JumpSound;
    class USoundCue* DuckSound;
    FLOAT BladeBlur;
    FLOAT DesiredBladeBlur;
    INT FanEffectIndex;
    FName FanEffectParameterName;
    FLOAT FullWheelSuspensionTravel;
    FLOAT CrouchedWheelSuspensionTravel;
    FLOAT SuspensionTravelAdjustSpeed;
    FLOAT FullWheelSuspensionStiffness;
    FLOAT CrouchedWheelSuspensionStiffness;
    FLOAT BoneOffsetZAdjust;
    FLOAT CrouchedAirSpeed;
    //## END PROPS UTVehicle_Manta

    void eventMantaDuckEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_MantaDuckEffect),NULL);
    }
    void eventMantaJumpEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_MantaJumpEffect),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicle_Manta,AUTHoverVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct UTVehicle_Viper_eventViperJumpEffect_Parms
{
    UTVehicle_Viper_eventViperJumpEffect_Parms(EEventParm)
    {
    }
};
class AUTVehicle_Viper : public AUTHoverVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Viper
    FLOAT JumpDuration;
    FLOAT JumpForceMag;
    FLOAT JumpCheckTraceDist;
    FLOAT JumpCountdown;
    FLOAT JumpDelay;
    FLOAT LastJumpTime;
    BITFIELD bDoBikeJump:1;
    BITFIELD bHoldingDuck:1;
    BITFIELD bPressingAltFire:1;
    BITFIELD bStopWhenGlide:1;
    BITFIELD bSelfDestructInProgress:1;
    BITFIELD bSelfDestructReady:1;
    BITFIELD bSelfDestructArmed:1;
    class USoundCue* JumpSound;
    class USoundCue* DuckSound;
    FLOAT GlideAirSpeed;
    FLOAT GlideSpeedReductionRate;
    FLOAT NormalGravity;
    FLOAT GlidingGravity;
    class UClass* SelfDestructDamageType;
    class USoundCue* SelfDestructSoundCue;
    class USoundCue* EjectSoundCue;
    FName SelfDestructSpinName;
    class AController* SelfDestructInstigator;
    FLOAT DestructStartTime;
    FLOAT MaxDestructDuration;
    FLOAT TimeToRiseForSelfDestruct;
    class USoundCue* SelfDestructReadySnd;
    FVector BoostDir;
    FLOAT BoostForce;
    INT ExhaustIndex;
    class UParticleSystem* SelfDestructEffectTemplate;
    class UParticleSystemComponent* SelfDestructEffect;
    FName ExhaustParamName;
    class UAnimNodeBlend* GlideBlend;
    FLOAT GlideBlendTime;
    class UAudioComponent* CurveSound;
    //## END PROPS UTVehicle_Viper

    void eventViperJumpEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ViperJumpEffect),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicle_Viper,AUTHoverVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

class AUTVehicle_Deployable : public AUTVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Deployable
    BYTE DeployedState;
    FLOAT DeployTime;
    FLOAT UnDeployTime;
    FLOAT LastDeployStartTime;
    class UAnimNodeSequence* AnimPlay;
    FName GetInAnim[2];
    FName GetOutAnim[2];
    FName IdleAnim[2];
    FName DeployAnim[2];
    class USoundCue* DeploySound;
    class USoundCue* UndeploySound;
    class USoundCue* DeployedEnterSound;
    class USoundCue* DeployedExitSound;
    FLOAT MaxDeploySpeed;
    BITFIELD bRequireAllWheelsOnGround:1;
    //## END PROPS UTVehicle_Deployable

    DECLARE_ABSTRACT_CLASS(AUTVehicle_Deployable,AUTVehicle,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTVehicle_Deployable)
};

class AUTStealthVehicle : public AUTVehicle_Deployable
{
public:
    //## BEGIN PROPS UTStealthVehicle
    FName TurretName;
    FName DeployedViewSocket;
    BYTE TurretFiringMode;
    FName ExhaustEffectName;
    class UMaterialInterface* VisibleSkin;
    class UMaterialInterface* CloakedSkin;
    FName SkinTranslucencyName;
    FName TeamSkinParamName;
    FName HitEffectName;
    FLOAT HitEffectColor;
    class UMaterialInstanceConstant* BodyMaterialInstance;
    FLOAT SlowSpeed;
    class UMeshComponent* DeployPreviewMesh;
    class UParticleSystem* BeamTemplate;
    class UParticleSystemComponent* BeamEmitter;
    FName BeamSockets;
    FName EndPointParamName;
    class UAudioComponent* BeamAmbientSound;
    class USoundCue* BeamFireSound;
    class USoundCue* BeamStartSound;
    class USoundCue* BeamStopSound;
    FColor LinkBeamColors[3];
    BITFIELD bTransitionCamera:1;
    FLOAT FastCamTransitionTime;
    INT AimYawOffset;
    FLOAT StoredCameraScale;
    FLOAT ArmSpeedTune;
    FLOAT CurrentWeaponScale[10];
    INT BouncedWeapon;
    INT LastSelectedWeapon;
    class UAudioComponent* TurretArmMoveSound;
    //## END PROPS UTStealthVehicle

    virtual void SetArmLocation(FLOAT DeltaSeconds);
    DECLARE_FUNCTION(execSetArmLocation)
    {
        P_GET_FLOAT(DeltaSeconds);
        P_FINISH;
        SetArmLocation(DeltaSeconds);
    }
    DECLARE_ABSTRACT_CLASS(AUTStealthVehicle,AUTVehicle_Deployable,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

class AUTVehicle_NightShade : public AUTStealthVehicle
{
public:
    //## BEGIN PROPS UTVehicle_NightShade
    //## END PROPS UTVehicle_NightShade

    virtual UBOOL IsInvisible();
    DECLARE_ABSTRACT_CLASS(AUTVehicle_NightShade,AUTStealthVehicle,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTVehicle_NightShade)
};

class AUTVehicle_StealthBender : public AUTStealthVehicle
{
public:
    //## BEGIN PROPS UTVehicle_StealthBender
    //## END PROPS UTVehicle_StealthBender

    DECLARE_ABSTRACT_CLASS(AUTVehicle_StealthBender,AUTStealthVehicle,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTVehicle_StealthBender)
};

struct UTVehicle_Leviathan_eventCheckActiveTurret_Parms
{
    FVector HitLocation;
    FLOAT MaxDist;
    INT ReturnValue;
    UTVehicle_Leviathan_eventCheckActiveTurret_Parms(EEventParm)
    {
    }
};
class AUTVehicle_Leviathan : public AUTVehicle_Deployable
{
public:
    //## BEGIN PROPS UTVehicle_Leviathan
    FVector LFTurretFlashLocation;
    BYTE LFTurretFlashCount;
    BYTE RFTurretFlashCount;
    BYTE LRTurretFlashCount;
    BYTE RRTurretFlashCount;
    BYTE ShieldStatus;
    BYTE OldVisStatus;
    BYTE OldFlashStatus;
    BYTE TurretStatus;
    BYTE OldTurretDeathStatus;
    BYTE OldTurretVisStatus;
    FRotator LFTurretWeaponRotation;
    FVector RFTurretFlashLocation;
    FRotator RFTurretWeaponRotation;
    FVector LRTurretFlashLocation;
    FRotator LRTurretWeaponRotation;
    FVector RRTurretFlashLocation;
    FRotator RRTurretWeaponRotation;
    class UParticleSystem* BeamTemplate;
    FName BeamEndpointVarName;
    class UParticleSystem* BigBeamTemplate;
    class UParticleSystemComponent* BigBeamEmitter;
    FName BigBeamEndpointVarName;
    FName BigBeamSocket;
    class AUTVehicleShield* Shield[4];
    class UClass* ShieldClass;
    class UCylinderComponent* TurretCollision[4];
    INT LFTurretHealth;
    INT RFTurretHealth;
    INT LRTurretHealth;
    INT RRTurretHealth;
    INT MaxTurretHealth;
    class USoundCue* BigBeamFireSound;
    FLOAT MaxHitCheckDist;
    class UUTSkelControl_TurretConstrained* CachedTurrets[4];
    FName MainTurretPivot;
    FName DriverTurretPivot;
    INT StingerTurretTurnRate;
    class USoundCue* TurretExplosionSound;
    class USoundCue* TurretActivate;
    class USoundCue* TurretDeactivate;
    class AUTPlayerReplicationInfo* PassengerPRITwo;
    class AUTPlayerReplicationInfo* PassengerPRIThree;
    class AUTPlayerReplicationInfo* PassengerPRIFour;
    FVector ExtraPassengerTeamBeaconOffset[3];
    class UParticleSystem* TurretExplosionTemplate;
    //## END PROPS UTVehicle_Leviathan

    virtual FVector GetTargetLocation(class AActor* RequestedBy=NULL);
    INT eventCheckActiveTurret(FVector HitLocation,FLOAT MaxDist)
    {
        UTVehicle_Leviathan_eventCheckActiveTurret_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.HitLocation=HitLocation;
        Parms.MaxDist=MaxDist;
        ProcessEvent(FindFunctionChecked(UTGAME_CheckActiveTurret),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicle_Leviathan,AUTVehicle_Deployable,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual void ApplyWeaponRotation(INT SeatIndex, FRotator NewRotation);
	virtual FVector GetSeatPivotPoint(INT SeatIndex);
};

class AUTVehicle_SPMA : public AUTVehicle_Deployable
{
public:
    //## BEGIN PROPS UTVehicle_SPMA
    class UMaterialInstanceConstant* TreadMaterialInstance;
    FName TreadSpeedParameterName;
    FRotator GunnerWeaponRotation;
    FVector GunnerFlashLocation;
    BYTE GunnerFlashCount;
    BYTE GunnerFiringMode;
    class UUTSkelControl_TurretConstrained* GunnerConstraint;
    FName LeftBigWheel;
    FName LeftSmallWheels[3];
    FName RightBigWheel;
    FName RightSmallWheels[3];
    FLOAT TreadPan;
    FLOAT DeployedCameraScale;
    FVector DeployedCameraOffset;
    BITFIELD bTransitionCameraScale:1;
    //## END PROPS UTVehicle_SPMA

    DECLARE_ABSTRACT_CLASS(AUTVehicle_SPMA,AUTVehicle_Deployable,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual void ApplyWeaponRotation(INT SeatIndex, FRotator NewRotation);
};

class AUTVehicle_Goliath : public AUTVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Goliath
    class UMaterialInstanceConstant* LeftTreadMaterialInstance;
    class UMaterialInstanceConstant* RightTreadMaterialInstance;
    FName TreadSpeedParameterName;
    FRotator GunnerWeaponRotation;
    FVector GunnerFlashLocation;
    FName LeftBigWheel;
    FName LeftSmallWheels[3];
    FName RightBigWheel;
    FName RightSmallWheels[3];
    class UAudioComponent* MachineGunAmbient;
    FLOAT LeftTreadSpeed;
    FLOAT RightTreadSpeed;
    class USkeletalMeshComponent* AntennaMesh;
    class UUTSkelControl_CantileverBeam* AntennaBeamControl;
    //## END PROPS UTVehicle_Goliath

    DECLARE_ABSTRACT_CLASS(AUTVehicle_Goliath,AUTVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

class AUTVehicle_HellBender : public AUTVehicle
{
public:
    //## BEGIN PROPS UTVehicle_HellBender
    FVector TurretFlashLocation;
    BYTE TurretFlashCount;
    BYTE TurretFiringMode;
    FRotator TurretWeaponRotation;
    class UAudioComponent* SuspensionShiftSound;
    FLOAT LastSuspensionShiftTime;
    FName ExhaustEffectName;
    BITFIELD bBrakeLightOn:1;
    BITFIELD bReverseLightOn:1;
    FName BrakeLightParameterName;
    FName ReverseLightParameterName;
    class UParticleSystem* BeamTemplate;
    //## END PROPS UTVehicle_HellBender

    DECLARE_ABSTRACT_CLASS(AUTVehicle_HellBender,AUTVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct UTVehicle_Scorpion_eventBladeHit_Parms
{
    class AActor* HitActor;
    FVector HitLocation;
    UBOOL bLeftBlade;
    UTVehicle_Scorpion_eventBladeHit_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Scorpion_eventDeactivateRocketBoosters_Parms
{
    UTVehicle_Scorpion_eventDeactivateRocketBoosters_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Scorpion_eventEnableFullSteering_Parms
{
    UTVehicle_Scorpion_eventEnableFullSteering_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Scorpion_eventActivateRocketBoosters_Parms
{
    UTVehicle_Scorpion_eventActivateRocketBoosters_Parms(EEventParm)
    {
    }
};
class AUTVehicle_Scorpion : public AUTVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Scorpion
    class UUTAnimBlendByWeapon* BladeBlend;
    class UAnimNodeSequence* HatchSequence;
    BITFIELD bBrakeLightOn:1;
    BITFIELD bReverseLightOn:1;
    BITFIELD bHeadlightsOn:1;
    BITFIELD bBladesExtended:1;
    BITFIELD bLeftBladeBroken:1;
    BITFIELD bRightBladeBroken:1;
    BITFIELD bBoostersActivated:1;
    BITFIELD bSteeringLimited:1;
    BITFIELD bScriptedBoosters:1;
    BITFIELD bSelfDestructArmed:1;
    BITFIELD bTryToBoost:1;
    BITFIELD bWasThrottle:1;
    FLOAT BladeBreakPoint;
    FName BrakeLightParameterName;
    FName ReverseLightParameterName;
    FName HeadLightParameterName;
    FName RightBladeStartSocket;
    FName RightBladeEndSocket;
    FName LeftBladeStartSocket;
    FName LeftBladeEndSocket;
    class UClass* BladeDamageType;
    class USoundCue* BladeBreakSound;
    class USoundCue* BladeExtendSound;
    class USoundCue* BladeRetractSound;
    FLOAT BoosterForceMagnitude;
    class AController* SelfDestructInstigator;
    FLOAT BoosterCheckRadius;
    FLOAT MaxBoostDuration;
    FLOAT BoostStartTime;
    FLOAT BoostChargeDuration;
    FLOAT BoostChargeTime;
    class UAudioComponent* BoosterSound;
    class UClass* SelfDestructDamageType;
    FLOAT BoostPowerSpeed;
    FLOAT BoostReleaseTime;
    FLOAT BoostReleaseDelay;
    class USoundCue* SelfDestructSoundCue;
    class USoundCue* SelfDestructReadyCue;
    class USoundCue* SelfDestructWarningSound;
    class USoundCue* SelfDestructEnabledSound;
    class USoundCue* SelfDestructEnabledLoop;
    class USoundCue* SuspensionShiftSound;
    class UAudioComponent* SelfDestructEnabledComponent;
    class UAudioComponent* SelfDestructWarningComponent;
    class UAudioComponent* SelfDestructReadyComponent;
    class USoundCue* EjectSoundCue;
    FLOAT BoosterFOVAngle;
    class UUTAnimBlendByWeapon* BoosterBlend;
    FLOAT ThrottleStartTime;
    class UPointLightComponent* LeftBoosterLight;
    class UPointLightComponent* RightBoosterLight;
    class ARB_ConstraintActor* BladeVictimConstraint[2];
    class UStaticMesh* ScorpionHood;
    FLOAT RocketSpeed;
    FLOAT SelfDestructSpeedSquared;
    FLOAT LockSuspensionTravel;
    FLOAT LockSuspensionStiffness;
    FLOAT BoostSteerFactors[3];
    class UParticleSystem* SelfDestructExplosionTemplate;
    class UClass* HatchGibClass;
    //## END PROPS UTVehicle_Scorpion

    virtual UBOOL ReadyToSelfDestruct();
    DECLARE_FUNCTION(execReadyToSelfDestruct)
    {
        P_FINISH;
        *(UBOOL*)Result=ReadyToSelfDestruct();
    }
    void eventBladeHit(class AActor* HitActor,FVector HitLocation,UBOOL bLeftBlade)
    {
        UTVehicle_Scorpion_eventBladeHit_Parms Parms(EC_EventParm);
        Parms.HitActor=HitActor;
        Parms.HitLocation=HitLocation;
        Parms.bLeftBlade=bLeftBlade ? FIRST_BITFIELD : 0;
        ProcessEvent(FindFunctionChecked(UTGAME_BladeHit),&Parms);
    }
    void eventDeactivateRocketBoosters()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_DeactivateRocketBoosters),NULL);
    }
    void eventEnableFullSteering()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_EnableFullSteering),NULL);
    }
    void eventActivateRocketBoosters()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ActivateRocketBoosters),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicle_Scorpion,AUTVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

class AUTVehicle_TrackTurretBase : public AUTVehicle
{
public:
    //## BEGIN PROPS UTVehicle_TrackTurretBase
    class UAudioComponent* TurretMoveStart;
    class UAudioComponent* TurretMoveLoop;
    class UAudioComponent* TurretMoveStop;
    BITFIELD bInMotion:1;
    //## END PROPS UTVehicle_TrackTurretBase

    DECLARE_ABSTRACT_CLASS(AUTVehicle_TrackTurretBase,AUTVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial(FLOAT DeltaSeconds);
	virtual void PostNetReceiveBase(AActor* NewBase);
	virtual UBOOL IgnoreBlockingBy(const AActor* Other) const;
};

class AUTVehicle_Walker : public AUTVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Walker
    BYTE CurrentStance;
    BYTE PreviousStance;
    FLOAT WheelSuspensionTravel[4];
    class AUTWalkerBody* BodyActor;
    class URB_Handle* BodyHandle;
    class UClass* BodyType;
    FName BodyAttachSocketName;
    FLOAT BodyHandleOrientInterpSpeed;
    BITFIELD bWasOnGround:1;
    BITFIELD bPreviousInAir:1;
    BITFIELD bHoldingDuck:1;
    BITFIELD bAnimateDeadLegs:1;
    FLOAT DuckForceMag;
    FLOAT InAirStart;
    FLOAT LandingFinishTime;
    FVector BaseBodyOffset;
    FLOAT HoverAdjust[4];
    FLOAT SuspensionTravelAdjustSpeed;
    //## END PROPS UTVehicle_Walker

    DECLARE_ABSTRACT_CLASS(AUTVehicle_Walker,AUTVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual UBOOL Tick( FLOAT DeltaTime, enum ELevelTick TickType );
	virtual FVector GetWalkerBodyLoc();
	UBOOL IsMoving2D() const;
};

struct UTVehicle_DarkWalker_eventWalkerDuckEffect_Parms
{
    UTVehicle_DarkWalker_eventWalkerDuckEffect_Parms(EEventParm)
    {
    }
};
class AUTVehicle_DarkWalker : public AUTVehicle_Walker
{
public:
    //## BEGIN PROPS UTVehicle_DarkWalker
    BYTE TurretFlashCount;
    BYTE TurretFiringMode;
    FRotator TurretWeaponRotation;
    class UParticleSystem* BeamTemplate;
    class UParticleSystemComponent* BeamEmitter[2];
    FName BeamSockets[2];
    FName EndPointParamName;
    class UAudioComponent* BeamAmbientSound;
    class USoundCue* BeamFireSound;
    FLOAT WarningConeMaxRadius;
    FLOAT LengthDarkWalkerWarningCone;
    class UAudioComponent* WarningConeSound;
    FName ConeParam;
    class AEmitter* EffectEmitter;
    class AActor* LastHitActor;
    BITFIELD bIsBeamActive:1;
    FLOAT CustomEntryRadius;
    //## END PROPS UTVehicle_DarkWalker

    void PlayWarningSoundIfInCone(class APawn* Target);
    DECLARE_FUNCTION(execPlayWarningSoundIfInCone)
    {
        P_GET_OBJECT(APawn,Target);
        P_FINISH;
        PlayWarningSoundIfInCone(Target);
    }
    void eventWalkerDuckEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_WalkerDuckEffect),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicle_DarkWalker,AUTVehicle_Walker,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );

	//@fixme FIXME: E3 hack!!! adjust test position for Dark Walker so bots realize they've reached points they're floating over
	//need a good general solution post E3
	virtual UBOOL ReachThresholdTest(const FVector& TestPosition, const FVector& Dest, AActor* GoalActor, FLOAT UpThresholdAdjust, FLOAT DownThresholdAdjust, FLOAT ThresholdAdjust)
	{
		return Super::ReachThresholdTest(TestPosition, Dest, GoalActor, UpThresholdAdjust, DownThresholdAdjust + 450.f, ThresholdAdjust);
	}
};

struct UTVehicle_Scavenger_eventDeactivateBallBooster_Parms
{
    UTVehicle_Scavenger_eventDeactivateBallBooster_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Scavenger_eventSpinAttackVictim_Parms
{
    class APawn* HitPawn;
    FLOAT DeltaSeconds;
    UTVehicle_Scavenger_eventSpinAttackVictim_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Scavenger_eventScavengerDuckEffect_Parms
{
    UTVehicle_Scavenger_eventScavengerDuckEffect_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Scavenger_eventScavengerJumpEffect_Parms
{
    UTVehicle_Scavenger_eventScavengerJumpEffect_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Scavenger_eventEndBallMode_Parms
{
    UTVehicle_Scavenger_eventEndBallMode_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Scavenger_eventSpawnSeeker_Parms
{
    UTVehicle_Scavenger_eventSpawnSeeker_Parms(EEventParm)
    {
    }
};
class AUTVehicle_Scavenger : public AUTVehicle_Walker
{
public:
    //## BEGIN PROPS UTVehicle_Scavenger
    FLOAT JumpForceMag;
    FLOAT JumpDelay;
    FLOAT LastJumpTime;
    BITFIELD bDoBikeJump:1;
    BITFIELD bOldDoBikeJump:1;
    BITFIELD bSpinAttackActive:1;
    BITFIELD bIsInBallMode:1;
    BITFIELD bBallBoostActivated:1;
    FLOAT SpinStartTime;
    FLOAT SpinTime;
    FLOAT SpinAttackRadius;
    FLOAT ArmMomentum;
    class USoundCue* JumpSound;
    class USoundCue* DuckSound;
    class USoundCue* BounceSound;
    class USoundCue* ArmRetractSound;
    class USoundCue* ArmExtendSound;
    class UAudioComponent* BallAudio;
    class UAudioComponent* RollAudioComp;
    TArrayNoInit<struct FMaterialSoundEffect> RollSoundList;
    FName CurrentRollMaterial;
    FLOAT FullHover;
    FLOAT ReducedHover;
    FLOAT LastBallTransitionTime;
    class UPhysicalMaterial* RollingPhysicalMaterial;
    FLOAT MaxThrustForce;
    FLOAT MaxBallForce;
    FLOAT MaxBoostForce;
    class UParticleSystemComponent* ImpactParticle;
    class UClass* BallCollisionDamageType;
    class UParticleSystemComponent* BallBoostEffect;
    FLOAT MaxBoostDuration;
    FLOAT BoostStartTime;
    FLOAT BoostChargeDuration;
    FLOAT BoostChargeTime;
    FLOAT MaxBoostSpeed;
    FLOAT MaxBallSpeed;
    class AUTProj_ScavengerBoltBase* ActiveSeeker;
    class UParticleSystem* ThrusterLeftTemplate[2];
    class UParticleSystem* ThrusterRightTemplate[2];
    //## END PROPS UTVehicle_Scavenger

    virtual void ImpactEffect(FVector HitPos);
    virtual void InitStayUpright();
    DECLARE_FUNCTION(execImpactEffect)
    {
        P_GET_STRUCT(FVector,HitPos);
        P_FINISH;
        ImpactEffect(HitPos);
    }
    DECLARE_FUNCTION(execInitStayUpright)
    {
        P_FINISH;
        InitStayUpright();
    }
    void eventDeactivateBallBooster()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_DeactivateBallBooster),NULL);
    }
    void eventSpinAttackVictim(class APawn* HitPawn,FLOAT DeltaSeconds)
    {
        UTVehicle_Scavenger_eventSpinAttackVictim_Parms Parms(EC_EventParm);
        Parms.HitPawn=HitPawn;
        Parms.DeltaSeconds=DeltaSeconds;
        ProcessEvent(FindFunctionChecked(UTGAME_SpinAttackVictim),&Parms);
    }
    void eventScavengerDuckEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ScavengerDuckEffect),NULL);
    }
    void eventScavengerJumpEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ScavengerJumpEffect),NULL);
    }
    void eventEndBallMode()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_EndBallMode),NULL);
    }
    void eventSpawnSeeker()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_SpawnSeeker),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicle_Scavenger,AUTVehicle_Walker,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual FVector GetWalkerBodyLoc();
};

class AUTWeaponPawn : public AUTVehicleBase
{
public:
    //## BEGIN PROPS UTWeaponPawn
    class AUTVehicleWeapon* MyVehicleWeapon;
    class AUTVehicle* MyVehicle;
    INT MySeatIndex;
    //## END PROPS UTWeaponPawn

    DECLARE_CLASS(AUTWeaponPawn,AUTVehicleBase,0|CLASS_Config|CLASS_NativeReplication,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual AVehicle* GetVehicleBase();
	INT* GetOptimizedRepList(BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel);
};

struct UTProj_SPMACamera_eventSetUpSimulation_Parms
{
    UTProj_SPMACamera_eventSetUpSimulation_Parms(EEventParm)
    {
    }
};
class AUTProj_SPMACamera : public AUTProjectile
{
public:
    //## BEGIN PROPS UTProj_SPMACamera
    class AUTVWeap_SPMACannon* InstigatorGun;
    BITFIELD bDeployed:1;
    BITFIELD bDisplayingArc:1;
    class UParticleSystem* HoverJetsTemplate;
    class USkeletalMeshComponent* Mesh;
    FLOAT LastMessageUpdateTime;
    FLOAT MaxHeight;
    FLOAT MaxTargetRange;
    FVector LastTargetLocation;
    FVector LastTargetNormal;
    FVector CameraViewOffset;
    FLOAT CVScale;
    FLOAT TargetRedirectDistance;
    class USoundCue* DeploySound;
    class USoundCue* ShotDownSound;
    INT SimulationCount;
    class UParticleSystemComponent* PSC_StartPoint;
    class UParticleSystem* PS_StartPoint;
    class UParticleSystemComponent* PSC_Trail;
    class UParticleSystem* PS_Trail;
    class UParticleSystemComponent* PSC_EndPoint;
    class UParticleSystemComponent* PSC_CurEndPoint;
    class UParticleSystem* PS_EndPointOnTarget;
    class UParticleSystem* PS_EndPointOffTarget;
    FVector LastTargetVelocity;
    //## END PROPS UTProj_SPMACamera

    FVector GetCurrentTargetLocation(class AController* C);
    virtual void SimulateTrajectory(FVector TossVelocity);
    virtual void KillTrajectory();
    DECLARE_FUNCTION(execGetCurrentTargetLocation)
    {
        P_GET_OBJECT(AController,C);
        P_FINISH;
        *(FVector*)Result=GetCurrentTargetLocation(C);
    }
    DECLARE_FUNCTION(execSimulateTrajectory)
    {
        P_GET_STRUCT(FVector,TossVelocity);
        P_FINISH;
        SimulateTrajectory(TossVelocity);
    }
    DECLARE_FUNCTION(execKillTrajectory)
    {
        P_FINISH;
        KillTrajectory();
    }
    void eventSetUpSimulation()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_SetUpSimulation),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTProj_SPMACamera,AUTProjectile,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTProj_SPMACamera)
};

struct FWalkerLegStepAnimData
{
    FVector DesiredFootPosition;
    FVector DesiredFootPosNormal;
    class UPhysicalMaterial* DesiredFootPosPhysMaterial;
    BITFIELD bNoValidFootHold:1;
};

#define UCONST_NUM_WALKER_LEGS 3

struct UTWalkerBody_eventSpawnFootWaterEffect_Parms
{
    INT LegIdx;
    UTWalkerBody_eventSpawnFootWaterEffect_Parms(EEventParm)
    {
    }
};
struct UTWalkerBody_eventPlayFootStep_Parms
{
    INT LegIdx;
    UTWalkerBody_eventPlayFootStep_Parms(EEventParm)
    {
    }
};
class AUTWalkerBody : public AActor
{
public:
    //## BEGIN PROPS UTWalkerBody
    class USkeletalMeshComponent* SkeletalMeshComponent;
    class USkelControlLookAt* ShoulderSkelControl[3];
    FName ShoulderSkelControlName[3];
    BYTE IgnoreFoot[3];
    BYTE FootInWater[3];
    class UUTWalkerStepHandle* FootConstraints[3];
    FLOAT NextStepStageTime[3];
    TArrayNoInit<FLOAT> StepStageTimes;
    INT StepStage[3];
    class UParticleSystem* FootWaterEffect;
    FLOAT MinStepDist;
    FLOAT MaxLegReach;
    FLOAT LegSpreadFactor;
    FLOAT CustomGravityScale;
    FLOAT LandedFootDistSq;
    FLOAT FootEmbedDistance;
    FName FootBoneName[3];
    FName ShoulderBoneName[3];
    FName BodyBoneName;
    class AUTVehicle_Walker* WalkerVehicle;
    BITFIELD bHasCrouchMode:1;
    BITFIELD bIsDead:1;
    FVector CurrentFootPosition[3];
    TArrayNoInit<struct FMaterialImpactEffect> FootStepEffects;
    class UParticleSystemComponent* FootStepParticles[3];
    INT LegMapping[3];
    FVector BaseLegDirLocal[3];
    FLOAT FootPosVelAdjScale[3];
    FName FootStepAnimNodeName[3];
    class UAnimNode* FootStepAnimNode[3];
    FLOAT FootStepStartLift;
    FLOAT FootStepEndLift;
    struct FWalkerLegStepAnimData StepAnimData[3];
    FVector PreviousTraceSeedLocation[3];
    //## END PROPS UTWalkerBody

    virtual void InitFeet();
    virtual void DoTestStep(INT LegIdx,FLOAT mag);
    DECLARE_FUNCTION(execInitFeet)
    {
        P_FINISH;
        InitFeet();
    }
    DECLARE_FUNCTION(execDoTestStep)
    {
        P_GET_INT(LegIdx);
        P_GET_FLOAT(mag);
        P_FINISH;
        DoTestStep(LegIdx,mag);
    }
    void eventSpawnFootWaterEffect(INT LegIdx)
    {
        UTWalkerBody_eventSpawnFootWaterEffect_Parms Parms(EC_EventParm);
        Parms.LegIdx=LegIdx;
        ProcessEvent(FindFunctionChecked(UTGAME_SpawnFootWaterEffect),&Parms);
    }
    void eventPlayFootStep(INT LegIdx)
    {
        UTWalkerBody_eventPlayFootStep_Parms Parms(EC_EventParm);
        Parms.LegIdx=LegIdx;
        ProcessEvent(FindFunctionChecked(UTGAME_PlayFootStep),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTWalkerBody,AActor,0,UTGame)
protected:
	void BeginStepStage(EWalkerLegID LegID, INT StageIdx);
	void MoveFootToLoc(INT LegIdx, FVector const& Loc, FVector const& SurfaceNormal, FLOAT MoveTime);
	void AssignFootDirections();
	void CalcDesiredFootLocations();
	void FinishStep(INT LegIdx);
	void GetLegsFacingRot(FRotator &OutRot) const;
	UBOOL IsUnbalanced() const;
	UBOOL FindGroundForFoot(FVector const& TraceSeed, INT LegIdx);
	virtual void ProcessSteps(FLOAT DeltaTime);
	virtual void PerformStep(EWalkerLegID LegID);

public:
	virtual FLOAT GetGravityZ();
	virtual void AnimateLegs(FLOAT DeltaSeconds, UBOOL bIsFalling);
};

struct UTWalkerBody_Scavenger_eventCloak_Parms
{
    UBOOL bIsEnabled;
    UTWalkerBody_Scavenger_eventCloak_Parms(EEventParm)
    {
    }
};
class AUTWalkerBody_Scavenger : public AUTWalkerBody
{
public:
    //## BEGIN PROPS UTWalkerBody_Scavenger
    class URB_Handle* PawnGrabber[3];
    BITFIELD bIsInBallMode:1;
    BITFIELD bStartedBallMode:1;
    INT spinRate;
    FName BallAnimNodeName[3];
    class UAnimNode* BallAnimNode[3];
    FName RetractionBlend;
    FName SphereCenterName;
    //## END PROPS UTWalkerBody_Scavenger

    void eventCloak(UBOOL bIsEnabled)
    {
        UTWalkerBody_Scavenger_eventCloak_Parms Parms(EC_EventParm);
        Parms.bIsEnabled=bIsEnabled ? FIRST_BITFIELD : 0;
        ProcessEvent(FindFunctionChecked(UTGAME_Cloak),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTWalkerBody_Scavenger,AUTWalkerBody,0,UTGame)
	virtual void AnimateLegs(FLOAT DeltaSeconds, UBOOL bIsFalling);
};

class AVehicleMovementEffect : public AActor
{
public:
    //## BEGIN PROPS VehicleMovementEffect
    class UStaticMeshComponent* AirEffect;
    FLOAT MinVelocityForAirEffect;
    FLOAT MaxVelocityForAirEffect;
    FName AirEffectScalar;
    FLOAT AirMaxDelta;
    FLOAT AirCurrentLevel;
    //## END PROPS VehicleMovementEffect

    DECLARE_CLASS(AVehicleMovementEffect,AActor,0,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
};

class UUTWalkerStepHandle : public URB_Handle
{
public:
    //## BEGIN PROPS UTWalkerStepHandle
    FLOAT InterpFactor;
    FLOAT InterpTime;
    FVector GoalInterpDelta;
    FVector GoalInterpStartLoc;
    //## END PROPS UTWalkerStepHandle

    virtual void SetSmoothLocationWithGoalInterp(const FVector& StartLoc,const FVector& EndLoc,FLOAT MoveTime);
    virtual void UpdateSmoothLocationWithGoalInterp(const FVector& NewEndLoc);
    virtual void StopGoalInterp();
    DECLARE_FUNCTION(execSetSmoothLocationWithGoalInterp)
    {
        P_GET_STRUCT_REF(FVector,StartLoc);
        P_GET_STRUCT_REF(FVector,EndLoc);
        P_GET_FLOAT(MoveTime);
        P_FINISH;
        SetSmoothLocationWithGoalInterp(StartLoc,EndLoc,MoveTime);
    }
    DECLARE_FUNCTION(execUpdateSmoothLocationWithGoalInterp)
    {
        P_GET_STRUCT_REF(FVector,NewEndLoc);
        P_FINISH;
        UpdateSmoothLocationWithGoalInterp(NewEndLoc);
    }
    DECLARE_FUNCTION(execStopGoalInterp)
    {
        P_FINISH;
        StopGoalInterp();
    }
    DECLARE_CLASS(UUTWalkerStepHandle,URB_Handle,0,UTGame)
protected:
	virtual void Tick(FLOAT DeltaTime);
public:
};

class UUTVehicleSimTank : public USVehicleSimTank
{
public:
    //## BEGIN PROPS UTVehicleSimTank
    BITFIELD bForceOnTarget:1 GCC_BITFIELD_MAGIC;
    FLOAT FrontalCollisionGripFactor;
    //## END PROPS UTVehicleSimTank

    DECLARE_CLASS(UUTVehicleSimTank,USVehicleSimTank,0,UTGame)
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
};

class UUTVehicleSimCar : public USVehicleSimCar
{
public:
    //## BEGIN PROPS UTVehicleSimCar
    FInterpCurveFloat TorqueVSpeedCurve;
    FInterpCurveFloat EngineRPMCurve;
    FLOAT LSDFactor;
    FLOAT ThrottleSpeed;
    FLOAT MinRPM;
    FLOAT MaxRPM;
    FLOAT ActualThrottle;
    BITFIELD bForceThrottle:1;
    BITFIELD bHasForcedThrottle:1;
    BITFIELD bDriverlessBraking:1;
    BITFIELD bAutoHandbrake:1;
    FLOAT SteeringReductionFactor;
    FLOAT SteeringReductionRampUpRate;
    FLOAT CurrentSteeringReduction;
    INT NumWheelsForFullSteering;
    FLOAT SteeringReductionSpeed;
    FLOAT SteeringReductionMinSpeed;
    FLOAT MinHardTurnSpeed;
    FLOAT HardTurnMotorTorque;
    FLOAT FrontalCollisionGripFactor;
    FLOAT ConsoleHardTurnGripFactor;
    //## END PROPS UTVehicleSimCar

    DECLARE_CLASS(UUTVehicleSimCar,USVehicleSimCar,0,UTGame)
	// SVehicleSimBase interface.
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	virtual float GetEngineOutput(ASVehicle* Vehicle);
	virtual void ProcessCarInput(ASVehicle* Vehicle);
	virtual void UpdateHandbrake(ASVehicle* Vehicle);
};

class UUTVehicleSimChopper : public USVehicleSimBase
{
public:
    //## BEGIN PROPS UTVehicleSimChopper
    FLOAT MaxThrustForce;
    FLOAT MaxReverseForce;
    FLOAT LongDamping;
    FLOAT MaxStrafeForce;
    FLOAT LatDamping;
    FLOAT MaxRiseForce;
    FLOAT UpDamping;
    FLOAT TurnTorqueFactor;
    FLOAT TurnTorqueMax;
    FLOAT TurnDamping;
    FLOAT MaxYawRate;
    FLOAT PitchTorqueFactor;
    FLOAT PitchTorqueMax;
    FLOAT PitchDamping;
    FLOAT RollTorqueTurnFactor;
    FLOAT RollTorqueStrafeFactor;
    FLOAT RollTorqueMax;
    FLOAT RollDamping;
    FLOAT StopThreshold;
    FLOAT MaxRandForce;
    FLOAT RandForceInterval;
    BITFIELD bAllowZThrust:1;
    BITFIELD bFullThrustOnDirectionChange:1;
    BITFIELD bShouldCutThrustMaxOnImpact:1;
    BITFIELD bRecentlyHit:1;
    BITFIELD bStrafeAffectsTurnDamping:1;
    BITFIELD bHeadingInitialized:1;
    BITFIELD bStabilizeStops:1;
    FLOAT StrafeTurnDamping;
    FLOAT TargetHeading;
    FLOAT TargetPitch;
    FLOAT PitchViewCorrelation;
    FVector RandForce;
    FVector RandTorque;
    FLOAT AccumulatedTime;
    FLOAT StabilizationForceMultiplier;
    FLOAT CurrentStabilizationMultiplier;
    FVector OldVelocity;
    //## END PROPS UTVehicleSimChopper

    DECLARE_CLASS(UUTVehicleSimChopper,USVehicleSimBase,0,UTGame)
	virtual void ProcessCarInput(ASVehicle* Vehicle);
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	virtual FVector StabilizationForce(ASVehicle* Vehicle, FLOAT DeltaTime, UBOOL bShouldStabilize);
	virtual FVector StabilizationTorque(ASVehicle* Vehicle, FLOAT DeltaTime, UBOOL bShouldStabilize);
	float GetEngineOutput(ASVehicle* Vehicle);
	virtual void GetRotationAxes(ASVehicle* Vehicle, FVector &DirX, FVector &DirY, FVector &DirZ);
};

class UUTVehicleSimHover : public UUTVehicleSimChopper
{
public:
    //## BEGIN PROPS UTVehicleSimHover
    BITFIELD bDisableWheelsWhenOff:1;
    BITFIELD bRepulsorCollisionEnabled:1;
    BITFIELD bCanClimbSlopes:1;
    BITFIELD bUnPoweredDriving:1;
    //## END PROPS UTVehicleSimHover

    DECLARE_CLASS(UUTVehicleSimHover,UUTVehicleSimChopper,0,UTGame)
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	float GetEngineOutput(ASVehicle* Vehicle);
	virtual void GetRotationAxes(ASVehicle* Vehicle, FVector &DirX, FVector &DirY, FVector &DirZ);
};

class UUTVehicleSimHoverboard : public USVehicleSimBase
{
public:
    //## BEGIN PROPS UTVehicleSimHoverboard
    FLOAT MaxThrustForce;
    FLOAT MaxReverseForce;
    FLOAT MaxReverseVelocity;
    FLOAT LongDamping;
    FLOAT MaxStrafeForce;
    FLOAT LatDamping;
    FLOAT MaxRiseForce;
    FLOAT TurnTorqueFactor;
    FLOAT SpinTurnTorqueScale;
    FLOAT MaxTurnTorque;
    FInterpCurveFloat TurnDampingSpeedFunc;
    FLOAT StopThreshold;
    BITFIELD bHeadingInitialized:1;
    FLOAT TargetHeading;
    //## END PROPS UTVehicleSimHoverboard

    DECLARE_CLASS(UUTVehicleSimHoverboard,USVehicleSimBase,0,UTGame)
    virtual void ProcessCarInput(ASVehicle* Vehicle);
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	float GetEngineOutput(ASVehicle* Vehicle);
};

class UUTVehicleSimHoverTank : public USVehicleSimBase
{
public:
    //## BEGIN PROPS UTVehicleSimHoverTank
    FLOAT MaxThrustForce;
    FLOAT MaxReverseForce;
    FLOAT LongDamping;
    FLOAT LatDamping;
    FLOAT TurnTorqueMax;
    FLOAT TurnDamping;
    BITFIELD bWasReversedSteering:1;
    BITFIELD bStabilizeStops:1;
    BITFIELD bHeadingInitialized:1;
    BITFIELD bTurnInPlaceOnSteer:1;
    FLOAT StopThreshold;
    FLOAT DrivingGroundDist;
    FLOAT ParkedGroundDist;
    FLOAT CurrentGroundDist;
    FLOAT GroundDistAdjustSpeed;
    FLOAT WheelAdjustFactor;
    FLOAT StabilizationForceMultiplier;
    FLOAT CurrentStabilizationMultiplier;
    FVector OldVelocity;
    FLOAT TargetHeading;
    //## END PROPS UTVehicleSimHoverTank

    DECLARE_CLASS(UUTVehicleSimHoverTank,USVehicleSimBase,0,UTGame)
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	virtual void ProcessCarInput(ASVehicle* Vehicle);
	float GetEngineOutput(ASVehicle* Vehicle);
	virtual FVector StabilizationForce(ASVehicle* Vehicle, FLOAT DeltaTime, UBOOL bShouldStabilize);
	virtual FVector StabilizationTorque(ASVehicle* Vehicle, FLOAT DeltaTime, UBOOL bShouldStabilize);
};

struct UTVehicleWheel_eventSetParticleEffect_Parms
{
    class AUTVehicle* OwnerVehicle;
    class UParticleSystem* NewTemplate;
    UTVehicleWheel_eventSetParticleEffect_Parms(EEventParm)
    {
    }
};
class UUTVehicleWheel : public USVehicleWheel
{
public:
    //## BEGIN PROPS UTVehicleWheel
    BITFIELD bUseMaterialSpecificEffects:1;
    class UParticleSystemComponent* OldWheelParticleComp;
    FLOAT EffectDesiredSpinDir;
    //## END PROPS UTVehicleWheel

    void eventSetParticleEffect(class AUTVehicle* OwnerVehicle,class UParticleSystem* NewTemplate)
    {
        UTVehicleWheel_eventSetParticleEffect_Parms Parms(EC_EventParm);
        Parms.OwnerVehicle=OwnerVehicle;
        Parms.NewTemplate=NewTemplate;
        ProcessEvent(FindFunctionChecked(UTGAME_SetParticleEffect),&Parms);
    }
    DECLARE_CLASS(UUTVehicleWheel,USVehicleWheel,0,UTGame)
	/** @return whether this wheel should have a particle component attached to it */
	virtual UBOOL WantsParticleComponent();
};

#endif

AUTOGENERATE_FUNCTION(AUTAirVehicle,-1,execGetGravityZ);
AUTOGENERATE_FUNCTION(AUTProj_SPMACamera,-1,execKillTrajectory);
AUTOGENERATE_FUNCTION(AUTProj_SPMACamera,-1,execSimulateTrajectory);
AUTOGENERATE_FUNCTION(AUTProj_SPMACamera,-1,execGetCurrentTargetLocation);
AUTOGENERATE_FUNCTION(AUTStealthVehicle,-1,execSetArmLocation);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execApplyMorphDamage);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execUpdateDamageMaterial);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execInitDamageSkel);
AUTOGENERATE_FUNCTION(AUTVehicle,999,execIsSeatControllerReplicationViewer);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execGetBarrelIndex);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execGetSeatPivotPoint);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execForceWeaponRotation);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execSeatFiringMode);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execSeatFlashCount);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execSeatFlashLocation);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execSeatWeaponRotation);
AUTOGENERATE_FUNCTION(AUTVehicle_DarkWalker,-1,execPlayWarningSoundIfInCone);
AUTOGENERATE_FUNCTION(AUTVehicle_Fury,-1,execBoostTo);
AUTOGENERATE_FUNCTION(AUTVehicle_Fury,-1,execBoost);
AUTOGENERATE_FUNCTION(AUTVehicle_Hoverboard,-1,execAttachTowCable);
AUTOGENERATE_FUNCTION(AUTVehicle_Leviathan,-1,execGetTargetLocation);
AUTOGENERATE_FUNCTION(AUTVehicle_NightShade,-1,execIsInvisible);
AUTOGENERATE_FUNCTION(AUTVehicle_Scavenger,-1,execInitStayUpright);
AUTOGENERATE_FUNCTION(AUTVehicle_Scavenger,-1,execImpactEffect);
AUTOGENERATE_FUNCTION(AUTVehicle_Scorpion,-1,execReadyToSelfDestruct);
AUTOGENERATE_FUNCTION(AUTVehicleFactory_TrackTurretBase,-1,execForceTurretStop);
AUTOGENERATE_FUNCTION(AUTVehicleFactory_TrackTurretBase,-1,execResetTurret);
AUTOGENERATE_FUNCTION(AUTVehicleFactory_TrackTurretBase,-1,execTurretDeathReset);
AUTOGENERATE_FUNCTION(AUTWalkerBody,-1,execDoTestStep);
AUTOGENERATE_FUNCTION(AUTWalkerBody,-1,execInitFeet);
AUTOGENERATE_FUNCTION(UUTWalkerStepHandle,-1,execStopGoalInterp);
AUTOGENERATE_FUNCTION(UUTWalkerStepHandle,-1,execUpdateSmoothLocationWithGoalInterp);
AUTOGENERATE_FUNCTION(UUTWalkerStepHandle,-1,execSetSmoothLocationWithGoalInterp);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef UTGAME_VEHICLE_NATIVE_DEFS
#define UTGAME_VEHICLE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(UTGame,AUTAirVehicle);
DECLARE_NATIVE_TYPE(UTGame,AUTHoverVehicle);
DECLARE_NATIVE_TYPE(UTGame,AUTProj_SPMACamera);
DECLARE_NATIVE_TYPE(UTGame,AUTStealthVehicle);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Cicada);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_DarkWalker);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Deployable);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Fury);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Goliath);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_HellBender);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Hoverboard);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Leviathan);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Manta);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_NightShade);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Raptor);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Scavenger);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Scorpion);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_SPMA);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_StealthBender);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_TrackTurretBase);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Viper);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Walker);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicleBase);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicleFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicleFactory_TrackTurretBase);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleSimCar);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleSimChopper);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleSimHover);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleSimHoverboard);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleSimHoverTank);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleSimTank);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicleWeapon);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleWheel);
DECLARE_NATIVE_TYPE(UTGame,AUTVWeap_NightshadeGun);
DECLARE_NATIVE_TYPE(UTGame,AUTVWeap_SPMACannon);
DECLARE_NATIVE_TYPE(UTGame,AUTVWeap_TowCable);
DECLARE_NATIVE_TYPE(UTGame,AUTWalkerBody);
DECLARE_NATIVE_TYPE(UTGame,AUTWalkerBody_Scavenger);
DECLARE_NATIVE_TYPE(UTGame,UUTWalkerStepHandle);
DECLARE_NATIVE_TYPE(UTGame,AUTWeaponPawn);
DECLARE_NATIVE_TYPE(UTGame,AVehicleMovementEffect);

#define AUTO_INITIALIZE_REGISTRANTS_UTGAME_VEHICLE \
	AUTAirVehicle::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTAirVehicleNative; \
	AUTHoverVehicle::StaticClass(); \
	AUTProj_SPMACamera::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTProj_SPMACameraNative; \
	AUTStealthVehicle::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTStealthVehicleNative; \
	AUTVehicle::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicleNative; \
	AUTVehicle_Cicada::StaticClass(); \
	AUTVehicle_DarkWalker::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicle_DarkWalkerNative; \
	AUTVehicle_Deployable::StaticClass(); \
	AUTVehicle_Fury::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicle_FuryNative; \
	AUTVehicle_Goliath::StaticClass(); \
	AUTVehicle_HellBender::StaticClass(); \
	AUTVehicle_Hoverboard::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicle_HoverboardNative; \
	AUTVehicle_Leviathan::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicle_LeviathanNative; \
	AUTVehicle_Manta::StaticClass(); \
	AUTVehicle_NightShade::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicle_NightShadeNative; \
	AUTVehicle_Raptor::StaticClass(); \
	AUTVehicle_Scavenger::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicle_ScavengerNative; \
	AUTVehicle_Scorpion::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicle_ScorpionNative; \
	AUTVehicle_SPMA::StaticClass(); \
	AUTVehicle_StealthBender::StaticClass(); \
	AUTVehicle_TrackTurretBase::StaticClass(); \
	AUTVehicle_Viper::StaticClass(); \
	AUTVehicle_Walker::StaticClass(); \
	AUTVehicleBase::StaticClass(); \
	AUTVehicleFactory::StaticClass(); \
	AUTVehicleFactory_TrackTurretBase::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicleFactory_TrackTurretBaseNative; \
	UUTVehicleSimCar::StaticClass(); \
	UUTVehicleSimChopper::StaticClass(); \
	UUTVehicleSimHover::StaticClass(); \
	UUTVehicleSimHoverboard::StaticClass(); \
	UUTVehicleSimHoverTank::StaticClass(); \
	UUTVehicleSimTank::StaticClass(); \
	AUTVehicleWeapon::StaticClass(); \
	UUTVehicleWheel::StaticClass(); \
	AUTVWeap_NightshadeGun::StaticClass(); \
	AUTVWeap_SPMACannon::StaticClass(); \
	AUTVWeap_TowCable::StaticClass(); \
	AUTWalkerBody::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTWalkerBodyNative; \
	AUTWalkerBody_Scavenger::StaticClass(); \
	UUTWalkerStepHandle::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTWalkerStepHandleNative; \
	AUTWeaponPawn::StaticClass(); \
	AVehicleMovementEffect::StaticClass(); \

#endif // UTGAME_VEHICLE_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(AUTAirVehicle) GUTGameAUTAirVehicleNatives[] = 
{ 
	MAP_NATIVE(AUTAirVehicle,execGetGravityZ)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTAirVehicle);

NATIVE_INFO(AUTProj_SPMACamera) GUTGameAUTProj_SPMACameraNatives[] = 
{ 
	MAP_NATIVE(AUTProj_SPMACamera,execKillTrajectory)
	MAP_NATIVE(AUTProj_SPMACamera,execSimulateTrajectory)
	MAP_NATIVE(AUTProj_SPMACamera,execGetCurrentTargetLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTProj_SPMACamera);

NATIVE_INFO(AUTStealthVehicle) GUTGameAUTStealthVehicleNatives[] = 
{ 
	MAP_NATIVE(AUTStealthVehicle,execSetArmLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTStealthVehicle);

NATIVE_INFO(AUTVehicle) GUTGameAUTVehicleNatives[] = 
{ 
	MAP_NATIVE(AUTVehicle,execApplyMorphDamage)
	MAP_NATIVE(AUTVehicle,execUpdateDamageMaterial)
	MAP_NATIVE(AUTVehicle,execInitDamageSkel)
	MAP_NATIVE(AUTVehicle,execIsSeatControllerReplicationViewer)
	MAP_NATIVE(AUTVehicle,execGetBarrelIndex)
	MAP_NATIVE(AUTVehicle,execGetSeatPivotPoint)
	MAP_NATIVE(AUTVehicle,execForceWeaponRotation)
	MAP_NATIVE(AUTVehicle,execSeatFiringMode)
	MAP_NATIVE(AUTVehicle,execSeatFlashCount)
	MAP_NATIVE(AUTVehicle,execSeatFlashLocation)
	MAP_NATIVE(AUTVehicle,execSeatWeaponRotation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicle);

NATIVE_INFO(AUTVehicle_DarkWalker) GUTGameAUTVehicle_DarkWalkerNatives[] = 
{ 
	MAP_NATIVE(AUTVehicle_DarkWalker,execPlayWarningSoundIfInCone)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicle_DarkWalker);

NATIVE_INFO(AUTVehicle_Fury) GUTGameAUTVehicle_FuryNatives[] = 
{ 
	MAP_NATIVE(AUTVehicle_Fury,execBoostTo)
	MAP_NATIVE(AUTVehicle_Fury,execBoost)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicle_Fury);

NATIVE_INFO(AUTVehicle_Hoverboard) GUTGameAUTVehicle_HoverboardNatives[] = 
{ 
	MAP_NATIVE(AUTVehicle_Hoverboard,execAttachTowCable)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicle_Hoverboard);

NATIVE_INFO(AUTVehicle_Leviathan) GUTGameAUTVehicle_LeviathanNatives[] = 
{ 
	MAP_NATIVE(AUTVehicle_Leviathan,execGetTargetLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicle_Leviathan);

NATIVE_INFO(AUTVehicle_NightShade) GUTGameAUTVehicle_NightShadeNatives[] = 
{ 
	MAP_NATIVE(AUTVehicle_NightShade,execIsInvisible)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicle_NightShade);

NATIVE_INFO(AUTVehicle_Scavenger) GUTGameAUTVehicle_ScavengerNatives[] = 
{ 
	MAP_NATIVE(AUTVehicle_Scavenger,execInitStayUpright)
	MAP_NATIVE(AUTVehicle_Scavenger,execImpactEffect)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicle_Scavenger);

NATIVE_INFO(AUTVehicle_Scorpion) GUTGameAUTVehicle_ScorpionNatives[] = 
{ 
	MAP_NATIVE(AUTVehicle_Scorpion,execReadyToSelfDestruct)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicle_Scorpion);

NATIVE_INFO(AUTVehicleFactory_TrackTurretBase) GUTGameAUTVehicleFactory_TrackTurretBaseNatives[] = 
{ 
	MAP_NATIVE(AUTVehicleFactory_TrackTurretBase,execForceTurretStop)
	MAP_NATIVE(AUTVehicleFactory_TrackTurretBase,execResetTurret)
	MAP_NATIVE(AUTVehicleFactory_TrackTurretBase,execTurretDeathReset)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicleFactory_TrackTurretBase);

NATIVE_INFO(AUTWalkerBody) GUTGameAUTWalkerBodyNatives[] = 
{ 
	MAP_NATIVE(AUTWalkerBody,execDoTestStep)
	MAP_NATIVE(AUTWalkerBody,execInitFeet)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTWalkerBody);

NATIVE_INFO(UUTWalkerStepHandle) GUTGameUUTWalkerStepHandleNatives[] = 
{ 
	MAP_NATIVE(UUTWalkerStepHandle,execStopGoalInterp)
	MAP_NATIVE(UUTWalkerStepHandle,execUpdateSmoothLocationWithGoalInterp)
	MAP_NATIVE(UUTWalkerStepHandle,execSetSmoothLocationWithGoalInterp)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTWalkerStepHandle);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(A,UTAirVehicle,ContrailEffectIndices)
VERIFY_CLASS_OFFSET_NODIE(A,UTAirVehicle,LastRadarLockWarnTime)
VERIFY_CLASS_SIZE_NODIE(AUTAirVehicle)
VERIFY_CLASS_OFFSET_NODIE(A,UTHoverVehicle,GroundEffectIndices)
VERIFY_CLASS_OFFSET_NODIE(A,UTHoverVehicle,FullAirSpeed)
VERIFY_CLASS_SIZE_NODIE(AUTHoverVehicle)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_SPMACamera,InstigatorGun)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_SPMACamera,LastTargetVelocity)
VERIFY_CLASS_SIZE_NODIE(AUTProj_SPMACamera)
VERIFY_CLASS_OFFSET_NODIE(A,UTStealthVehicle,TurretName)
VERIFY_CLASS_OFFSET_NODIE(A,UTStealthVehicle,TurretArmMoveSound)
VERIFY_CLASS_SIZE_NODIE(AUTStealthVehicle)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle,VehicleLockedSound)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle,ReferenceMovementMesh)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Cicada,TurretFlashLocation)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Cicada,JetScalingParam)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Cicada)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_DarkWalker,TurretFlashCount)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_DarkWalker,CustomEntryRadius)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_DarkWalker)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Deployable,DeployedState)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Deployable,MaxDeploySpeed)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Deployable)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Fury,AnimPlayer)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Fury,CustomEntryRadius)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Fury)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Goliath,LeftTreadMaterialInstance)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Goliath,AntennaBeamControl)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Goliath)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_HellBender,TurretFlashLocation)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_HellBender,BeamTemplate)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_HellBender)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Hoverboard,HoverboardMesh)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Hoverboard,FallingDamageRagdollThreshold)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Hoverboard)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Leviathan,LFTurretFlashLocation)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Leviathan,TurretExplosionTemplate)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Leviathan)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Manta,JumpForceMag)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Manta,CrouchedAirSpeed)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Manta)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_NightShade)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Raptor,TurretPivotSocketName)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Raptor,TeamMF)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Raptor)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Scavenger,JumpForceMag)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Scavenger,ThrusterRightTemplate)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Scavenger)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Scorpion,BladeBlend)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Scorpion,HatchGibClass)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Scorpion)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_SPMA,TreadMaterialInstance)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_SPMA,DeployedCameraOffset)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_SPMA)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_StealthBender)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_TrackTurretBase,TurretMoveStart)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_TrackTurretBase,TurretMoveStop)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_TrackTurretBase)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Viper,JumpDuration)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Viper,CurveSound)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Viper)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Walker,CurrentStance)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Walker,SuspensionTravelAdjustSpeed)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Walker)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleBase,PawnHudScene)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleBase,HudCoords)
VERIFY_CLASS_SIZE_NODIE(AUTVehicleBase)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleFactory,VehicleClass)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleFactory,TeamSpawningControl)
VERIFY_CLASS_SIZE_NODIE(AUTVehicleFactory)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleFactory_TrackTurretBase,MoverBase)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleFactory_TrackTurretBase,LastThrottle)
VERIFY_CLASS_SIZE_NODIE(AUTVehicleFactory_TrackTurretBase)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimCar,TorqueVSpeedCurve)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimCar,ConsoleHardTurnGripFactor)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleSimCar)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimChopper,MaxThrustForce)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimChopper,OldVelocity)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleSimChopper)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleSimHover)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimHoverboard,MaxThrustForce)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimHoverboard,TargetHeading)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleSimHoverboard)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimHoverTank,MaxThrustForce)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimHoverTank,TargetHeading)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleSimHoverTank)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimTank,FrontalCollisionGripFactor)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleSimTank)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleWeapon,SeatIndex)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleWeapon,VehicleClass)
VERIFY_CLASS_SIZE_NODIE(AUTVehicleWeapon)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleWheel,OldWheelParticleComp)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleWheel,EffectDesiredSpinDir)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleWheel)
VERIFY_CLASS_OFFSET_NODIE(A,UTVWeap_NightshadeGun,DeployableList)
VERIFY_CLASS_OFFSET_NODIE(A,UTVWeap_NightshadeGun,DeployedItemSound)
VERIFY_CLASS_SIZE_NODIE(AUTVWeap_NightshadeGun)
VERIFY_CLASS_OFFSET_NODIE(A,UTVWeap_SPMACannon,RemoteCamera)
VERIFY_CLASS_OFFSET_NODIE(A,UTVWeap_SPMACannon,BoomSound)
VERIFY_CLASS_SIZE_NODIE(AUTVWeap_SPMACannon)
VERIFY_CLASS_OFFSET_NODIE(A,UTVWeap_TowCable,LastLinkStartTime)
VERIFY_CLASS_OFFSET_NODIE(A,UTVWeap_TowCable,CrossHairTexture)
VERIFY_CLASS_SIZE_NODIE(AUTVWeap_TowCable)
VERIFY_CLASS_OFFSET_NODIE(A,UTWalkerBody,SkeletalMeshComponent)
VERIFY_CLASS_OFFSET_NODIE(A,UTWalkerBody,PreviousTraceSeedLocation)
VERIFY_CLASS_SIZE_NODIE(AUTWalkerBody)
VERIFY_CLASS_OFFSET_NODIE(A,UTWalkerBody_Scavenger,PawnGrabber)
VERIFY_CLASS_OFFSET_NODIE(A,UTWalkerBody_Scavenger,SphereCenterName)
VERIFY_CLASS_SIZE_NODIE(AUTWalkerBody_Scavenger)
VERIFY_CLASS_OFFSET_NODIE(U,UTWalkerStepHandle,InterpFactor)
VERIFY_CLASS_OFFSET_NODIE(U,UTWalkerStepHandle,GoalInterpStartLoc)
VERIFY_CLASS_SIZE_NODIE(UUTWalkerStepHandle)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponPawn,MyVehicleWeapon)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponPawn,MySeatIndex)
VERIFY_CLASS_SIZE_NODIE(AUTWeaponPawn)
VERIFY_CLASS_OFFSET_NODIE(A,VehicleMovementEffect,AirEffect)
VERIFY_CLASS_OFFSET_NODIE(A,VehicleMovementEffect,AirCurrentLevel)
VERIFY_CLASS_SIZE_NODIE(AVehicleMovementEffect)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
