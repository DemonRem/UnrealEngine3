//------------------------------------------------------------------------------
// The parameters for the gesture generation.
// 
// Owner: John Briggs
//
// Copyright (c) 2002-2006 OC3 Entertainment, Inc.
//------------------------------------------------------------------------------

#ifndef FxGestureConfig_H__
#define FxGestureConfig_H__

#include "FxPlatform.h"
#include "FxArray.h"
#include "FxNamedObject.h"
#include "FxRandomGenerator.h"

namespace OC3Ent
{

namespace Face
{

FxSize FxCGGetNumSpeechGestureTracks();
FxName FxCGGetSpeechGestureTrackName(FxSize trackIndex);

enum FxStressCategory
{
	SC_Unknown = -1,
	SC_Initial = 0,
	SC_Quick,
	SC_Normal,
	SC_Isolated,
	SC_Final,

	SC_First = SC_Initial,
	SC_Last = SC_Final,
	SC_NumCategories = SC_Last - SC_First + 1
};

// The tracks generated by the gesture system.
enum FxGestureTrack
{
	GT_Invalid = -1,

	GT_OrientationHeadPitch = 0,
	GT_OrientationHeadRoll,
	GT_OrientationHeadYaw,

	GT_GazeEyePitch,
	GT_GazeEyeYaw,

	GT_EmphasisHeadPitch,
	GT_EmphasisHeadRoll,
	GT_EmphasisHeadYaw,

	GT_EyebrowRaise,
	GT_Blink,

	GT_OrientationFirst = GT_OrientationHeadPitch,
	GT_OrientationLast  = GT_OrientationHeadYaw,
	GT_GazeFirst		= GT_GazeEyePitch,
	GT_GazeLast			= GT_GazeEyeYaw,
	GT_EmphasisFirst    = GT_EmphasisHeadPitch,
	GT_EmphasisLast		= GT_Blink,

	GT_First = GT_OrientationHeadPitch,
	GT_Last = GT_Blink,

	GT_NumTracks = GT_Last - GT_First + 1,
	GT_NumEmphasisTracks = GT_EmphasisLast - GT_EmphasisFirst + 1
};

// An orientation drift property.
struct FxDriftProperty
{
	FxDriftProperty();
	FxDriftProperty( FxGestureTrack iTrack, FxReal iProb, FxCentredRange iRange );

	FxGestureTrack track;
	FxReal probability;
	FxCentredRange valueRange;
};

// The emphasis action animations generated by the system.
enum FxEmphasisAction
{
	EA_Invalid = -1,
	EA_StrongHeadNod = 0,
	EA_InvertedHeadNod,
	EA_QuickHeadNod,
	EA_NormalHeadNod,
	EA_EyebrowRaise,
	EA_HeadTilt,
	EA_HeadTurn,
	EA_NoAction,

	EA_First = EA_StrongHeadNod,
	EA_Last  = EA_NoAction,
	EA_NumActions = EA_Last - EA_First + 1
};

// A track in an emphasis action.
struct FxEmphasisActionTrack
{
	FxEmphasisActionTrack()
		: track(GT_Invalid)
		, lead(FxCentredRange(0.0f, 0.0f))
		, centre(FxCentredRange(0.0f, 0.0f))
		, tail(FxCentredRange(0.0f, 0.0f))
		, value(0.0f)
		, probability(0.0f)
	{
	}
	FxEmphasisActionTrack( FxGestureTrack iTrack, FxCentredRange iLead, FxCentredRange iCentre, FxCentredRange iTail, FxReal iValue, FxReal iProbability)
		: track(iTrack)
		, lead(iLead)
		, centre(iCentre)
		, tail(iTail)
		, value(iValue)
		, probability(iProbability)
	{
	}
	FxGestureTrack track;
	FxCentredRange lead;
	FxCentredRange centre;
	FxCentredRange tail;
	FxReal value;
	FxReal probability;
};

// An emphasis action.
struct FxEmphasisActionAnim
{
	FxEmphasisActionAnim()
		: action(EA_Invalid)
		, valueScale(FxRange(0.0f, 0.0f))
	{
	}
	FxEmphasisActionAnim( FxEmphasisAction iAction, FxRange iValueScale ) 
		: action(iAction)
		, valueScale(iValueScale)
	{
	}
	FxEmphasisAction action;
	FxArray<FxEmphasisActionTrack> tracks;
	FxRange valueScale;
};

// The configuration for the gesture system.
class FxGestureConfig : public FxNamedObject
{
	// Declare the class.
	FX_DECLARE_CLASS(FxGestureConfig, FxNamedObject);

public:
	FxGestureConfig();

	// Power and frequency extraction.
	FxRange pfeAllowedFrequency;
	FxInt32 pfeAvgPitchUpperNumSteps;
	FxInt32 pfeAvgPitchLowerNumSteps;
	FxInt32 pfePowerNumAdjacentPhones;
	FxReal	pfePowerMaxWindowLength;
	FxReal  pfeAvgPowerContribution;
	FxReal  pfeMaxPowerContribution;
	FxReal  pfeHighPitchBonus;
	FxReal  pfeLongDurationBonus;
	FxInt32  pfeRateOfSpeechNumAdjacentPhones;

	// Stress detection.
	FxReal sdStressThreshold;
	FxReal sdLongSilence;
	FxReal sdShortSilence;
	FxReal sdQuickStressLimit;
	FxReal sdIsolatedStressLimit;
	FxReal sdMinStressSeparation;

	// Rate of speech.
	FxRange rosAvgPhonemeDuration;
	FxRange rosTimeScale;

	// Orientation drift.
	FxRange odHeadDuration;
	FxRange odHeadTransition;
	FxRange odEyeDuration;
	FxRange odEyeTransition;
	FxArray<FxDriftProperty> odHeadProperties;
	FxArray<FxDriftProperty> odEyeProperties;

	// Emphasis actions.
	FxArray<FxEmphasisActionAnim> eaProperties;
	FxArray< FxArray<FxReal> > eaWeights;
	FxReal eaCentreShift;

	// Blinks
	FxRange blinkSeparation;
	FxCentredRange blinkLead;
	FxCentredRange blinkTail;

	// Broad gesture controls.
	FxReal gcSpeed;
	FxReal gcMagnitude;

	// Description
	FxString description;

	// Serialize the configuration
	void Serialize( FxArchive& arc );
};


// The intonation contours
enum FxIntonationContour
{
	IC_Unknown = 0,	// Unknown, either not computed or bad data for the phoneme.
	IC_Flat,		// Flat pitch.
	IC_Rising,		// Rising pitch.
	IC_Falling,		// Falling pitch.
	IC_Dip,			// Falling, then rising, pitch.
	IC_Hump			// Rising, then falling, pitch.
};

// The intonation relative pitches
enum FxIntonationRelativePitch
{
	IRP_Unknown = 0,	// Unknown, either not computer or bad data for the phoneme.
	IRP_Low,			// Lower than average pitch.
	IRP_Neutral,		// Pitch close to average.
	IRP_High			// Higher than average pitch.
};

// The stress information, on a per-vowel basis.
struct FxStressInformation
{
	FxSize		 phonemeIndex;

	FxReal		 startTime;
	FxReal		 endTime;
	FxReal		 duration;

	FxReal		 averagePower;
	FxReal		 minPower;
	FxReal		 maxPower;
	FxReal		 normalizedAvgPower;

	FxReal		 startPitch;
	FxReal		 midPitch;
	FxReal		 endPitch;
	FxReal		 averagePitch;

	FxIntonationContour contour;
	FxIntonationRelativePitch relativePitch;

	FxReal		 localRateOfSpeech;
	FxReal		 localTimeScale;

	FxStressCategory stressCategory;
};

/// Utility function to load a gesture config from a file on disc.
/// \param actor A reference to the gesture config to load into.
/// \param filename The path to the file on disc to load from.
/// \param bUseFastMethod If \p FxTrue FxArchiveStoreFileFast is used internally.
/// If \p FxFalse FxArchiveStoreFile is used.
/// \return \p FxTrue if successful, \p FxFalse otherwise.
/// \ingroup object
FxBool FX_CALL FxLoadGestureConfigFromFile( 
	FxGestureConfig& config, const FxChar* filename, const FxBool bUseFastMethod,
	void(FX_CALL *callbackFunction)(FxReal) = NULL, FxReal updateFrequency = 0.01f );

/// Utility function to save a gesture config to a file on disc.
/// \param actor A reference to the actor to save from.
/// \param filename The path to the file on disc to save to.
/// \param byteOrder The byte order to save in.
/// \return \p FxTrue if successful, \p FxFalse otherwise.
/// \ingroup object
FxBool FX_CALL FxSaveGestureConfigToFile( 
	FxGestureConfig& config, const FxChar* filename, 
	FxArchive::FxArchiveByteOrder byteOrder = FxArchive::ABO_LittleEndian,
	void(FX_CALL *callbackFunction)(FxReal) = NULL, FxReal updateFrequency = 0.01f );

/// Utility function to load a gesture config from a block of memory.
/// \param actor A reference to the gesture config to load into.
/// \param pMemory The array of bytes containing the data to load from.
/// \param numBytes The size, in bytes, of pMemory.
/// \return \p FxTrue if successful, \p FxFalse otherwise.
/// \ingroup object
FxBool FX_CALL FxLoadGestureConfigFromMemory( 
	FxGestureConfig& config, const FxByte* pMemory, const FxSize numBytes,
	void(FX_CALL *callbackFunction)(FxReal) = NULL, FxReal updateFrequency = 0.01f );

/// Utility function to save a gesture config to a block of memory.
/// \param actor A reference to the gesture config to save from.
/// \param pMemory A reference to a pointer that will hold the array of bytes
/// containing the actor data.  This must be NULL when passed in and will be
/// allocated internally via FxAlloc().  The client is responsible for freeing 
/// this memory and it must be freed via a call to FxFree().
/// \param numBytes Upon success, this is the size, in bytes, of pMemory.
/// \param byteOrder The byte order to save in.
/// \return \p FxTrue if successful, \p FxFalse otherwise.
/// \ingroup object
FxBool FX_CALL FxSaveGestureConfigToMemory( 
	FxGestureConfig& config,	FxByte*& pMemory, FxSize& numBytes, 
	FxArchive::FxArchiveByteOrder byteOrder = FxArchive::ABO_LittleEndian,
	void(FX_CALL *callbackFunction)(FxReal) = NULL, FxReal updateFrequency = 0.01f );

} // namespace Face

} // namespace OC3Ent

#endif
