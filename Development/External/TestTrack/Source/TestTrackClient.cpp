/* TestTrackClient.cpp
   Generated by gSOAP 2.7.10 from ttsoapcgi.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "TestTrackH.h"

SOAP_SOURCE_STAMP("@(#) TestTrackClient.cpp ver 2.7.10 2008-06-03 19:40:26 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDatabaseList(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct TT1__getDatabaseListResponse &_param_1)
{	struct TT1__getDatabaseList soap_tmp_TT1__getDatabaseList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getDatabaseList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getDatabaseList(soap, &soap_tmp_TT1__getDatabaseList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getDatabaseList(soap, &soap_tmp_TT1__getDatabaseList, "TT1:getDatabaseList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getDatabaseList(soap, &soap_tmp_TT1__getDatabaseList, "TT1:getDatabaseList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getDatabaseListResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getDatabaseListResponse(soap, &_param_1, "TT1:getDatabaseListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getProjectList(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *username, char *password, struct TT1__getProjectListResponse &_param_2)
{	struct TT1__getProjectList soap_tmp_TT1__getProjectList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getProjectList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getProjectList.username = username;
	soap_tmp_TT1__getProjectList.password = password;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getProjectList(soap, &soap_tmp_TT1__getProjectList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getProjectList(soap, &soap_tmp_TT1__getProjectList, "TT1:getProjectList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getProjectList(soap, &soap_tmp_TT1__getProjectList, "TT1:getProjectList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getProjectListResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getProjectListResponse(soap, &_param_2, "TT1:getProjectListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getProjectDataOptionList(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct TT1__getProjectDataOptionListResponse &_param_3)
{	struct TT1__getProjectDataOptionList soap_tmp_TT1__getProjectDataOptionList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getProjectDataOptionList(soap, &soap_tmp_TT1__getProjectDataOptionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getProjectDataOptionList(soap, &soap_tmp_TT1__getProjectDataOptionList, "TT1:getProjectDataOptionList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getProjectDataOptionList(soap, &soap_tmp_TT1__getProjectDataOptionList, "TT1:getProjectDataOptionList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getProjectDataOptionListResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getProjectDataOptionListResponse(soap, &_param_3, "TT1:getProjectDataOptionListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__DatabaseLogon(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *dbname, char *username, char *password, LONG64 &Cookie)
{	struct TT1__DatabaseLogon soap_tmp_TT1__DatabaseLogon;
	struct TT1__DatabaseLogonResponse *soap_tmp_TT1__DatabaseLogonResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#DatabaseLogon";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__DatabaseLogon.dbname = dbname;
	soap_tmp_TT1__DatabaseLogon.username = username;
	soap_tmp_TT1__DatabaseLogon.password = password;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__DatabaseLogon(soap, &soap_tmp_TT1__DatabaseLogon);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__DatabaseLogon(soap, &soap_tmp_TT1__DatabaseLogon, "TT1:DatabaseLogon", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__DatabaseLogon(soap, &soap_tmp_TT1__DatabaseLogon, "TT1:DatabaseLogon", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &Cookie);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__DatabaseLogonResponse = soap_get_TT1__DatabaseLogonResponse(soap, NULL, "TT1:DatabaseLogonResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Cookie = soap_tmp_TT1__DatabaseLogonResponse->Cookie;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__ProjectLogon(struct soap *soap, const char *soap_endpoint, const char *soap_action, TT1__CProject *pProj, char *username, char *password, LONG64 &Cookie)
{	struct TT1__ProjectLogon soap_tmp_TT1__ProjectLogon;
	struct TT1__ProjectLogonResponse *soap_tmp_TT1__ProjectLogonResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#ProjectLogon";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__ProjectLogon.pProj = pProj;
	soap_tmp_TT1__ProjectLogon.username = username;
	soap_tmp_TT1__ProjectLogon.password = password;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__ProjectLogon(soap, &soap_tmp_TT1__ProjectLogon);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__ProjectLogon(soap, &soap_tmp_TT1__ProjectLogon, "TT1:ProjectLogon", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__ProjectLogon(soap, &soap_tmp_TT1__ProjectLogon, "TT1:ProjectLogon", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &Cookie);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__ProjectLogonResponse = soap_get_TT1__ProjectLogonResponse(soap, NULL, "TT1:ProjectLogonResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Cookie = soap_tmp_TT1__ProjectLogonResponse->Cookie;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__DatabaseLogoff(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, int &result)
{	struct TT1__DatabaseLogoff soap_tmp_TT1__DatabaseLogoff;
	struct TT1__DatabaseLogoffResponse *soap_tmp_TT1__DatabaseLogoffResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#DatabaseLogoff";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__DatabaseLogoff.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__DatabaseLogoff(soap, &soap_tmp_TT1__DatabaseLogoff);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__DatabaseLogoff(soap, &soap_tmp_TT1__DatabaseLogoff, "TT1:DatabaseLogoff", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__DatabaseLogoff(soap, &soap_tmp_TT1__DatabaseLogoff, "TT1:DatabaseLogoff", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__DatabaseLogoffResponse = soap_get_TT1__DatabaseLogoffResponse(soap, NULL, "TT1:DatabaseLogoffResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__DatabaseLogoffResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTableList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getTableListResponse &_param_4)
{	struct TT1__getTableList soap_tmp_TT1__getTableList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getTableList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getTableList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getTableList(soap, &soap_tmp_TT1__getTableList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getTableList(soap, &soap_tmp_TT1__getTableList, "TT1:getTableList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getTableList(soap, &soap_tmp_TT1__getTableList, "TT1:getTableList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getTableListResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getTableListResponse(soap, &_param_4, "TT1:getTableListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDropdownFieldForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct TT1__getDropdownFieldForTableResponse &_param_5)
{	struct TT1__getDropdownFieldForTable soap_tmp_TT1__getDropdownFieldForTable;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getDropdownFieldForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getDropdownFieldForTable.cookie = cookie;
	soap_tmp_TT1__getDropdownFieldForTable.tablename = tablename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getDropdownFieldForTable(soap, &soap_tmp_TT1__getDropdownFieldForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getDropdownFieldForTable(soap, &soap_tmp_TT1__getDropdownFieldForTable, "TT1:getDropdownFieldForTable", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getDropdownFieldForTable(soap, &soap_tmp_TT1__getDropdownFieldForTable, "TT1:getDropdownFieldForTable", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getDropdownFieldForTableResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getDropdownFieldForTableResponse(soap, &_param_5, "TT1:getDropdownFieldForTableResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDropdownFieldValuesForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, char *fieldname, struct TT1__getDropdownFieldValuesForTableResponse &_param_6)
{	struct TT1__getDropdownFieldValuesForTable soap_tmp_TT1__getDropdownFieldValuesForTable;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getDropdownFieldValuesForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getDropdownFieldValuesForTable.cookie = cookie;
	soap_tmp_TT1__getDropdownFieldValuesForTable.tablename = tablename;
	soap_tmp_TT1__getDropdownFieldValuesForTable.fieldname = fieldname;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getDropdownFieldValuesForTable(soap, &soap_tmp_TT1__getDropdownFieldValuesForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getDropdownFieldValuesForTable(soap, &soap_tmp_TT1__getDropdownFieldValuesForTable, "TT1:getDropdownFieldValuesForTable", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getDropdownFieldValuesForTable(soap, &soap_tmp_TT1__getDropdownFieldValuesForTable, "TT1:getDropdownFieldValuesForTable", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getDropdownFieldValuesForTableResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getDropdownFieldValuesForTableResponse(soap, &_param_6, "TT1:getDropdownFieldValuesForTableResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addDropdownFieldValuesForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, char *fieldname, TT1ArrayOfCFieldValue *pValueList, int &result)
{	struct TT1__addDropdownFieldValuesForTable soap_tmp_TT1__addDropdownFieldValuesForTable;
	struct TT1__addDropdownFieldValuesForTableResponse *soap_tmp_TT1__addDropdownFieldValuesForTableResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#addDropdownFieldValuesForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addDropdownFieldValuesForTable.cookie = cookie;
	soap_tmp_TT1__addDropdownFieldValuesForTable.tablename = tablename;
	soap_tmp_TT1__addDropdownFieldValuesForTable.fieldname = fieldname;
	soap_tmp_TT1__addDropdownFieldValuesForTable.pValueList = pValueList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addDropdownFieldValuesForTable(soap, &soap_tmp_TT1__addDropdownFieldValuesForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addDropdownFieldValuesForTable(soap, &soap_tmp_TT1__addDropdownFieldValuesForTable, "TT1:addDropdownFieldValuesForTable", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addDropdownFieldValuesForTable(soap, &soap_tmp_TT1__addDropdownFieldValuesForTable, "TT1:addDropdownFieldValuesForTable", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addDropdownFieldValuesForTableResponse = soap_get_TT1__addDropdownFieldValuesForTableResponse(soap, NULL, "TT1:addDropdownFieldValuesForTableResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__addDropdownFieldValuesForTableResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__GetLinkDefinitionValues(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__GetLinkDefinitionValuesResponse &_param_7)
{	struct TT1__GetLinkDefinitionValues soap_tmp_TT1__GetLinkDefinitionValues;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#GetLinkDefinitionValues";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__GetLinkDefinitionValues.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__GetLinkDefinitionValues(soap, &soap_tmp_TT1__GetLinkDefinitionValues);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__GetLinkDefinitionValues(soap, &soap_tmp_TT1__GetLinkDefinitionValues, "TT1:GetLinkDefinitionValues", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__GetLinkDefinitionValues(soap, &soap_tmp_TT1__GetLinkDefinitionValues, "TT1:GetLinkDefinitionValues", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__GetLinkDefinitionValuesResponse(soap, &_param_7);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__GetLinkDefinitionValuesResponse(soap, &_param_7, "TT1:GetLinkDefinitionValuesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getColumnsForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct TT1__getColumnsForTableResponse &_param_8)
{	struct TT1__getColumnsForTable soap_tmp_TT1__getColumnsForTable;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getColumnsForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getColumnsForTable.cookie = cookie;
	soap_tmp_TT1__getColumnsForTable.tablename = tablename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getColumnsForTable(soap, &soap_tmp_TT1__getColumnsForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getColumnsForTable(soap, &soap_tmp_TT1__getColumnsForTable, "TT1:getColumnsForTable", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getColumnsForTable(soap, &soap_tmp_TT1__getColumnsForTable, "TT1:getColumnsForTable", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getColumnsForTableResponse(soap, &_param_8);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getColumnsForTableResponse(soap, &_param_8, "TT1:getColumnsForTableResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getFilterList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getFilterListResponse &_param_9)
{	struct TT1__getFilterList soap_tmp_TT1__getFilterList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getFilterList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getFilterList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getFilterList(soap, &soap_tmp_TT1__getFilterList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getFilterList(soap, &soap_tmp_TT1__getFilterList, "TT1:getFilterList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getFilterList(soap, &soap_tmp_TT1__getFilterList, "TT1:getFilterList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getFilterListResponse(soap, &_param_9);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getFilterListResponse(soap, &_param_9, "TT1:getFilterListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getFilterListForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct TT1__getFilterListForTableResponse &_param_10)
{	struct TT1__getFilterListForTable soap_tmp_TT1__getFilterListForTable;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getFilterListForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getFilterListForTable.cookie = cookie;
	soap_tmp_TT1__getFilterListForTable.tablename = tablename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getFilterListForTable(soap, &soap_tmp_TT1__getFilterListForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getFilterListForTable(soap, &soap_tmp_TT1__getFilterListForTable, "TT1:getFilterListForTable", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getFilterListForTable(soap, &soap_tmp_TT1__getFilterListForTable, "TT1:getFilterListForTable", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getFilterListForTableResponse(soap, &_param_10);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getFilterListForTableResponse(soap, &_param_10, "TT1:getFilterListForTableResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getRecordListForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, char *filtername, TT1ArrayOfCTableColumn *columnlist, struct TT1__getRecordListForTableResponse &_param_11)
{	struct TT1__getRecordListForTable soap_tmp_TT1__getRecordListForTable;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getRecordListForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getRecordListForTable.cookie = cookie;
	soap_tmp_TT1__getRecordListForTable.tablename = tablename;
	soap_tmp_TT1__getRecordListForTable.filtername = filtername;
	soap_tmp_TT1__getRecordListForTable.columnlist = columnlist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getRecordListForTable(soap, &soap_tmp_TT1__getRecordListForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getRecordListForTable(soap, &soap_tmp_TT1__getRecordListForTable, "TT1:getRecordListForTable", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getRecordListForTable(soap, &soap_tmp_TT1__getRecordListForTable, "TT1:getRecordListForTable", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getRecordListForTableResponse(soap, &_param_11);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getRecordListForTableResponse(soap, &_param_11, "TT1:getRecordListForTableResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *name, struct TT1__getTestConfigResponse &_param_12)
{	struct TT1__getTestConfig soap_tmp_TT1__getTestConfig;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getTestConfig.cookie = cookie;
	soap_tmp_TT1__getTestConfig.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getTestConfig(soap, &soap_tmp_TT1__getTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getTestConfig(soap, &soap_tmp_TT1__getTestConfig, "TT1:getTestConfig", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getTestConfig(soap, &soap_tmp_TT1__getTestConfig, "TT1:getTestConfig", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getTestConfigResponse(soap, &_param_12);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getTestConfigResponse(soap, &_param_12, "TT1:getTestConfigResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestConfigByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__getTestConfigByRecordIDResponse &_param_13)
{	struct TT1__getTestConfigByRecordID soap_tmp_TT1__getTestConfigByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getTestConfigByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getTestConfigByRecordID.cookie = cookie;
	soap_tmp_TT1__getTestConfigByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getTestConfigByRecordID(soap, &soap_tmp_TT1__getTestConfigByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getTestConfigByRecordID(soap, &soap_tmp_TT1__getTestConfigByRecordID, "TT1:getTestConfigByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getTestConfigByRecordID(soap, &soap_tmp_TT1__getTestConfigByRecordID, "TT1:getTestConfigByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getTestConfigByRecordIDResponse(soap, &_param_13);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getTestConfigByRecordIDResponse(soap, &_param_13, "TT1:getTestConfigByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CSystem *pTestConfig, LONG64 &recordID)
{	struct TT1__addTestConfig soap_tmp_TT1__addTestConfig;
	struct TT1__addTestConfigResponse *soap_tmp_TT1__addTestConfigResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#addTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addTestConfig.cookie = cookie;
	soap_tmp_TT1__addTestConfig.pTestConfig = pTestConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addTestConfig(soap, &soap_tmp_TT1__addTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addTestConfig(soap, &soap_tmp_TT1__addTestConfig, "TT1:addTestConfig", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addTestConfig(soap, &soap_tmp_TT1__addTestConfig, "TT1:addTestConfig", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addTestConfigResponse = soap_get_TT1__addTestConfigResponse(soap, NULL, "TT1:addTestConfigResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_TT1__addTestConfigResponse->recordID;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *name, struct TT1__editTestConfigResponse &_param_14)
{	struct TT1__editTestConfig soap_tmp_TT1__editTestConfig;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editTestConfig.cookie = cookie;
	soap_tmp_TT1__editTestConfig.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editTestConfig(soap, &soap_tmp_TT1__editTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editTestConfig(soap, &soap_tmp_TT1__editTestConfig, "TT1:editTestConfig", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editTestConfig(soap, &soap_tmp_TT1__editTestConfig, "TT1:editTestConfig", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editTestConfigResponse(soap, &_param_14);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editTestConfigResponse(soap, &_param_14, "TT1:editTestConfigResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestConfigByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__editTestConfigByRecordIDResponse &_param_15)
{	struct TT1__editTestConfigByRecordID soap_tmp_TT1__editTestConfigByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editTestConfigByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editTestConfigByRecordID.cookie = cookie;
	soap_tmp_TT1__editTestConfigByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editTestConfigByRecordID(soap, &soap_tmp_TT1__editTestConfigByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editTestConfigByRecordID(soap, &soap_tmp_TT1__editTestConfigByRecordID, "TT1:editTestConfigByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editTestConfigByRecordID(soap, &soap_tmp_TT1__editTestConfigByRecordID, "TT1:editTestConfigByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editTestConfigByRecordIDResponse(soap, &_param_15);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editTestConfigByRecordIDResponse(soap, &_param_15, "TT1:editTestConfigByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CSystem *pTestConfig, int &result)
{	struct TT1__saveTestConfig soap_tmp_TT1__saveTestConfig;
	struct TT1__saveTestConfigResponse *soap_tmp_TT1__saveTestConfigResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#saveTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__saveTestConfig.cookie = cookie;
	soap_tmp_TT1__saveTestConfig.pTestConfig = pTestConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__saveTestConfig(soap, &soap_tmp_TT1__saveTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__saveTestConfig(soap, &soap_tmp_TT1__saveTestConfig, "TT1:saveTestConfig", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__saveTestConfig(soap, &soap_tmp_TT1__saveTestConfig, "TT1:saveTestConfig", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__saveTestConfigResponse = soap_get_TT1__saveTestConfigResponse(soap, NULL, "TT1:saveTestConfigResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__saveTestConfigResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *name, int &result)
{	struct TT1__deleteTestConfig soap_tmp_TT1__deleteTestConfig;
	struct TT1__deleteTestConfigResponse *soap_tmp_TT1__deleteTestConfigResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteTestConfig.cookie = cookie;
	soap_tmp_TT1__deleteTestConfig.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteTestConfig(soap, &soap_tmp_TT1__deleteTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteTestConfig(soap, &soap_tmp_TT1__deleteTestConfig, "TT1:deleteTestConfig", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteTestConfig(soap, &soap_tmp_TT1__deleteTestConfig, "TT1:deleteTestConfig", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteTestConfigResponse = soap_get_TT1__deleteTestConfigResponse(soap, NULL, "TT1:deleteTestConfigResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteTestConfigResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestConfigByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__deleteTestConfigByRecordID soap_tmp_TT1__deleteTestConfigByRecordID;
	struct TT1__deleteTestConfigByRecordIDResponse *soap_tmp_TT1__deleteTestConfigByRecordIDResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteTestConfigByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteTestConfigByRecordID.cookie = cookie;
	soap_tmp_TT1__deleteTestConfigByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteTestConfigByRecordID(soap, &soap_tmp_TT1__deleteTestConfigByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteTestConfigByRecordID(soap, &soap_tmp_TT1__deleteTestConfigByRecordID, "TT1:deleteTestConfigByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteTestConfigByRecordID(soap, &soap_tmp_TT1__deleteTestConfigByRecordID, "TT1:deleteTestConfigByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteTestConfigByRecordIDResponse = soap_get_TT1__deleteTestConfigByRecordIDResponse(soap, NULL, "TT1:deleteTestConfigByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteTestConfigByRecordIDResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__cancelSaveTestConfig soap_tmp_TT1__cancelSaveTestConfig;
	struct TT1__cancelSaveTestConfigResponse *soap_tmp_TT1__cancelSaveTestConfigResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#cancelSaveTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__cancelSaveTestConfig.cookie = cookie;
	soap_tmp_TT1__cancelSaveTestConfig.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__cancelSaveTestConfig(soap, &soap_tmp_TT1__cancelSaveTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__cancelSaveTestConfig(soap, &soap_tmp_TT1__cancelSaveTestConfig, "TT1:cancelSaveTestConfig", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__cancelSaveTestConfig(soap, &soap_tmp_TT1__cancelSaveTestConfig, "TT1:cancelSaveTestConfig", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__cancelSaveTestConfigResponse = soap_get_TT1__cancelSaveTestConfigResponse(soap, NULL, "TT1:cancelSaveTestConfigResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__cancelSaveTestConfigResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getAttachmentTypes(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getAttachmentTypesResponse &_param_16)
{	struct TT1__getAttachmentTypes soap_tmp_TT1__getAttachmentTypes;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getAttachmentTypes";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getAttachmentTypes.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getAttachmentTypes(soap, &soap_tmp_TT1__getAttachmentTypes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getAttachmentTypes(soap, &soap_tmp_TT1__getAttachmentTypes, "TT1:getAttachmentTypes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getAttachmentTypes(soap, &soap_tmp_TT1__getAttachmentTypes, "TT1:getAttachmentTypes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getAttachmentTypesResponse(soap, &_param_16);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getAttachmentTypesResponse(soap, &_param_16, "TT1:getAttachmentTypesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getEventDefinitionList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct TT1__getEventDefinitionListResponse &_param_17)
{	struct TT1__getEventDefinitionList soap_tmp_TT1__getEventDefinitionList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getEventDefinitionList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getEventDefinitionList.cookie = cookie;
	soap_tmp_TT1__getEventDefinitionList.tablename = tablename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getEventDefinitionList(soap, &soap_tmp_TT1__getEventDefinitionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getEventDefinitionList(soap, &soap_tmp_TT1__getEventDefinitionList, "TT1:getEventDefinitionList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getEventDefinitionList(soap, &soap_tmp_TT1__getEventDefinitionList, "TT1:getEventDefinitionList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getEventDefinitionListResponse(soap, &_param_17);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getEventDefinitionListResponse(soap, &_param_17, "TT1:getEventDefinitionListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDefectEventDefinitionList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getDefectEventDefinitionListResponse &_param_18)
{	struct TT1__getDefectEventDefinitionList soap_tmp_TT1__getDefectEventDefinitionList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getDefectEventDefinitionList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getDefectEventDefinitionList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getDefectEventDefinitionList(soap, &soap_tmp_TT1__getDefectEventDefinitionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getDefectEventDefinitionList(soap, &soap_tmp_TT1__getDefectEventDefinitionList, "TT1:getDefectEventDefinitionList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getDefectEventDefinitionList(soap, &soap_tmp_TT1__getDefectEventDefinitionList, "TT1:getDefectEventDefinitionList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getDefectEventDefinitionListResponse(soap, &_param_18);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getDefectEventDefinitionListResponse(soap, &_param_18, "TT1:getDefectEventDefinitionListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getCustomFieldsDefinitionList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct TT1__getCustomFieldsDefinitionListResponse &_param_19)
{	struct TT1__getCustomFieldsDefinitionList soap_tmp_TT1__getCustomFieldsDefinitionList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getCustomFieldsDefinitionList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getCustomFieldsDefinitionList.cookie = cookie;
	soap_tmp_TT1__getCustomFieldsDefinitionList.tablename = tablename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getCustomFieldsDefinitionList(soap, &soap_tmp_TT1__getCustomFieldsDefinitionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getCustomFieldsDefinitionList(soap, &soap_tmp_TT1__getCustomFieldsDefinitionList, "TT1:getCustomFieldsDefinitionList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getCustomFieldsDefinitionList(soap, &soap_tmp_TT1__getCustomFieldsDefinitionList, "TT1:getCustomFieldsDefinitionList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getCustomFieldsDefinitionListResponse(soap, &_param_19);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getCustomFieldsDefinitionListResponse(soap, &_param_19, "TT1:getCustomFieldsDefinitionListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDefectCustomFieldsDefinitionList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getDefectCustomFieldsDefinitionListResponse &_param_20)
{	struct TT1__getDefectCustomFieldsDefinitionList soap_tmp_TT1__getDefectCustomFieldsDefinitionList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getDefectCustomFieldsDefinitionList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getDefectCustomFieldsDefinitionList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getDefectCustomFieldsDefinitionList(soap, &soap_tmp_TT1__getDefectCustomFieldsDefinitionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getDefectCustomFieldsDefinitionList(soap, &soap_tmp_TT1__getDefectCustomFieldsDefinitionList, "TT1:getDefectCustomFieldsDefinitionList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getDefectCustomFieldsDefinitionList(soap, &soap_tmp_TT1__getDefectCustomFieldsDefinitionList, "TT1:getDefectCustomFieldsDefinitionList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getDefectCustomFieldsDefinitionListResponse(soap, &_param_20);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getDefectCustomFieldsDefinitionListResponse(soap, &_param_20, "TT1:getDefectCustomFieldsDefinitionListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 defectNumber, char *summary, bool bDownloadAttachments, struct TT1__getDefectResponse &_param_21)
{	struct TT1__getDefect soap_tmp_TT1__getDefect;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getDefect.cookie = cookie;
	soap_tmp_TT1__getDefect.defectNumber = defectNumber;
	soap_tmp_TT1__getDefect.summary = summary;
	soap_tmp_TT1__getDefect.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getDefect(soap, &soap_tmp_TT1__getDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getDefect(soap, &soap_tmp_TT1__getDefect, "TT1:getDefect", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getDefect(soap, &soap_tmp_TT1__getDefect, "TT1:getDefect", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getDefectResponse(soap, &_param_21);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getDefectResponse(soap, &_param_21, "TT1:getDefectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDefectByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__getDefectByRecordIDResponse &_param_22)
{	struct TT1__getDefectByRecordID soap_tmp_TT1__getDefectByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getDefectByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getDefectByRecordID.cookie = cookie;
	soap_tmp_TT1__getDefectByRecordID.recordID = recordID;
	soap_tmp_TT1__getDefectByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getDefectByRecordID(soap, &soap_tmp_TT1__getDefectByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getDefectByRecordID(soap, &soap_tmp_TT1__getDefectByRecordID, "TT1:getDefectByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getDefectByRecordID(soap, &soap_tmp_TT1__getDefectByRecordID, "TT1:getDefectByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getDefectByRecordIDResponse(soap, &_param_22);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getDefectByRecordIDResponse(soap, &_param_22, "TT1:getDefectByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CDefect *pDefect, LONG64 &recordID)
{	struct TT1__addDefect soap_tmp_TT1__addDefect;
	struct TT1__addDefectResponse *soap_tmp_TT1__addDefectResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#addDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addDefect.cookie = cookie;
	soap_tmp_TT1__addDefect.pDefect = pDefect;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addDefect(soap, &soap_tmp_TT1__addDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addDefect(soap, &soap_tmp_TT1__addDefect, "TT1:addDefect", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addDefect(soap, &soap_tmp_TT1__addDefect, "TT1:addDefect", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addDefectResponse = soap_get_TT1__addDefectResponse(soap, NULL, "TT1:addDefectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_TT1__addDefectResponse->recordID;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addDefectWithLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CDefect *pDefect, LONG64 testRunRecordID, LONG64 &recordID)
{	struct TT1__addDefectWithLink soap_tmp_TT1__addDefectWithLink;
	struct TT1__addDefectWithLinkResponse *soap_tmp_TT1__addDefectWithLinkResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#addDefectWithLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addDefectWithLink.cookie = cookie;
	soap_tmp_TT1__addDefectWithLink.pDefect = pDefect;
	soap_tmp_TT1__addDefectWithLink.testRunRecordID = testRunRecordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addDefectWithLink(soap, &soap_tmp_TT1__addDefectWithLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addDefectWithLink(soap, &soap_tmp_TT1__addDefectWithLink, "TT1:addDefectWithLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addDefectWithLink(soap, &soap_tmp_TT1__addDefectWithLink, "TT1:addDefectWithLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addDefectWithLinkResponse = soap_get_TT1__addDefectWithLinkResponse(soap, NULL, "TT1:addDefectWithLinkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_TT1__addDefectWithLinkResponse->recordID;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 defectNumber, char *summary, int &result)
{	struct TT1__deleteDefect soap_tmp_TT1__deleteDefect;
	struct TT1__deleteDefectResponse *soap_tmp_TT1__deleteDefectResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteDefect.cookie = cookie;
	soap_tmp_TT1__deleteDefect.defectNumber = defectNumber;
	soap_tmp_TT1__deleteDefect.summary = summary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteDefect(soap, &soap_tmp_TT1__deleteDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteDefect(soap, &soap_tmp_TT1__deleteDefect, "TT1:deleteDefect", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteDefect(soap, &soap_tmp_TT1__deleteDefect, "TT1:deleteDefect", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteDefectResponse = soap_get_TT1__deleteDefectResponse(soap, NULL, "TT1:deleteDefectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteDefectResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteDefectByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__deleteDefectByRecordID soap_tmp_TT1__deleteDefectByRecordID;
	struct TT1__deleteDefectByRecordIDResponse *soap_tmp_TT1__deleteDefectByRecordIDResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteDefectByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteDefectByRecordID.cookie = cookie;
	soap_tmp_TT1__deleteDefectByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteDefectByRecordID(soap, &soap_tmp_TT1__deleteDefectByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteDefectByRecordID(soap, &soap_tmp_TT1__deleteDefectByRecordID, "TT1:deleteDefectByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteDefectByRecordID(soap, &soap_tmp_TT1__deleteDefectByRecordID, "TT1:deleteDefectByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteDefectByRecordIDResponse = soap_get_TT1__deleteDefectByRecordIDResponse(soap, NULL, "TT1:deleteDefectByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteDefectByRecordIDResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 defectNumber, char *summary, bool bDownloadAttachments, struct TT1__editDefectResponse &_param_23)
{	struct TT1__editDefect soap_tmp_TT1__editDefect;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editDefect.cookie = cookie;
	soap_tmp_TT1__editDefect.defectNumber = defectNumber;
	soap_tmp_TT1__editDefect.summary = summary;
	soap_tmp_TT1__editDefect.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editDefect(soap, &soap_tmp_TT1__editDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editDefect(soap, &soap_tmp_TT1__editDefect, "TT1:editDefect", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editDefect(soap, &soap_tmp_TT1__editDefect, "TT1:editDefect", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editDefectResponse(soap, &_param_23);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editDefectResponse(soap, &_param_23, "TT1:editDefectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editDefectByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__editDefectByRecordIDResponse &_param_24)
{	struct TT1__editDefectByRecordID soap_tmp_TT1__editDefectByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editDefectByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editDefectByRecordID.cookie = cookie;
	soap_tmp_TT1__editDefectByRecordID.recordID = recordID;
	soap_tmp_TT1__editDefectByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editDefectByRecordID(soap, &soap_tmp_TT1__editDefectByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editDefectByRecordID(soap, &soap_tmp_TT1__editDefectByRecordID, "TT1:editDefectByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editDefectByRecordID(soap, &soap_tmp_TT1__editDefectByRecordID, "TT1:editDefectByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editDefectByRecordIDResponse(soap, &_param_24);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editDefectByRecordIDResponse(soap, &_param_24, "TT1:editDefectByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CDefect *pDefect, int &result)
{	struct TT1__saveDefect soap_tmp_TT1__saveDefect;
	struct TT1__saveDefectResponse *soap_tmp_TT1__saveDefectResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#saveDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__saveDefect.cookie = cookie;
	soap_tmp_TT1__saveDefect.pDefect = pDefect;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__saveDefect(soap, &soap_tmp_TT1__saveDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__saveDefect(soap, &soap_tmp_TT1__saveDefect, "TT1:saveDefect", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__saveDefect(soap, &soap_tmp_TT1__saveDefect, "TT1:saveDefect", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__saveDefectResponse = soap_get_TT1__saveDefectResponse(soap, NULL, "TT1:saveDefectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__saveDefectResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__cancelSaveDefect soap_tmp_TT1__cancelSaveDefect;
	struct TT1__cancelSaveDefectResponse *soap_tmp_TT1__cancelSaveDefectResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#cancelSaveDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__cancelSaveDefect.cookie = cookie;
	soap_tmp_TT1__cancelSaveDefect.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__cancelSaveDefect(soap, &soap_tmp_TT1__cancelSaveDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__cancelSaveDefect(soap, &soap_tmp_TT1__cancelSaveDefect, "TT1:cancelSaveDefect", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__cancelSaveDefect(soap, &soap_tmp_TT1__cancelSaveDefect, "TT1:cancelSaveDefect", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__cancelSaveDefectResponse = soap_get_TT1__cancelSaveDefectResponse(soap, NULL, "TT1:cancelSaveDefectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__cancelSaveDefectResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getAttachment(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, LONG64 recordID, LONG64 eventID, char *pszArchiveName, struct TT1__getAttachmentResponse &_param_25)
{	struct TT1__getAttachment soap_tmp_TT1__getAttachment;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getAttachment";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getAttachment.cookie = cookie;
	soap_tmp_TT1__getAttachment.tablename = tablename;
	soap_tmp_TT1__getAttachment.recordID = recordID;
	soap_tmp_TT1__getAttachment.eventID = eventID;
	soap_tmp_TT1__getAttachment.pszArchiveName = pszArchiveName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getAttachment(soap, &soap_tmp_TT1__getAttachment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getAttachment(soap, &soap_tmp_TT1__getAttachment, "TT1:getAttachment", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getAttachment(soap, &soap_tmp_TT1__getAttachment, "TT1:getAttachment", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getAttachmentResponse(soap, &_param_25);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getAttachmentResponse(soap, &_param_25, "TT1:getAttachmentResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDefectAttachment(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *pszArchiveName, struct TT1__getDefectAttachmentResponse &_param_26)
{	struct TT1__getDefectAttachment soap_tmp_TT1__getDefectAttachment;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getDefectAttachment";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getDefectAttachment.cookie = cookie;
	soap_tmp_TT1__getDefectAttachment.pszArchiveName = pszArchiveName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getDefectAttachment(soap, &soap_tmp_TT1__getDefectAttachment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getDefectAttachment(soap, &soap_tmp_TT1__getDefectAttachment, "TT1:getDefectAttachment", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getDefectAttachment(soap, &soap_tmp_TT1__getDefectAttachment, "TT1:getDefectAttachment", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getDefectAttachmentResponse(soap, &_param_26);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getDefectAttachmentResponse(soap, &_param_26, "TT1:getDefectAttachmentResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *summary, struct TT1__getTaskResponse &_param_27)
{	struct TT1__getTask soap_tmp_TT1__getTask;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getTask.cookie = cookie;
	soap_tmp_TT1__getTask.summary = summary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getTask(soap, &soap_tmp_TT1__getTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getTask(soap, &soap_tmp_TT1__getTask, "TT1:getTask", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getTask(soap, &soap_tmp_TT1__getTask, "TT1:getTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getTaskResponse(soap, &_param_27);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getTaskResponse(soap, &_param_27, "TT1:getTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTaskByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__getTaskByRecordIDResponse &_param_28)
{	struct TT1__getTaskByRecordID soap_tmp_TT1__getTaskByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getTaskByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getTaskByRecordID.cookie = cookie;
	soap_tmp_TT1__getTaskByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getTaskByRecordID(soap, &soap_tmp_TT1__getTaskByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getTaskByRecordID(soap, &soap_tmp_TT1__getTaskByRecordID, "TT1:getTaskByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getTaskByRecordID(soap, &soap_tmp_TT1__getTaskByRecordID, "TT1:getTaskByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getTaskByRecordIDResponse(soap, &_param_28);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getTaskByRecordIDResponse(soap, &_param_28, "TT1:getTaskByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CTask *pTask, LONG64 &recordID)
{	struct TT1__addTask soap_tmp_TT1__addTask;
	struct TT1__addTaskResponse *soap_tmp_TT1__addTaskResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#addTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addTask.cookie = cookie;
	soap_tmp_TT1__addTask.pTask = pTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addTask(soap, &soap_tmp_TT1__addTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addTask(soap, &soap_tmp_TT1__addTask, "TT1:addTask", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addTask(soap, &soap_tmp_TT1__addTask, "TT1:addTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addTaskResponse = soap_get_TT1__addTaskResponse(soap, NULL, "TT1:addTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_TT1__addTaskResponse->recordID;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *summary, int &result)
{	struct TT1__deleteTask soap_tmp_TT1__deleteTask;
	struct TT1__deleteTaskResponse *soap_tmp_TT1__deleteTaskResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteTask.cookie = cookie;
	soap_tmp_TT1__deleteTask.summary = summary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteTask(soap, &soap_tmp_TT1__deleteTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteTask(soap, &soap_tmp_TT1__deleteTask, "TT1:deleteTask", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteTask(soap, &soap_tmp_TT1__deleteTask, "TT1:deleteTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteTaskResponse = soap_get_TT1__deleteTaskResponse(soap, NULL, "TT1:deleteTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteTaskResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTaskByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__deleteTaskByRecordID soap_tmp_TT1__deleteTaskByRecordID;
	struct TT1__deleteTaskByRecordIDResponse *soap_tmp_TT1__deleteTaskByRecordIDResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteTaskByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteTaskByRecordID.cookie = cookie;
	soap_tmp_TT1__deleteTaskByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteTaskByRecordID(soap, &soap_tmp_TT1__deleteTaskByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteTaskByRecordID(soap, &soap_tmp_TT1__deleteTaskByRecordID, "TT1:deleteTaskByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteTaskByRecordID(soap, &soap_tmp_TT1__deleteTaskByRecordID, "TT1:deleteTaskByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteTaskByRecordIDResponse = soap_get_TT1__deleteTaskByRecordIDResponse(soap, NULL, "TT1:deleteTaskByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteTaskByRecordIDResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *summary, struct TT1__editTaskResponse &_param_29)
{	struct TT1__editTask soap_tmp_TT1__editTask;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editTask.cookie = cookie;
	soap_tmp_TT1__editTask.summary = summary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editTask(soap, &soap_tmp_TT1__editTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editTask(soap, &soap_tmp_TT1__editTask, "TT1:editTask", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editTask(soap, &soap_tmp_TT1__editTask, "TT1:editTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editTaskResponse(soap, &_param_29);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editTaskResponse(soap, &_param_29, "TT1:editTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTaskByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__editTaskByRecordIDResponse &_param_30)
{	struct TT1__editTaskByRecordID soap_tmp_TT1__editTaskByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editTaskByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editTaskByRecordID.cookie = cookie;
	soap_tmp_TT1__editTaskByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editTaskByRecordID(soap, &soap_tmp_TT1__editTaskByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editTaskByRecordID(soap, &soap_tmp_TT1__editTaskByRecordID, "TT1:editTaskByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editTaskByRecordID(soap, &soap_tmp_TT1__editTaskByRecordID, "TT1:editTaskByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editTaskByRecordIDResponse(soap, &_param_30);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editTaskByRecordIDResponse(soap, &_param_30, "TT1:editTaskByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CTask *pTask, int &result)
{	struct TT1__saveTask soap_tmp_TT1__saveTask;
	struct TT1__saveTaskResponse *soap_tmp_TT1__saveTaskResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#saveTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__saveTask.cookie = cookie;
	soap_tmp_TT1__saveTask.pTask = pTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__saveTask(soap, &soap_tmp_TT1__saveTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__saveTask(soap, &soap_tmp_TT1__saveTask, "TT1:saveTask", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__saveTask(soap, &soap_tmp_TT1__saveTask, "TT1:saveTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__saveTaskResponse = soap_get_TT1__saveTaskResponse(soap, NULL, "TT1:saveTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__saveTaskResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__cancelSaveTask soap_tmp_TT1__cancelSaveTask;
	struct TT1__cancelSaveTaskResponse *soap_tmp_TT1__cancelSaveTaskResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#cancelSaveTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__cancelSaveTask.cookie = cookie;
	soap_tmp_TT1__cancelSaveTask.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__cancelSaveTask(soap, &soap_tmp_TT1__cancelSaveTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__cancelSaveTask(soap, &soap_tmp_TT1__cancelSaveTask, "TT1:cancelSaveTask", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__cancelSaveTask(soap, &soap_tmp_TT1__cancelSaveTask, "TT1:cancelSaveTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__cancelSaveTaskResponse = soap_get_TT1__cancelSaveTaskResponse(soap, NULL, "TT1:cancelSaveTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__cancelSaveTaskResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getGlobalUserList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getGlobalUserListResponse &_param_31)
{	struct TT1__getGlobalUserList soap_tmp_TT1__getGlobalUserList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getGlobalUserList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getGlobalUserList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getGlobalUserList(soap, &soap_tmp_TT1__getGlobalUserList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getGlobalUserList(soap, &soap_tmp_TT1__getGlobalUserList, "TT1:getGlobalUserList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getGlobalUserList(soap, &soap_tmp_TT1__getGlobalUserList, "TT1:getGlobalUserList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getGlobalUserListResponse(soap, &_param_31);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getGlobalUserListResponse(soap, &_param_31, "TT1:getGlobalUserListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getGlobalCustomerList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getGlobalCustomerListResponse &_param_32)
{	struct TT1__getGlobalCustomerList soap_tmp_TT1__getGlobalCustomerList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getGlobalCustomerList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getGlobalCustomerList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getGlobalCustomerList(soap, &soap_tmp_TT1__getGlobalCustomerList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getGlobalCustomerList(soap, &soap_tmp_TT1__getGlobalCustomerList, "TT1:getGlobalCustomerList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getGlobalCustomerList(soap, &soap_tmp_TT1__getGlobalCustomerList, "TT1:getGlobalCustomerList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getGlobalCustomerListResponse(soap, &_param_32);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getGlobalCustomerListResponse(soap, &_param_32, "TT1:getGlobalCustomerListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getUserLicenseList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getUserLicenseListResponse &_param_33)
{	struct TT1__getUserLicenseList soap_tmp_TT1__getUserLicenseList;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getUserLicenseList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getUserLicenseList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getUserLicenseList(soap, &soap_tmp_TT1__getUserLicenseList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getUserLicenseList(soap, &soap_tmp_TT1__getUserLicenseList, "TT1:getUserLicenseList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getUserLicenseList(soap, &soap_tmp_TT1__getUserLicenseList, "TT1:getUserLicenseList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getUserLicenseListResponse(soap, &_param_33);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getUserLicenseListResponse(soap, &_param_33, "TT1:getUserLicenseListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct TT1__getUserResponse &_param_34)
{	struct TT1__getUser soap_tmp_TT1__getUser;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getUser.cookie = cookie;
	soap_tmp_TT1__getUser.firstName = firstName;
	soap_tmp_TT1__getUser.middleInitials = middleInitials;
	soap_tmp_TT1__getUser.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getUser(soap, &soap_tmp_TT1__getUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getUser(soap, &soap_tmp_TT1__getUser, "TT1:getUser", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getUser(soap, &soap_tmp_TT1__getUser, "TT1:getUser", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getUserResponse(soap, &_param_34);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getUserResponse(soap, &_param_34, "TT1:getUserResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getUserByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__getUserByRecordIDResponse &_param_35)
{	struct TT1__getUserByRecordID soap_tmp_TT1__getUserByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getUserByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getUserByRecordID.cookie = cookie;
	soap_tmp_TT1__getUserByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getUserByRecordID(soap, &soap_tmp_TT1__getUserByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getUserByRecordID(soap, &soap_tmp_TT1__getUserByRecordID, "TT1:getUserByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getUserByRecordID(soap, &soap_tmp_TT1__getUserByRecordID, "TT1:getUserByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getUserByRecordIDResponse(soap, &_param_35);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getUserByRecordIDResponse(soap, &_param_35, "TT1:getUserByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CUser *pUser, LONG64 &recordID)
{	struct TT1__addUser soap_tmp_TT1__addUser;
	struct TT1__addUserResponse *soap_tmp_TT1__addUserResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#addUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addUser.cookie = cookie;
	soap_tmp_TT1__addUser.pUser = pUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addUser(soap, &soap_tmp_TT1__addUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addUser(soap, &soap_tmp_TT1__addUser, "TT1:addUser", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addUser(soap, &soap_tmp_TT1__addUser, "TT1:addUser", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addUserResponse = soap_get_TT1__addUserResponse(soap, NULL, "TT1:addUserResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_TT1__addUserResponse->recordID;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct TT1__editUserResponse &_param_36)
{	struct TT1__editUser soap_tmp_TT1__editUser;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editUser.cookie = cookie;
	soap_tmp_TT1__editUser.firstName = firstName;
	soap_tmp_TT1__editUser.middleInitials = middleInitials;
	soap_tmp_TT1__editUser.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editUser(soap, &soap_tmp_TT1__editUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editUser(soap, &soap_tmp_TT1__editUser, "TT1:editUser", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editUser(soap, &soap_tmp_TT1__editUser, "TT1:editUser", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editUserResponse(soap, &_param_36);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editUserResponse(soap, &_param_36, "TT1:editUserResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editUserByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__editUserByRecordIDResponse &_param_37)
{	struct TT1__editUserByRecordID soap_tmp_TT1__editUserByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editUserByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editUserByRecordID.cookie = cookie;
	soap_tmp_TT1__editUserByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editUserByRecordID(soap, &soap_tmp_TT1__editUserByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editUserByRecordID(soap, &soap_tmp_TT1__editUserByRecordID, "TT1:editUserByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editUserByRecordID(soap, &soap_tmp_TT1__editUserByRecordID, "TT1:editUserByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editUserByRecordIDResponse(soap, &_param_37);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editUserByRecordIDResponse(soap, &_param_37, "TT1:editUserByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, TT1__CUser *pUser, int &result)
{	struct TT1__saveUser soap_tmp_TT1__saveUser;
	struct TT1__saveUserResponse *soap_tmp_TT1__saveUserResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#saveUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__saveUser.cookie = cookie;
	soap_tmp_TT1__saveUser.firstName = firstName;
	soap_tmp_TT1__saveUser.middleInitials = middleInitials;
	soap_tmp_TT1__saveUser.lastName = lastName;
	soap_tmp_TT1__saveUser.pUser = pUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__saveUser(soap, &soap_tmp_TT1__saveUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__saveUser(soap, &soap_tmp_TT1__saveUser, "TT1:saveUser", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__saveUser(soap, &soap_tmp_TT1__saveUser, "TT1:saveUser", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__saveUserResponse = soap_get_TT1__saveUserResponse(soap, NULL, "TT1:saveUserResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__saveUserResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, int &result)
{	struct TT1__deleteUser soap_tmp_TT1__deleteUser;
	struct TT1__deleteUserResponse *soap_tmp_TT1__deleteUserResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteUser.cookie = cookie;
	soap_tmp_TT1__deleteUser.firstName = firstName;
	soap_tmp_TT1__deleteUser.middleInitials = middleInitials;
	soap_tmp_TT1__deleteUser.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteUser(soap, &soap_tmp_TT1__deleteUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteUser(soap, &soap_tmp_TT1__deleteUser, "TT1:deleteUser", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteUser(soap, &soap_tmp_TT1__deleteUser, "TT1:deleteUser", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteUserResponse = soap_get_TT1__deleteUserResponse(soap, NULL, "TT1:deleteUserResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteUserResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteUserByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__deleteUserByRecordID soap_tmp_TT1__deleteUserByRecordID;
	struct TT1__deleteUserByRecordIDResponse *soap_tmp_TT1__deleteUserByRecordIDResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteUserByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteUserByRecordID.cookie = cookie;
	soap_tmp_TT1__deleteUserByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteUserByRecordID(soap, &soap_tmp_TT1__deleteUserByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteUserByRecordID(soap, &soap_tmp_TT1__deleteUserByRecordID, "TT1:deleteUserByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteUserByRecordID(soap, &soap_tmp_TT1__deleteUserByRecordID, "TT1:deleteUserByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteUserByRecordIDResponse = soap_get_TT1__deleteUserByRecordIDResponse(soap, NULL, "TT1:deleteUserByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteUserByRecordIDResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__cancelSaveUser soap_tmp_TT1__cancelSaveUser;
	struct TT1__cancelSaveUserResponse *soap_tmp_TT1__cancelSaveUserResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#cancelSaveUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__cancelSaveUser.cookie = cookie;
	soap_tmp_TT1__cancelSaveUser.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__cancelSaveUser(soap, &soap_tmp_TT1__cancelSaveUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__cancelSaveUser(soap, &soap_tmp_TT1__cancelSaveUser, "TT1:cancelSaveUser", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__cancelSaveUser(soap, &soap_tmp_TT1__cancelSaveUser, "TT1:cancelSaveUser", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__cancelSaveUserResponse = soap_get_TT1__cancelSaveUserResponse(soap, NULL, "TT1:cancelSaveUserResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__cancelSaveUserResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__promoteUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *localUser, char *globalUser, char *loginname, int &result)
{	struct TT1__promoteUser soap_tmp_TT1__promoteUser;
	struct TT1__promoteUserResponse *soap_tmp_TT1__promoteUserResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__promoteUser.cookie = cookie;
	soap_tmp_TT1__promoteUser.localUser = localUser;
	soap_tmp_TT1__promoteUser.globalUser = globalUser;
	soap_tmp_TT1__promoteUser.loginname = loginname;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__promoteUser(soap, &soap_tmp_TT1__promoteUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__promoteUser(soap, &soap_tmp_TT1__promoteUser, "TT1:promoteUser", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__promoteUser(soap, &soap_tmp_TT1__promoteUser, "TT1:promoteUser", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__promoteUserResponse = soap_get_TT1__promoteUserResponse(soap, NULL, "TT1:promoteUserResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__promoteUserResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addGlobalUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CGlobalUser *pUser, int &result)
{	struct TT1__addGlobalUser soap_tmp_TT1__addGlobalUser;
	struct TT1__addGlobalUserResponse *soap_tmp_TT1__addGlobalUserResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addGlobalUser.cookie = cookie;
	soap_tmp_TT1__addGlobalUser.pUser = pUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addGlobalUser(soap, &soap_tmp_TT1__addGlobalUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addGlobalUser(soap, &soap_tmp_TT1__addGlobalUser, "TT1:addGlobalUser", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addGlobalUser(soap, &soap_tmp_TT1__addGlobalUser, "TT1:addGlobalUser", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addGlobalUserResponse = soap_get_TT1__addGlobalUserResponse(soap, NULL, "TT1:addGlobalUserResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__addGlobalUserResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct TT1__getCustomerResponse &_param_38)
{	struct TT1__getCustomer soap_tmp_TT1__getCustomer;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getCustomer.cookie = cookie;
	soap_tmp_TT1__getCustomer.firstName = firstName;
	soap_tmp_TT1__getCustomer.middleInitials = middleInitials;
	soap_tmp_TT1__getCustomer.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getCustomer(soap, &soap_tmp_TT1__getCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getCustomer(soap, &soap_tmp_TT1__getCustomer, "TT1:getCustomer", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getCustomer(soap, &soap_tmp_TT1__getCustomer, "TT1:getCustomer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getCustomerResponse(soap, &_param_38);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getCustomerResponse(soap, &_param_38, "TT1:getCustomerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getCustomerByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__getCustomerByRecordIDResponse &_param_39)
{	struct TT1__getCustomerByRecordID soap_tmp_TT1__getCustomerByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getCustomerByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getCustomerByRecordID.cookie = cookie;
	soap_tmp_TT1__getCustomerByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getCustomerByRecordID(soap, &soap_tmp_TT1__getCustomerByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getCustomerByRecordID(soap, &soap_tmp_TT1__getCustomerByRecordID, "TT1:getCustomerByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getCustomerByRecordID(soap, &soap_tmp_TT1__getCustomerByRecordID, "TT1:getCustomerByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getCustomerByRecordIDResponse(soap, &_param_39);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getCustomerByRecordIDResponse(soap, &_param_39, "TT1:getCustomerByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CUser *pCustomer, LONG64 &recordID)
{	struct TT1__addCustomer soap_tmp_TT1__addCustomer;
	struct TT1__addCustomerResponse *soap_tmp_TT1__addCustomerResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#addCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addCustomer.cookie = cookie;
	soap_tmp_TT1__addCustomer.pCustomer = pCustomer;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addCustomer(soap, &soap_tmp_TT1__addCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addCustomer(soap, &soap_tmp_TT1__addCustomer, "TT1:addCustomer", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addCustomer(soap, &soap_tmp_TT1__addCustomer, "TT1:addCustomer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addCustomerResponse = soap_get_TT1__addCustomerResponse(soap, NULL, "TT1:addCustomerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_TT1__addCustomerResponse->recordID;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct TT1__editCustomerResponse &_param_40)
{	struct TT1__editCustomer soap_tmp_TT1__editCustomer;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editCustomer.cookie = cookie;
	soap_tmp_TT1__editCustomer.firstName = firstName;
	soap_tmp_TT1__editCustomer.middleInitials = middleInitials;
	soap_tmp_TT1__editCustomer.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editCustomer(soap, &soap_tmp_TT1__editCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editCustomer(soap, &soap_tmp_TT1__editCustomer, "TT1:editCustomer", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editCustomer(soap, &soap_tmp_TT1__editCustomer, "TT1:editCustomer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editCustomerResponse(soap, &_param_40);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editCustomerResponse(soap, &_param_40, "TT1:editCustomerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editCustomerByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__editCustomerByRecordIDResponse &_param_41)
{	struct TT1__editCustomerByRecordID soap_tmp_TT1__editCustomerByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editCustomerByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editCustomerByRecordID.cookie = cookie;
	soap_tmp_TT1__editCustomerByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editCustomerByRecordID(soap, &soap_tmp_TT1__editCustomerByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editCustomerByRecordID(soap, &soap_tmp_TT1__editCustomerByRecordID, "TT1:editCustomerByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editCustomerByRecordID(soap, &soap_tmp_TT1__editCustomerByRecordID, "TT1:editCustomerByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editCustomerByRecordIDResponse(soap, &_param_41);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editCustomerByRecordIDResponse(soap, &_param_41, "TT1:editCustomerByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, TT1__CUser *pCustomer, int &result)
{	struct TT1__saveCustomer soap_tmp_TT1__saveCustomer;
	struct TT1__saveCustomerResponse *soap_tmp_TT1__saveCustomerResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#saveCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__saveCustomer.cookie = cookie;
	soap_tmp_TT1__saveCustomer.firstName = firstName;
	soap_tmp_TT1__saveCustomer.middleInitials = middleInitials;
	soap_tmp_TT1__saveCustomer.lastName = lastName;
	soap_tmp_TT1__saveCustomer.pCustomer = pCustomer;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__saveCustomer(soap, &soap_tmp_TT1__saveCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__saveCustomer(soap, &soap_tmp_TT1__saveCustomer, "TT1:saveCustomer", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__saveCustomer(soap, &soap_tmp_TT1__saveCustomer, "TT1:saveCustomer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__saveCustomerResponse = soap_get_TT1__saveCustomerResponse(soap, NULL, "TT1:saveCustomerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__saveCustomerResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, int &result)
{	struct TT1__deleteCustomer soap_tmp_TT1__deleteCustomer;
	struct TT1__deleteCustomerResponse *soap_tmp_TT1__deleteCustomerResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteCustomer.cookie = cookie;
	soap_tmp_TT1__deleteCustomer.firstName = firstName;
	soap_tmp_TT1__deleteCustomer.middleInitials = middleInitials;
	soap_tmp_TT1__deleteCustomer.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteCustomer(soap, &soap_tmp_TT1__deleteCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteCustomer(soap, &soap_tmp_TT1__deleteCustomer, "TT1:deleteCustomer", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteCustomer(soap, &soap_tmp_TT1__deleteCustomer, "TT1:deleteCustomer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteCustomerResponse = soap_get_TT1__deleteCustomerResponse(soap, NULL, "TT1:deleteCustomerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteCustomerResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteCustomerByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__deleteCustomerByRecordID soap_tmp_TT1__deleteCustomerByRecordID;
	struct TT1__deleteCustomerByRecordIDResponse *soap_tmp_TT1__deleteCustomerByRecordIDResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteCustomerByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteCustomerByRecordID.cookie = cookie;
	soap_tmp_TT1__deleteCustomerByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteCustomerByRecordID(soap, &soap_tmp_TT1__deleteCustomerByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteCustomerByRecordID(soap, &soap_tmp_TT1__deleteCustomerByRecordID, "TT1:deleteCustomerByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteCustomerByRecordID(soap, &soap_tmp_TT1__deleteCustomerByRecordID, "TT1:deleteCustomerByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteCustomerByRecordIDResponse = soap_get_TT1__deleteCustomerByRecordIDResponse(soap, NULL, "TT1:deleteCustomerByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteCustomerByRecordIDResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__cancelSaveCustomer soap_tmp_TT1__cancelSaveCustomer;
	struct TT1__cancelSaveCustomerResponse *soap_tmp_TT1__cancelSaveCustomerResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#cancelSaveCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__cancelSaveCustomer.cookie = cookie;
	soap_tmp_TT1__cancelSaveCustomer.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__cancelSaveCustomer(soap, &soap_tmp_TT1__cancelSaveCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__cancelSaveCustomer(soap, &soap_tmp_TT1__cancelSaveCustomer, "TT1:cancelSaveCustomer", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__cancelSaveCustomer(soap, &soap_tmp_TT1__cancelSaveCustomer, "TT1:cancelSaveCustomer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__cancelSaveCustomerResponse = soap_get_TT1__cancelSaveCustomerResponse(soap, NULL, "TT1:cancelSaveCustomerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__cancelSaveCustomerResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__promoteCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *localCustomer, char *globalUser, char *loginname, int &result)
{	struct TT1__promoteCustomer soap_tmp_TT1__promoteCustomer;
	struct TT1__promoteCustomerResponse *soap_tmp_TT1__promoteCustomerResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__promoteCustomer.cookie = cookie;
	soap_tmp_TT1__promoteCustomer.localCustomer = localCustomer;
	soap_tmp_TT1__promoteCustomer.globalUser = globalUser;
	soap_tmp_TT1__promoteCustomer.loginname = loginname;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__promoteCustomer(soap, &soap_tmp_TT1__promoteCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__promoteCustomer(soap, &soap_tmp_TT1__promoteCustomer, "TT1:promoteCustomer", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__promoteCustomer(soap, &soap_tmp_TT1__promoteCustomer, "TT1:promoteCustomer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__promoteCustomerResponse = soap_get_TT1__promoteCustomerResponse(soap, NULL, "TT1:promoteCustomerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__promoteCustomerResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addGlobalCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CGlobalUser *pUser, int &result)
{	struct TT1__addGlobalCustomer soap_tmp_TT1__addGlobalCustomer;
	struct TT1__addGlobalCustomerResponse *soap_tmp_TT1__addGlobalCustomerResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addGlobalCustomer.cookie = cookie;
	soap_tmp_TT1__addGlobalCustomer.pUser = pUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addGlobalCustomer(soap, &soap_tmp_TT1__addGlobalCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addGlobalCustomer(soap, &soap_tmp_TT1__addGlobalCustomer, "TT1:addGlobalCustomer", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addGlobalCustomer(soap, &soap_tmp_TT1__addGlobalCustomer, "TT1:addGlobalCustomer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addGlobalCustomerResponse = soap_get_TT1__addGlobalCustomerResponse(soap, NULL, "TT1:addGlobalCustomerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__addGlobalCustomerResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getLinksForItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, LONG64 itemRecordID, struct TT1__getLinksForItemResponse &_param_42)
{	struct TT1__getLinksForItem soap_tmp_TT1__getLinksForItem;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getLinksForItem";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getLinksForItem.cookie = cookie;
	soap_tmp_TT1__getLinksForItem.tablename = tablename;
	soap_tmp_TT1__getLinksForItem.itemRecordID = itemRecordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getLinksForItem(soap, &soap_tmp_TT1__getLinksForItem);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getLinksForItem(soap, &soap_tmp_TT1__getLinksForItem, "TT1:getLinksForItem", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getLinksForItem(soap, &soap_tmp_TT1__getLinksForItem, "TT1:getLinksForItem", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getLinksForItemResponse(soap, &_param_42);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getLinksForItemResponse(soap, &_param_42, "TT1:getLinksForItemResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getLinksForDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 defectRecordID, struct TT1__getLinksForDefectResponse &_param_43)
{	struct TT1__getLinksForDefect soap_tmp_TT1__getLinksForDefect;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getLinksForDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getLinksForDefect.cookie = cookie;
	soap_tmp_TT1__getLinksForDefect.defectRecordID = defectRecordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getLinksForDefect(soap, &soap_tmp_TT1__getLinksForDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getLinksForDefect(soap, &soap_tmp_TT1__getLinksForDefect, "TT1:getLinksForDefect", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getLinksForDefect(soap, &soap_tmp_TT1__getLinksForDefect, "TT1:getLinksForDefect", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getLinksForDefectResponse(soap, &_param_43);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getLinksForDefectResponse(soap, &_param_43, "TT1:getLinksForDefectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, struct TT1__getLinkResponse &_param_44)
{	struct TT1__getLink soap_tmp_TT1__getLink;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getLink.cookie = cookie;
	soap_tmp_TT1__getLink.linkID = linkID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getLink(soap, &soap_tmp_TT1__getLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getLink(soap, &soap_tmp_TT1__getLink, "TT1:getLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getLink(soap, &soap_tmp_TT1__getLink, "TT1:getLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getLinkResponse(soap, &_param_44);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getLinkResponse(soap, &_param_44, "TT1:getLinkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CLink *pLink, LONG64 &recordID)
{	struct TT1__addLink soap_tmp_TT1__addLink;
	struct TT1__addLinkResponse *soap_tmp_TT1__addLinkResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#addLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addLink.cookie = cookie;
	soap_tmp_TT1__addLink.pLink = pLink;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addLink(soap, &soap_tmp_TT1__addLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addLink(soap, &soap_tmp_TT1__addLink, "TT1:addLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addLink(soap, &soap_tmp_TT1__addLink, "TT1:addLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addLinkResponse = soap_get_TT1__addLinkResponse(soap, NULL, "TT1:addLinkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_TT1__addLinkResponse->recordID;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, int &result)
{	struct TT1__deleteLink soap_tmp_TT1__deleteLink;
	struct TT1__deleteLinkResponse *soap_tmp_TT1__deleteLinkResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteLink.cookie = cookie;
	soap_tmp_TT1__deleteLink.linkID = linkID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteLink(soap, &soap_tmp_TT1__deleteLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteLink(soap, &soap_tmp_TT1__deleteLink, "TT1:deleteLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteLink(soap, &soap_tmp_TT1__deleteLink, "TT1:deleteLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteLinkResponse = soap_get_TT1__deleteLinkResponse(soap, NULL, "TT1:deleteLinkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteLinkResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, struct TT1__editLinkResponse &_param_45)
{	struct TT1__editLink soap_tmp_TT1__editLink;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editLink.cookie = cookie;
	soap_tmp_TT1__editLink.linkID = linkID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editLink(soap, &soap_tmp_TT1__editLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editLink(soap, &soap_tmp_TT1__editLink, "TT1:editLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editLink(soap, &soap_tmp_TT1__editLink, "TT1:editLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editLinkResponse(soap, &_param_45);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editLinkResponse(soap, &_param_45, "TT1:editLinkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CLink *pLink, int &result)
{	struct TT1__saveLink soap_tmp_TT1__saveLink;
	struct TT1__saveLinkResponse *soap_tmp_TT1__saveLinkResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#saveLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__saveLink.cookie = cookie;
	soap_tmp_TT1__saveLink.pLink = pLink;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__saveLink(soap, &soap_tmp_TT1__saveLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__saveLink(soap, &soap_tmp_TT1__saveLink, "TT1:saveLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__saveLink(soap, &soap_tmp_TT1__saveLink, "TT1:saveLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__saveLinkResponse = soap_get_TT1__saveLinkResponse(soap, NULL, "TT1:saveLinkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__saveLinkResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, int &result)
{	struct TT1__cancelSaveLink soap_tmp_TT1__cancelSaveLink;
	struct TT1__cancelSaveLinkResponse *soap_tmp_TT1__cancelSaveLinkResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#cancelSaveLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__cancelSaveLink.cookie = cookie;
	soap_tmp_TT1__cancelSaveLink.linkID = linkID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__cancelSaveLink(soap, &soap_tmp_TT1__cancelSaveLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__cancelSaveLink(soap, &soap_tmp_TT1__cancelSaveLink, "TT1:cancelSaveLink", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__cancelSaveLink(soap, &soap_tmp_TT1__cancelSaveLink, "TT1:cancelSaveLink", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__cancelSaveLinkResponse = soap_get_TT1__cancelSaveLinkResponse(soap, NULL, "TT1:cancelSaveLinkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__cancelSaveLinkResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestVariantTypes(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getTestVariantTypesResponse &_param_46)
{	struct TT1__getTestVariantTypes soap_tmp_TT1__getTestVariantTypes;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getTestVariantTypes";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getTestVariantTypes.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getTestVariantTypes(soap, &soap_tmp_TT1__getTestVariantTypes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getTestVariantTypes(soap, &soap_tmp_TT1__getTestVariantTypes, "TT1:getTestVariantTypes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getTestVariantTypes(soap, &soap_tmp_TT1__getTestVariantTypes, "TT1:getTestVariantTypes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getTestVariantTypesResponse(soap, &_param_46);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getTestVariantTypesResponse(soap, &_param_46, "TT1:getTestVariantTypesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestRunStepsModes(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getTestRunStepsModesResponse &_param_47)
{	struct TT1__getTestRunStepsModes soap_tmp_TT1__getTestRunStepsModes;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getTestRunStepsModes";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getTestRunStepsModes.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getTestRunStepsModes(soap, &soap_tmp_TT1__getTestRunStepsModes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getTestRunStepsModes(soap, &soap_tmp_TT1__getTestRunStepsModes, "TT1:getTestRunStepsModes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getTestRunStepsModes(soap, &soap_tmp_TT1__getTestRunStepsModes, "TT1:getTestRunStepsModes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getTestRunStepsModesResponse(soap, &_param_47);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getTestRunStepsModesResponse(soap, &_param_47, "TT1:getTestRunStepsModesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDownloadAttachments, struct TT1__getTestCaseResponse &_param_48)
{	struct TT1__getTestCase soap_tmp_TT1__getTestCase;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getTestCase.cookie = cookie;
	soap_tmp_TT1__getTestCase.testCaseNumber = testCaseNumber;
	soap_tmp_TT1__getTestCase.summary = summary;
	soap_tmp_TT1__getTestCase.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getTestCase(soap, &soap_tmp_TT1__getTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getTestCase(soap, &soap_tmp_TT1__getTestCase, "TT1:getTestCase", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getTestCase(soap, &soap_tmp_TT1__getTestCase, "TT1:getTestCase", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getTestCaseResponse(soap, &_param_48);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getTestCaseResponse(soap, &_param_48, "TT1:getTestCaseResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestCaseByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__getTestCaseByRecordIDResponse &_param_49)
{	struct TT1__getTestCaseByRecordID soap_tmp_TT1__getTestCaseByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getTestCaseByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getTestCaseByRecordID.cookie = cookie;
	soap_tmp_TT1__getTestCaseByRecordID.recordID = recordID;
	soap_tmp_TT1__getTestCaseByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getTestCaseByRecordID(soap, &soap_tmp_TT1__getTestCaseByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getTestCaseByRecordID(soap, &soap_tmp_TT1__getTestCaseByRecordID, "TT1:getTestCaseByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getTestCaseByRecordID(soap, &soap_tmp_TT1__getTestCaseByRecordID, "TT1:getTestCaseByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getTestCaseByRecordIDResponse(soap, &_param_49);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getTestCaseByRecordIDResponse(soap, &_param_49, "TT1:getTestCaseByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CTestCase *pTestCase, LONG64 &recordID)
{	struct TT1__addTestCase soap_tmp_TT1__addTestCase;
	struct TT1__addTestCaseResponse *soap_tmp_TT1__addTestCaseResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#addTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addTestCase.cookie = cookie;
	soap_tmp_TT1__addTestCase.pTestCase = pTestCase;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addTestCase(soap, &soap_tmp_TT1__addTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addTestCase(soap, &soap_tmp_TT1__addTestCase, "TT1:addTestCase", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addTestCase(soap, &soap_tmp_TT1__addTestCase, "TT1:addTestCase", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addTestCaseResponse = soap_get_TT1__addTestCaseResponse(soap, NULL, "TT1:addTestCaseResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_TT1__addTestCaseResponse->recordID;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDeleteAssociatedTestRuns, int &result)
{	struct TT1__deleteTestCase soap_tmp_TT1__deleteTestCase;
	struct TT1__deleteTestCaseResponse *soap_tmp_TT1__deleteTestCaseResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteTestCase.cookie = cookie;
	soap_tmp_TT1__deleteTestCase.testCaseNumber = testCaseNumber;
	soap_tmp_TT1__deleteTestCase.summary = summary;
	soap_tmp_TT1__deleteTestCase.bDeleteAssociatedTestRuns = bDeleteAssociatedTestRuns;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteTestCase(soap, &soap_tmp_TT1__deleteTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteTestCase(soap, &soap_tmp_TT1__deleteTestCase, "TT1:deleteTestCase", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteTestCase(soap, &soap_tmp_TT1__deleteTestCase, "TT1:deleteTestCase", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteTestCaseResponse = soap_get_TT1__deleteTestCaseResponse(soap, NULL, "TT1:deleteTestCaseResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteTestCaseResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestCaseByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDeleteAssociatedTestRun, int &result)
{	struct TT1__deleteTestCaseByRecordID soap_tmp_TT1__deleteTestCaseByRecordID;
	struct TT1__deleteTestCaseByRecordIDResponse *soap_tmp_TT1__deleteTestCaseByRecordIDResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteTestCaseByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteTestCaseByRecordID.cookie = cookie;
	soap_tmp_TT1__deleteTestCaseByRecordID.recordID = recordID;
	soap_tmp_TT1__deleteTestCaseByRecordID.bDeleteAssociatedTestRun = bDeleteAssociatedTestRun;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteTestCaseByRecordID(soap, &soap_tmp_TT1__deleteTestCaseByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteTestCaseByRecordID(soap, &soap_tmp_TT1__deleteTestCaseByRecordID, "TT1:deleteTestCaseByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteTestCaseByRecordID(soap, &soap_tmp_TT1__deleteTestCaseByRecordID, "TT1:deleteTestCaseByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteTestCaseByRecordIDResponse = soap_get_TT1__deleteTestCaseByRecordIDResponse(soap, NULL, "TT1:deleteTestCaseByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteTestCaseByRecordIDResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDownloadAttachments, struct TT1__editTestCaseResponse &_param_50)
{	struct TT1__editTestCase soap_tmp_TT1__editTestCase;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editTestCase.cookie = cookie;
	soap_tmp_TT1__editTestCase.testCaseNumber = testCaseNumber;
	soap_tmp_TT1__editTestCase.summary = summary;
	soap_tmp_TT1__editTestCase.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editTestCase(soap, &soap_tmp_TT1__editTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editTestCase(soap, &soap_tmp_TT1__editTestCase, "TT1:editTestCase", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editTestCase(soap, &soap_tmp_TT1__editTestCase, "TT1:editTestCase", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editTestCaseResponse(soap, &_param_50);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editTestCaseResponse(soap, &_param_50, "TT1:editTestCaseResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestCaseByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__editTestCaseByRecordIDResponse &_param_51)
{	struct TT1__editTestCaseByRecordID soap_tmp_TT1__editTestCaseByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editTestCaseByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editTestCaseByRecordID.cookie = cookie;
	soap_tmp_TT1__editTestCaseByRecordID.recordID = recordID;
	soap_tmp_TT1__editTestCaseByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editTestCaseByRecordID(soap, &soap_tmp_TT1__editTestCaseByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editTestCaseByRecordID(soap, &soap_tmp_TT1__editTestCaseByRecordID, "TT1:editTestCaseByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editTestCaseByRecordID(soap, &soap_tmp_TT1__editTestCaseByRecordID, "TT1:editTestCaseByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editTestCaseByRecordIDResponse(soap, &_param_51);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editTestCaseByRecordIDResponse(soap, &_param_51, "TT1:editTestCaseByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CTestCase *pTestCase, int &result)
{	struct TT1__saveTestCase soap_tmp_TT1__saveTestCase;
	struct TT1__saveTestCaseResponse *soap_tmp_TT1__saveTestCaseResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#saveTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__saveTestCase.cookie = cookie;
	soap_tmp_TT1__saveTestCase.pTestCase = pTestCase;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__saveTestCase(soap, &soap_tmp_TT1__saveTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__saveTestCase(soap, &soap_tmp_TT1__saveTestCase, "TT1:saveTestCase", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__saveTestCase(soap, &soap_tmp_TT1__saveTestCase, "TT1:saveTestCase", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__saveTestCaseResponse = soap_get_TT1__saveTestCaseResponse(soap, NULL, "TT1:saveTestCaseResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__saveTestCaseResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__cancelSaveTestCase soap_tmp_TT1__cancelSaveTestCase;
	struct TT1__cancelSaveTestCaseResponse *soap_tmp_TT1__cancelSaveTestCaseResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#cancelSaveTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__cancelSaveTestCase.cookie = cookie;
	soap_tmp_TT1__cancelSaveTestCase.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__cancelSaveTestCase(soap, &soap_tmp_TT1__cancelSaveTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__cancelSaveTestCase(soap, &soap_tmp_TT1__cancelSaveTestCase, "TT1:cancelSaveTestCase", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__cancelSaveTestCase(soap, &soap_tmp_TT1__cancelSaveTestCase, "TT1:cancelSaveTestCase", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__cancelSaveTestCaseResponse = soap_get_TT1__cancelSaveTestCaseResponse(soap, NULL, "TT1:cancelSaveTestCaseResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__cancelSaveTestCaseResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testRunNumber, char *summary, bool bDownloadAttachments, struct TT1__getTestRunResponse &_param_52)
{	struct TT1__getTestRun soap_tmp_TT1__getTestRun;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getTestRun.cookie = cookie;
	soap_tmp_TT1__getTestRun.testRunNumber = testRunNumber;
	soap_tmp_TT1__getTestRun.summary = summary;
	soap_tmp_TT1__getTestRun.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getTestRun(soap, &soap_tmp_TT1__getTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getTestRun(soap, &soap_tmp_TT1__getTestRun, "TT1:getTestRun", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getTestRun(soap, &soap_tmp_TT1__getTestRun, "TT1:getTestRun", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getTestRunResponse(soap, &_param_52);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getTestRunResponse(soap, &_param_52, "TT1:getTestRunResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestRunByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__getTestRunByRecordIDResponse &_param_53)
{	struct TT1__getTestRunByRecordID soap_tmp_TT1__getTestRunByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getTestRunByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getTestRunByRecordID.cookie = cookie;
	soap_tmp_TT1__getTestRunByRecordID.recordID = recordID;
	soap_tmp_TT1__getTestRunByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getTestRunByRecordID(soap, &soap_tmp_TT1__getTestRunByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getTestRunByRecordID(soap, &soap_tmp_TT1__getTestRunByRecordID, "TT1:getTestRunByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getTestRunByRecordID(soap, &soap_tmp_TT1__getTestRunByRecordID, "TT1:getTestRunByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getTestRunByRecordIDResponse(soap, &_param_53);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getTestRunByRecordIDResponse(soap, &_param_53, "TT1:getTestRunByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testRunNumber, char *summary, int &result)
{	struct TT1__deleteTestRun soap_tmp_TT1__deleteTestRun;
	struct TT1__deleteTestRunResponse *soap_tmp_TT1__deleteTestRunResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteTestRun.cookie = cookie;
	soap_tmp_TT1__deleteTestRun.testRunNumber = testRunNumber;
	soap_tmp_TT1__deleteTestRun.summary = summary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteTestRun(soap, &soap_tmp_TT1__deleteTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteTestRun(soap, &soap_tmp_TT1__deleteTestRun, "TT1:deleteTestRun", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteTestRun(soap, &soap_tmp_TT1__deleteTestRun, "TT1:deleteTestRun", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteTestRunResponse = soap_get_TT1__deleteTestRunResponse(soap, NULL, "TT1:deleteTestRunResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteTestRunResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestRunByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__deleteTestRunByRecordID soap_tmp_TT1__deleteTestRunByRecordID;
	struct TT1__deleteTestRunByRecordIDResponse *soap_tmp_TT1__deleteTestRunByRecordIDResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteTestRunByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteTestRunByRecordID.cookie = cookie;
	soap_tmp_TT1__deleteTestRunByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteTestRunByRecordID(soap, &soap_tmp_TT1__deleteTestRunByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteTestRunByRecordID(soap, &soap_tmp_TT1__deleteTestRunByRecordID, "TT1:deleteTestRunByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteTestRunByRecordID(soap, &soap_tmp_TT1__deleteTestRunByRecordID, "TT1:deleteTestRunByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteTestRunByRecordIDResponse = soap_get_TT1__deleteTestRunByRecordIDResponse(soap, NULL, "TT1:deleteTestRunByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteTestRunByRecordIDResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testRunNumber, char *summary, bool bDownloadAttachments, struct TT1__editTestRunResponse &_param_54)
{	struct TT1__editTestRun soap_tmp_TT1__editTestRun;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editTestRun.cookie = cookie;
	soap_tmp_TT1__editTestRun.testRunNumber = testRunNumber;
	soap_tmp_TT1__editTestRun.summary = summary;
	soap_tmp_TT1__editTestRun.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editTestRun(soap, &soap_tmp_TT1__editTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editTestRun(soap, &soap_tmp_TT1__editTestRun, "TT1:editTestRun", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editTestRun(soap, &soap_tmp_TT1__editTestRun, "TT1:editTestRun", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editTestRunResponse(soap, &_param_54);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editTestRunResponse(soap, &_param_54, "TT1:editTestRunResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestRunByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__editTestRunByRecordIDResponse &_param_55)
{	struct TT1__editTestRunByRecordID soap_tmp_TT1__editTestRunByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editTestRunByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editTestRunByRecordID.cookie = cookie;
	soap_tmp_TT1__editTestRunByRecordID.recordID = recordID;
	soap_tmp_TT1__editTestRunByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editTestRunByRecordID(soap, &soap_tmp_TT1__editTestRunByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editTestRunByRecordID(soap, &soap_tmp_TT1__editTestRunByRecordID, "TT1:editTestRunByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editTestRunByRecordID(soap, &soap_tmp_TT1__editTestRunByRecordID, "TT1:editTestRunByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editTestRunByRecordIDResponse(soap, &_param_55);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editTestRunByRecordIDResponse(soap, &_param_55, "TT1:editTestRunByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CTestRun *pTestRun, int &result)
{	struct TT1__saveTestRun soap_tmp_TT1__saveTestRun;
	struct TT1__saveTestRunResponse *soap_tmp_TT1__saveTestRunResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#saveTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__saveTestRun.cookie = cookie;
	soap_tmp_TT1__saveTestRun.pTestRun = pTestRun;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__saveTestRun(soap, &soap_tmp_TT1__saveTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__saveTestRun(soap, &soap_tmp_TT1__saveTestRun, "TT1:saveTestRun", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__saveTestRun(soap, &soap_tmp_TT1__saveTestRun, "TT1:saveTestRun", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__saveTestRunResponse = soap_get_TT1__saveTestRunResponse(soap, NULL, "TT1:saveTestRunResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__saveTestRunResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__cancelSaveTestRun soap_tmp_TT1__cancelSaveTestRun;
	struct TT1__cancelSaveTestRunResponse *soap_tmp_TT1__cancelSaveTestRunResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#cancelSaveTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__cancelSaveTestRun.cookie = cookie;
	soap_tmp_TT1__cancelSaveTestRun.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__cancelSaveTestRun(soap, &soap_tmp_TT1__cancelSaveTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__cancelSaveTestRun(soap, &soap_tmp_TT1__cancelSaveTestRun, "TT1:cancelSaveTestRun", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__cancelSaveTestRun(soap, &soap_tmp_TT1__cancelSaveTestRun, "TT1:cancelSaveTestRun", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__cancelSaveTestRunResponse = soap_get_TT1__cancelSaveTestRunResponse(soap, NULL, "TT1:cancelSaveTestRunResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__cancelSaveTestRunResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__createDefectForTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__createDefectForTestRunResponse &_param_56)
{	struct TT1__createDefectForTestRun soap_tmp_TT1__createDefectForTestRun;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#createDefectForTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__createDefectForTestRun.cookie = cookie;
	soap_tmp_TT1__createDefectForTestRun.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__createDefectForTestRun(soap, &soap_tmp_TT1__createDefectForTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__createDefectForTestRun(soap, &soap_tmp_TT1__createDefectForTestRun, "TT1:createDefectForTestRun", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__createDefectForTestRun(soap, &soap_tmp_TT1__createDefectForTestRun, "TT1:createDefectForTestRun", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__createDefectForTestRunResponse(soap, &_param_56);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__createDefectForTestRunResponse(soap, &_param_56, "TT1:createDefectForTestRunResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__generateTestRuns(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, TT1ArrayOfCTestRunVariantField *testVariants, char *testRunSet, struct TT1__generateTestRunsResponse &_param_57)
{	struct TT1__generateTestRuns soap_tmp_TT1__generateTestRuns;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#generateTestRuns";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__generateTestRuns.cookie = cookie;
	soap_tmp_TT1__generateTestRuns.recordID = recordID;
	soap_tmp_TT1__generateTestRuns.testVariants = testVariants;
	soap_tmp_TT1__generateTestRuns.testRunSet = testRunSet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__generateTestRuns(soap, &soap_tmp_TT1__generateTestRuns);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__generateTestRuns(soap, &soap_tmp_TT1__generateTestRuns, "TT1:generateTestRuns", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__generateTestRuns(soap, &soap_tmp_TT1__generateTestRuns, "TT1:generateTestRuns", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__generateTestRunsResponse(soap, &_param_57);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__generateTestRunsResponse(soap, &_param_57, "TT1:generateTestRunsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CFolder *pFolder, LONG64 &recordID)
{	struct TT1__addFolder soap_tmp_TT1__addFolder;
	struct TT1__addFolderResponse *soap_tmp_TT1__addFolderResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#addFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addFolder.cookie = cookie;
	soap_tmp_TT1__addFolder.pFolder = pFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addFolder(soap, &soap_tmp_TT1__addFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addFolder(soap, &soap_tmp_TT1__addFolder, "TT1:addFolder", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addFolder(soap, &soap_tmp_TT1__addFolder, "TT1:addFolder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addFolderResponse = soap_get_TT1__addFolderResponse(soap, NULL, "TT1:addFolderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_TT1__addFolderResponse->recordID;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *folderPath, struct TT1__editFolderResponse &_param_58)
{	struct TT1__editFolder soap_tmp_TT1__editFolder;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editFolder.cookie = cookie;
	soap_tmp_TT1__editFolder.folderPath = folderPath;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editFolder(soap, &soap_tmp_TT1__editFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editFolder(soap, &soap_tmp_TT1__editFolder, "TT1:editFolder", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editFolder(soap, &soap_tmp_TT1__editFolder, "TT1:editFolder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editFolderResponse(soap, &_param_58);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editFolderResponse(soap, &_param_58, "TT1:editFolderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, struct TT1__editFolderByRecordIDResponse &_param_59)
{	struct TT1__editFolderByRecordID soap_tmp_TT1__editFolderByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#editFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__editFolderByRecordID.cookie = cookie;
	soap_tmp_TT1__editFolderByRecordID.recordID = recordID;
	soap_tmp_TT1__editFolderByRecordID.publicFolder = publicFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__editFolderByRecordID(soap, &soap_tmp_TT1__editFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__editFolderByRecordID(soap, &soap_tmp_TT1__editFolderByRecordID, "TT1:editFolderByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__editFolderByRecordID(soap, &soap_tmp_TT1__editFolderByRecordID, "TT1:editFolderByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__editFolderByRecordIDResponse(soap, &_param_59);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__editFolderByRecordIDResponse(soap, &_param_59, "TT1:editFolderByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CFolder *pFolder, int &result)
{	struct TT1__saveFolder soap_tmp_TT1__saveFolder;
	struct TT1__saveFolderResponse *soap_tmp_TT1__saveFolderResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#saveFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__saveFolder.cookie = cookie;
	soap_tmp_TT1__saveFolder.pFolder = pFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__saveFolder(soap, &soap_tmp_TT1__saveFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__saveFolder(soap, &soap_tmp_TT1__saveFolder, "TT1:saveFolder", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__saveFolder(soap, &soap_tmp_TT1__saveFolder, "TT1:saveFolder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__saveFolderResponse = soap_get_TT1__saveFolderResponse(soap, NULL, "TT1:saveFolderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__saveFolderResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct TT1__cancelSaveFolder soap_tmp_TT1__cancelSaveFolder;
	struct TT1__cancelSaveFolderResponse *soap_tmp_TT1__cancelSaveFolderResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#cancelSaveFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__cancelSaveFolder.cookie = cookie;
	soap_tmp_TT1__cancelSaveFolder.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__cancelSaveFolder(soap, &soap_tmp_TT1__cancelSaveFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__cancelSaveFolder(soap, &soap_tmp_TT1__cancelSaveFolder, "TT1:cancelSaveFolder", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__cancelSaveFolder(soap, &soap_tmp_TT1__cancelSaveFolder, "TT1:cancelSaveFolder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__cancelSaveFolderResponse = soap_get_TT1__cancelSaveFolderResponse(soap, NULL, "TT1:cancelSaveFolderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__cancelSaveFolderResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *path, struct TT1__getFolderResponse &_param_60)
{	struct TT1__getFolder soap_tmp_TT1__getFolder;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getFolder.cookie = cookie;
	soap_tmp_TT1__getFolder.path = path;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getFolder(soap, &soap_tmp_TT1__getFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getFolder(soap, &soap_tmp_TT1__getFolder, "TT1:getFolder", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getFolder(soap, &soap_tmp_TT1__getFolder, "TT1:getFolder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getFolderResponse(soap, &_param_60);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getFolderResponse(soap, &_param_60, "TT1:getFolderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, struct TT1__getFolderByRecordIDResponse &_param_61)
{	struct TT1__getFolderByRecordID soap_tmp_TT1__getFolderByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getFolderByRecordID.cookie = cookie;
	soap_tmp_TT1__getFolderByRecordID.recordID = recordID;
	soap_tmp_TT1__getFolderByRecordID.publicFolder = publicFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getFolderByRecordID(soap, &soap_tmp_TT1__getFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getFolderByRecordID(soap, &soap_tmp_TT1__getFolderByRecordID, "TT1:getFolderByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getFolderByRecordID(soap, &soap_tmp_TT1__getFolderByRecordID, "TT1:getFolderByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getFolderByRecordIDResponse(soap, &_param_61);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getFolderByRecordIDResponse(soap, &_param_61, "TT1:getFolderByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *folderPath, int &result)
{	struct TT1__deleteFolder soap_tmp_TT1__deleteFolder;
	struct TT1__deleteFolderResponse *soap_tmp_TT1__deleteFolderResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteFolder.cookie = cookie;
	soap_tmp_TT1__deleteFolder.folderPath = folderPath;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteFolder(soap, &soap_tmp_TT1__deleteFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteFolder(soap, &soap_tmp_TT1__deleteFolder, "TT1:deleteFolder", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteFolder(soap, &soap_tmp_TT1__deleteFolder, "TT1:deleteFolder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteFolderResponse = soap_get_TT1__deleteFolderResponse(soap, NULL, "TT1:deleteFolderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteFolderResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, int &result)
{	struct TT1__deleteFolderByRecordID soap_tmp_TT1__deleteFolderByRecordID;
	struct TT1__deleteFolderByRecordIDResponse *soap_tmp_TT1__deleteFolderByRecordIDResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#deleteFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__deleteFolderByRecordID.cookie = cookie;
	soap_tmp_TT1__deleteFolderByRecordID.recordID = recordID;
	soap_tmp_TT1__deleteFolderByRecordID.publicFolder = publicFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__deleteFolderByRecordID(soap, &soap_tmp_TT1__deleteFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__deleteFolderByRecordID(soap, &soap_tmp_TT1__deleteFolderByRecordID, "TT1:deleteFolderByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__deleteFolderByRecordID(soap, &soap_tmp_TT1__deleteFolderByRecordID, "TT1:deleteFolderByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__deleteFolderByRecordIDResponse = soap_get_TT1__deleteFolderByRecordIDResponse(soap, NULL, "TT1:deleteFolderByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__deleteFolderByRecordIDResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addEntityToFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, LONG64 entityRecordID, char *entityTableName, int &itemRecordID)
{	struct TT1__addEntityToFolderByRecordID soap_tmp_TT1__addEntityToFolderByRecordID;
	struct TT1__addEntityToFolderByRecordIDResponse *soap_tmp_TT1__addEntityToFolderByRecordIDResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#addEntityToFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__addEntityToFolderByRecordID.cookie = cookie;
	soap_tmp_TT1__addEntityToFolderByRecordID.recordID = recordID;
	soap_tmp_TT1__addEntityToFolderByRecordID.publicFolder = publicFolder;
	soap_tmp_TT1__addEntityToFolderByRecordID.entityRecordID = entityRecordID;
	soap_tmp_TT1__addEntityToFolderByRecordID.entityTableName = entityTableName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__addEntityToFolderByRecordID(soap, &soap_tmp_TT1__addEntityToFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__addEntityToFolderByRecordID(soap, &soap_tmp_TT1__addEntityToFolderByRecordID, "TT1:addEntityToFolderByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__addEntityToFolderByRecordID(soap, &soap_tmp_TT1__addEntityToFolderByRecordID, "TT1:addEntityToFolderByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &itemRecordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__addEntityToFolderByRecordIDResponse = soap_get_TT1__addEntityToFolderByRecordIDResponse(soap, NULL, "TT1:addEntityToFolderByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	itemRecordID = soap_tmp_TT1__addEntityToFolderByRecordIDResponse->itemRecordID;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__removeEntityFromFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, TT1__CFolderItem *entity, int &result)
{	struct TT1__removeEntityFromFolderByRecordID soap_tmp_TT1__removeEntityFromFolderByRecordID;
	struct TT1__removeEntityFromFolderByRecordIDResponse *soap_tmp_TT1__removeEntityFromFolderByRecordIDResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#removeEntityFromFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__removeEntityFromFolderByRecordID.cookie = cookie;
	soap_tmp_TT1__removeEntityFromFolderByRecordID.recordID = recordID;
	soap_tmp_TT1__removeEntityFromFolderByRecordID.publicFolder = publicFolder;
	soap_tmp_TT1__removeEntityFromFolderByRecordID.entity = entity;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__removeEntityFromFolderByRecordID(soap, &soap_tmp_TT1__removeEntityFromFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__removeEntityFromFolderByRecordID(soap, &soap_tmp_TT1__removeEntityFromFolderByRecordID, "TT1:removeEntityFromFolderByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__removeEntityFromFolderByRecordID(soap, &soap_tmp_TT1__removeEntityFromFolderByRecordID, "TT1:removeEntityFromFolderByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__removeEntityFromFolderByRecordIDResponse = soap_get_TT1__removeEntityFromFolderByRecordIDResponse(soap, NULL, "TT1:removeEntityFromFolderByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_TT1__removeEntityFromFolderByRecordIDResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getEntityListForFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, struct TT1__getEntityListForFolderByRecordIDResponse &_param_62)
{	struct TT1__getEntityListForFolderByRecordID soap_tmp_TT1__getEntityListForFolderByRecordID;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getEntityListForFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getEntityListForFolderByRecordID.cookie = cookie;
	soap_tmp_TT1__getEntityListForFolderByRecordID.recordID = recordID;
	soap_tmp_TT1__getEntityListForFolderByRecordID.publicFolder = publicFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getEntityListForFolderByRecordID(soap, &soap_tmp_TT1__getEntityListForFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getEntityListForFolderByRecordID(soap, &soap_tmp_TT1__getEntityListForFolderByRecordID, "TT1:getEntityListForFolderByRecordID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getEntityListForFolderByRecordID(soap, &soap_tmp_TT1__getEntityListForFolderByRecordID, "TT1:getEntityListForFolderByRecordID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_TT1__getEntityListForFolderByRecordIDResponse(soap, &_param_62);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_TT1__getEntityListForFolderByRecordIDResponse(soap, &_param_62, "TT1:getEntityListForFolderByRecordIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getFolderPathSeparator(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char &separator)
{	struct TT1__getFolderPathSeparator soap_tmp_TT1__getFolderPathSeparator;
	struct TT1__getFolderPathSeparatorResponse *soap_tmp_TT1__getFolderPathSeparatorResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getFolderPathSeparator";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getFolderPathSeparator.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getFolderPathSeparator(soap, &soap_tmp_TT1__getFolderPathSeparator);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getFolderPathSeparator(soap, &soap_tmp_TT1__getFolderPathSeparator, "TT1:getFolderPathSeparator", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getFolderPathSeparator(soap, &soap_tmp_TT1__getFolderPathSeparator, "TT1:getFolderPathSeparator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_xsd__byte(soap, &separator);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__getFolderPathSeparatorResponse = soap_get_TT1__getFolderPathSeparatorResponse(soap, NULL, "TT1:getFolderPathSeparatorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	separator = soap_tmp_TT1__getFolderPathSeparatorResponse->separator;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getRootPublicFolderPath(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *&strPublicPath)
{	struct TT1__getRootPublicFolderPath soap_tmp_TT1__getRootPublicFolderPath;
	struct TT1__getRootPublicFolderPathResponse *soap_tmp_TT1__getRootPublicFolderPathResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getRootPublicFolderPath";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getRootPublicFolderPath.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getRootPublicFolderPath(soap, &soap_tmp_TT1__getRootPublicFolderPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getRootPublicFolderPath(soap, &soap_tmp_TT1__getRootPublicFolderPath, "TT1:getRootPublicFolderPath", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getRootPublicFolderPath(soap, &soap_tmp_TT1__getRootPublicFolderPath, "TT1:getRootPublicFolderPath", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	strPublicPath = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__getRootPublicFolderPathResponse = soap_get_TT1__getRootPublicFolderPathResponse(soap, NULL, "TT1:getRootPublicFolderPathResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	strPublicPath = soap_tmp_TT1__getRootPublicFolderPathResponse->strPublicPath;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getRootPrivateFolderPath(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *&strPrivatePath)
{	struct TT1__getRootPrivateFolderPath soap_tmp_TT1__getRootPrivateFolderPath;
	struct TT1__getRootPrivateFolderPathResponse *soap_tmp_TT1__getRootPrivateFolderPathResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://10.1.20.12:80/scripts/ttsoapcgi.exe";
	if (!soap_action)
		soap_action = "urn:testtrack-interface#getRootPrivateFolderPath";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_TT1__getRootPrivateFolderPath.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_TT1__getRootPrivateFolderPath(soap, &soap_tmp_TT1__getRootPrivateFolderPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_TT1__getRootPrivateFolderPath(soap, &soap_tmp_TT1__getRootPrivateFolderPath, "TT1:getRootPrivateFolderPath", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_TT1__getRootPrivateFolderPath(soap, &soap_tmp_TT1__getRootPrivateFolderPath, "TT1:getRootPrivateFolderPath", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	strPrivatePath = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_TT1__getRootPrivateFolderPathResponse = soap_get_TT1__getRootPrivateFolderPathResponse(soap, NULL, "TT1:getRootPrivateFolderPathResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	strPrivatePath = soap_tmp_TT1__getRootPrivateFolderPathResponse->strPrivatePath;
	return soap_closesock(soap);
}

/* End of TestTrackClient.cpp */
