/* TestTrackStub.h
   Generated by gSOAP 2.7.10 from ttsoapcgi.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef TestTrackStub_H
#define TestTrackStub_H
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (7)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() : __ptr(NULL), __size(0), id(NULL), type(NULL), options(NULL), soap(NULL) { }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CDatabase
#define SOAP_TYPE_TT1__CDatabase (15)
/* TT1:CDatabase */
class SOAP_CMAC TT1__CDatabase
{
public:
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_TT1__CDatabase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CDatabase() : name(NULL), soap(NULL) { }
	virtual ~TT1__CDatabase() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CProjectDataOption
#define SOAP_TYPE_TT1__CProjectDataOption (17)
/* TT1:CProjectDataOption */
class SOAP_CMAC TT1__CProjectDataOption
{
public:
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_TT1__CProjectDataOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CProjectDataOption() : name(NULL), soap(NULL) { }
	virtual ~TT1__CProjectDataOption() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CProject
#define SOAP_TYPE_TT1__CProject (19)
/* TT1:CProject */
class SOAP_CMAC TT1__CProject
{
public:
	TT1__CDatabase *database;	/* required element of type TT1:CDatabase */
	class TT1ArrayOfCProjectDataOption *options;	/* optional element of type ArrayOfCProjectDataOption */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_TT1__CProject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CProject() : database(NULL), options(NULL), soap(NULL) { }
	virtual ~TT1__CProject() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CDatabaseTable
#define SOAP_TYPE_TT1__CDatabaseTable (21)
/* TT1:CDatabaseTable */
class SOAP_CMAC TT1__CDatabaseTable
{
public:
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_TT1__CDatabaseTable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CDatabaseTable() : name(NULL), soap(NULL) { }
	virtual ~TT1__CDatabaseTable() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CTableField
#define SOAP_TYPE_TT1__CTableField (23)
/* TT1:CTableField */
class SOAP_CMAC TT1__CTableField
{
public:
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_TT1__CTableField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CTableField() : name(NULL), soap(NULL) { }
	virtual ~TT1__CTableField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CFieldValue
#define SOAP_TYPE_TT1__CFieldValue (25)
/* TT1:CFieldValue */
class SOAP_CMAC TT1__CFieldValue
{
public:
	char *value;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_TT1__CFieldValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CFieldValue() : value(NULL), soap(NULL) { }
	virtual ~TT1__CFieldValue() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CTableColumn
#define SOAP_TYPE_TT1__CTableColumn (27)
/* TT1:CTableColumn */
class SOAP_CMAC TT1__CTableColumn
{
public:
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_TT1__CTableColumn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CTableColumn() : name(NULL), soap(NULL) { }
	virtual ~TT1__CTableColumn() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CFilter
#define SOAP_TYPE_TT1__CFilter (29)
/* TT1:CFilter */
class SOAP_CMAC TT1__CFilter
{
public:
	char *name;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_TT1__CFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CFilter() : name(NULL), soap(NULL) { }
	virtual ~TT1__CFilter() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CRecordData
#define SOAP_TYPE_TT1__CRecordData (31)
/* TT1:CRecordData */
class SOAP_CMAC TT1__CRecordData
{
public:
	char *value;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_TT1__CRecordData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CRecordData() : value(NULL), soap(NULL) { }
	virtual ~TT1__CRecordData() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CRecordRowSoap
#define SOAP_TYPE_TT1__CRecordRowSoap (33)
/* TT1:CRecordRowSoap */
class SOAP_CMAC TT1__CRecordRowSoap
{
public:
	class TT1ArrayOfCRecordData *row;	/* required element of type ArrayOfCRecordData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_TT1__CRecordRowSoap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CRecordRowSoap() : row(NULL), soap(NULL) { }
	virtual ~TT1__CRecordRowSoap() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CRecordListSoap
#define SOAP_TYPE_TT1__CRecordListSoap (35)
/* TT1:CRecordListSoap */
class SOAP_CMAC TT1__CRecordListSoap
{
public:
	class TT1ArrayOfCTableColumn *columnlist;	/* optional element of type ArrayOfCTableColumn */
	class TT1ArrayOfCRecordRowSoap *records;	/* optional element of type ArrayOfCRecordRowSoap */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_TT1__CRecordListSoap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CRecordListSoap() : columnlist(NULL), records(NULL), soap(NULL) { }
	virtual ~TT1__CRecordListSoap() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CItemWithDBRecordId
#define SOAP_TYPE_TT1__CItemWithDBRecordId (36)
/* TT1:CItemWithDBRecordId */
class SOAP_CMAC TT1__CItemWithDBRecordId
{
public:
	LONG64 recordid;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_TT1__CItemWithDBRecordId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CItemWithDBRecordId() : recordid(0), soap(NULL) { }
	virtual ~TT1__CItemWithDBRecordId() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CFileAttachment
#define SOAP_TYPE_TT1__CFileAttachment (43)
/* TT1:CFileAttachment */
class SOAP_CMAC TT1__CFileAttachment
{
public:
	xsd__base64Binary *m_pFileData;	/* optional element of type xsd:base64Binary */
	char *m_strFileName;	/* optional element of type xsd:string */
	char *m_strArchiveName;	/* optional element of type xsd:string */
	char *m_strType;	/* optional element of type xsd:string */
	LONG64 *m_scriptOrder;	/* optional element of type xsd:long */
	char *m_strScriptState;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_TT1__CFileAttachment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CFileAttachment() : m_pFileData(NULL), m_strFileName(NULL), m_strArchiveName(NULL), m_strType(NULL), m_scriptOrder(NULL), m_strScriptState(NULL), soap(NULL) { }
	virtual ~TT1__CFileAttachment() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CEventDefinition
#define SOAP_TYPE_TT1__CEventDefinition (66)
/* TT1:CEventDefinition */
class SOAP_CMAC TT1__CEventDefinition
{
public:
	char *name;	/* optional element of type xsd:string */
	bool *user;	/* optional element of type xsd:boolean */
	bool *datetime;	/* optional element of type xsd:boolean */
	bool *notes;	/* optional element of type xsd:boolean */
	bool *resultingState;	/* optional element of type xsd:boolean */
	class TT1ArrayOfCFieldValue *resultingStateValues;	/* optional element of type ArrayOfCFieldValue */
	bool *fileattachments;	/* optional element of type xsd:boolean */
	bool *timeTracking;	/* optional element of type xsd:boolean */
	bool *timeSumOfAll;	/* optional element of type xsd:boolean */
	bool *timeHoursSinceLast;	/* optional element of type xsd:boolean */
	bool *newAssignment;	/* optional element of type xsd:boolean */
	bool *releaseNotes;	/* optional element of type xsd:boolean */
	class TT1ArrayOfCField *customFields;	/* optional element of type ArrayOfCField */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_TT1__CEventDefinition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CEventDefinition() : name(NULL), user(NULL), datetime(NULL), notes(NULL), resultingState(NULL), resultingStateValues(NULL), fileattachments(NULL), timeTracking(NULL), timeSumOfAll(NULL), timeHoursSinceLast(NULL), newAssignment(NULL), releaseNotes(NULL), customFields(NULL), soap(NULL) { }
	virtual ~TT1__CEventDefinition() { }
};
#endif

#ifndef SOAP_TYPE_TT1__PhoneNumber
#define SOAP_TYPE_TT1__PhoneNumber (72)
/* TT1:PhoneNumber */
class SOAP_CMAC TT1__PhoneNumber
{
public:
	char *numbertype;	/* optional element of type xsd:string */
	char *phonenumber;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_TT1__PhoneNumber */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__PhoneNumber() : numbertype(NULL), phonenumber(NULL), soap(NULL) { }
	virtual ~TT1__PhoneNumber() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CGlobalUser
#define SOAP_TYPE_TT1__CGlobalUser (74)
/* TT1:CGlobalUser */
class SOAP_CMAC TT1__CGlobalUser
{
public:
	char *loginname;	/* optional element of type xsd:string */
	char *name;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_TT1__CGlobalUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CGlobalUser() : loginname(NULL), name(NULL), soap(NULL) { }
	virtual ~TT1__CGlobalUser() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CUserLicense
#define SOAP_TYPE_TT1__CUserLicense (76)
/* TT1:CUserLicense */
class SOAP_CMAC TT1__CUserLicense
{
public:
	char *name;	/* optional element of type xsd:string */
	int *numberUsed;	/* optional element of type xsd:int */
	int *numberTotal;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_TT1__CUserLicense */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CUserLicense() : name(NULL), numberUsed(NULL), numberTotal(NULL), soap(NULL) { }
	virtual ~TT1__CUserLicense() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfstring
#define SOAP_TYPE_TT1ArrayOfstring (14)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC TT1ArrayOfstring
{
public:
	char **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_TT1ArrayOfstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfstring() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfstring() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCDatabase
#define SOAP_TYPE_TT1ArrayOfCDatabase (16)
/* SOAP encoded array of TT1:CDatabase schema type: */
class SOAP_CMAC TT1ArrayOfCDatabase
{
public:
	TT1__CDatabase **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_TT1ArrayOfCDatabase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCDatabase() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCDatabase() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCProjectDataOption
#define SOAP_TYPE_TT1ArrayOfCProjectDataOption (18)
/* SOAP encoded array of TT1:CProjectDataOption schema type: */
class SOAP_CMAC TT1ArrayOfCProjectDataOption
{
public:
	TT1__CProjectDataOption **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_TT1ArrayOfCProjectDataOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCProjectDataOption() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCProjectDataOption() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCProject
#define SOAP_TYPE_TT1ArrayOfCProject (20)
/* SOAP encoded array of TT1:CProject schema type: */
class SOAP_CMAC TT1ArrayOfCProject
{
public:
	TT1__CProject **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_TT1ArrayOfCProject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCProject() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCProject() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCDatabaseTable
#define SOAP_TYPE_TT1ArrayOfCDatabaseTable (22)
/* SOAP encoded array of TT1:CDatabaseTable schema type: */
class SOAP_CMAC TT1ArrayOfCDatabaseTable
{
public:
	TT1__CDatabaseTable **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_TT1ArrayOfCDatabaseTable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCDatabaseTable() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCDatabaseTable() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCTableField
#define SOAP_TYPE_TT1ArrayOfCTableField (24)
/* SOAP encoded array of TT1:CTableField schema type: */
class SOAP_CMAC TT1ArrayOfCTableField
{
public:
	TT1__CTableField **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_TT1ArrayOfCTableField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCTableField() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCTableField() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCFieldValue
#define SOAP_TYPE_TT1ArrayOfCFieldValue (26)
/* SOAP encoded array of TT1:CFieldValue schema type: */
class SOAP_CMAC TT1ArrayOfCFieldValue
{
public:
	TT1__CFieldValue **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_TT1ArrayOfCFieldValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCFieldValue() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCFieldValue() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCTableColumn
#define SOAP_TYPE_TT1ArrayOfCTableColumn (28)
/* SOAP encoded array of TT1:CTableColumn schema type: */
class SOAP_CMAC TT1ArrayOfCTableColumn
{
public:
	TT1__CTableColumn **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_TT1ArrayOfCTableColumn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCTableColumn() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCTableColumn() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCFilter
#define SOAP_TYPE_TT1ArrayOfCFilter (30)
/* SOAP encoded array of TT1:CFilter schema type: */
class SOAP_CMAC TT1ArrayOfCFilter
{
public:
	TT1__CFilter **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_TT1ArrayOfCFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCFilter() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCFilter() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCRecordData
#define SOAP_TYPE_TT1ArrayOfCRecordData (32)
/* SOAP encoded array of TT1:CRecordData schema type: */
class SOAP_CMAC TT1ArrayOfCRecordData
{
public:
	TT1__CRecordData **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_TT1ArrayOfCRecordData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCRecordData() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCRecordData() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCRecordRowSoap
#define SOAP_TYPE_TT1ArrayOfCRecordRowSoap (34)
/* SOAP encoded array of TT1:CRecordRowSoap schema type: */
class SOAP_CMAC TT1ArrayOfCRecordRowSoap
{
public:
	TT1__CRecordRowSoap **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_TT1ArrayOfCRecordRowSoap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCRecordRowSoap() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCRecordRowSoap() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CItemToTrack
#define SOAP_TYPE_TT1__CItemToTrack (37)
/* TT1:CItemToTrack */
class SOAP_CMAC TT1__CItemToTrack : public TT1__CItemWithDBRecordId
{
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_TT1__CItemToTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CItemToTrack()  { }
	virtual ~TT1__CItemToTrack() { }
};
#endif

#ifndef SOAP_TYPE_TT1__COrderedItemWithDBRecordId
#define SOAP_TYPE_TT1__COrderedItemWithDBRecordId (38)
/* TT1:COrderedItemWithDBRecordId */
class SOAP_CMAC TT1__COrderedItemWithDBRecordId : public TT1__CItemWithDBRecordId
{
public:
	LONG64 order;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_TT1__COrderedItemWithDBRecordId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__COrderedItemWithDBRecordId() : order(0) { }
	virtual ~TT1__COrderedItemWithDBRecordId() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CSCCFileRecord
#define SOAP_TYPE_TT1__CSCCFileRecord (41)
/* TT1:CSCCFileRecord */
class SOAP_CMAC TT1__CSCCFileRecord : public TT1__CItemWithDBRecordId
{
public:
	char *m_strFileName;	/* required element of type xsd:string */
	char *m_strFixedRevision;	/* optional element of type xsd:string */
	time_t *m_dateFixedTimestamp;	/* optional element of type xsd:dateTime */
	char *m_strType;	/* optional element of type xsd:string */
	LONG64 *m_scriptOrder;	/* optional element of type xsd:long */
	char *m_strScriptState;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_TT1__CSCCFileRecord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CSCCFileRecord() : m_strFileName(NULL), m_strFixedRevision(NULL), m_dateFixedTimestamp(NULL), m_strType(NULL), m_scriptOrder(NULL), m_strScriptState(NULL) { }
	virtual ~TT1__CSCCFileRecord() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCSCCFileRecord
#define SOAP_TYPE_TT1ArrayOfCSCCFileRecord (42)
/* SOAP encoded array of TT1:CSCCFileRecord schema type: */
class SOAP_CMAC TT1ArrayOfCSCCFileRecord
{
public:
	TT1__CSCCFileRecord **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_TT1ArrayOfCSCCFileRecord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCSCCFileRecord() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCSCCFileRecord() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCFileAttachment
#define SOAP_TYPE_TT1ArrayOfCFileAttachment (44)
/* SOAP encoded array of TT1:CFileAttachment schema type: */
class SOAP_CMAC TT1ArrayOfCFileAttachment
{
public:
	TT1__CFileAttachment **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_TT1ArrayOfCFileAttachment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCFileAttachment() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCFileAttachment() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CReportedByRecord
#define SOAP_TYPE_TT1__CReportedByRecord (45)
/* TT1:CReportedByRecord */
class SOAP_CMAC TT1__CReportedByRecord : public TT1__CItemWithDBRecordId
{
public:
	char *foundby;	/* optional element of type xsd:string */
	char *datefound;	/* optional element of type xsd:date */
	char *contactinfo;	/* optional element of type xsd:string */
	char *foundinversion;	/* optional element of type xsd:string */
	char *comments;	/* optional element of type xsd:string */
	char *reproduced;	/* optional element of type xsd:string */
	char *reproducedsteps;	/* optional element of type xsd:string */
	class TT1__CSystem *standardtestconfig;	/* optional element of type TT1:CSystem */
	char *otherhardwaresoftware;	/* optional element of type xsd:string */
	short *testconfigtype;	/* optional element of type xsd:short */
	TT1ArrayOfCFileAttachment *attachmentlist;	/* optional element of type ArrayOfCFileAttachment */
	short showorder;	/* required element of type xsd:short */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_TT1__CReportedByRecord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CReportedByRecord() : foundby(NULL), datefound(NULL), contactinfo(NULL), foundinversion(NULL), comments(NULL), reproduced(NULL), reproducedsteps(NULL), standardtestconfig(NULL), otherhardwaresoftware(NULL), testconfigtype(NULL), attachmentlist(NULL), showorder(0) { }
	virtual ~TT1__CReportedByRecord() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCReportedByRecord
#define SOAP_TYPE_TT1ArrayOfCReportedByRecord (46)
/* SOAP encoded array of TT1:CReportedByRecord schema type: */
class SOAP_CMAC TT1ArrayOfCReportedByRecord
{
public:
	TT1__CReportedByRecord **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_TT1ArrayOfCReportedByRecord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCReportedByRecord() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCReportedByRecord() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CField
#define SOAP_TYPE_TT1__CField (47)
/* TT1:CField */
class SOAP_CMAC TT1__CField : public TT1__CItemWithDBRecordId
{
public:
	char *name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_TT1__CField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CField() : name(NULL) { }
	virtual ~TT1__CField() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCField
#define SOAP_TYPE_TT1ArrayOfCField (59)
/* SOAP encoded array of TT1:CField schema type: */
class SOAP_CMAC TT1ArrayOfCField
{
public:
	TT1__CField **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_TT1ArrayOfCField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCField() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCField() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCTestRunVariantField
#define SOAP_TYPE_TT1ArrayOfCTestRunVariantField (60)
/* SOAP encoded array of TT1:CTestRunVariantField schema type: */
class SOAP_CMAC TT1ArrayOfCTestRunVariantField
{
public:
	class TT1__CTestRunVariantField **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_TT1ArrayOfCTestRunVariantField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCTestRunVariantField() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCTestRunVariantField() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCTestCaseVariantField
#define SOAP_TYPE_TT1ArrayOfCTestCaseVariantField (61)
/* SOAP encoded array of TT1:CTestCaseVariantField schema type: */
class SOAP_CMAC TT1ArrayOfCTestCaseVariantField
{
public:
	class TT1__CTestCaseVariantField **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_TT1ArrayOfCTestCaseVariantField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCTestCaseVariantField() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCTestCaseVariantField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CEvent
#define SOAP_TYPE_TT1__CEvent (62)
/* TT1:CEvent */
class SOAP_CMAC TT1__CEvent : public TT1__CItemWithDBRecordId
{
public:
	char *user;	/* optional element of type xsd:string */
	time_t date;	/* required element of type xsd:dateTime */
	char *notes;	/* optional element of type xsd:string */
	short eventaddorder;	/* required element of type xsd:short */
	char *name;	/* optional element of type xsd:string */
	LONG64 *parenteventid;	/* optional element of type xsd:long */
	TT1ArrayOfCFileAttachment *attachmentlist;	/* optional element of type ArrayOfCFileAttachment */
	TT1ArrayOfCField *fieldlist;	/* optional element of type ArrayOfCField */
	char *resultingstate;	/* optional element of type xsd:string */
	double *hours;	/* optional element of type xsd:double */
	TT1ArrayOfstring *assigntolist;	/* optional element of type ArrayOfstring */
	char *releasenotesversion;	/* optional element of type xsd:string */
	char *generatedeventtype;	/* optional element of type xsd:string */
	char *generatedbyname;	/* optional element of type xsd:string */
	double *totaltimespent;	/* optional element of type xsd:double */
	char *overrideuser;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_TT1__CEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CEvent() : user(NULL), date(0), notes(NULL), eventaddorder(0), name(NULL), parenteventid(NULL), attachmentlist(NULL), fieldlist(NULL), resultingstate(NULL), hours(NULL), assigntolist(NULL), releasenotesversion(NULL), generatedeventtype(NULL), generatedbyname(NULL), totaltimespent(NULL), overrideuser(NULL) { }
	virtual ~TT1__CEvent() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCEvent
#define SOAP_TYPE_TT1ArrayOfCEvent (63)
/* SOAP encoded array of TT1:CEvent schema type: */
class SOAP_CMAC TT1ArrayOfCEvent
{
public:
	TT1__CEvent **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_TT1ArrayOfCEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCEvent() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCEvent() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCDefectEvent
#define SOAP_TYPE_TT1ArrayOfCDefectEvent (65)
/* SOAP encoded array of TT1:CDefectEvent schema type: */
class SOAP_CMAC TT1ArrayOfCDefectEvent
{
public:
	class TT1__CDefectEvent **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_TT1ArrayOfCDefectEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCDefectEvent() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCDefectEvent() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCEventDefinition
#define SOAP_TYPE_TT1ArrayOfCEventDefinition (67)
/* SOAP encoded array of TT1:CEventDefinition schema type: */
class SOAP_CMAC TT1ArrayOfCEventDefinition
{
public:
	TT1__CEventDefinition **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_TT1ArrayOfCEventDefinition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCEventDefinition() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCEventDefinition() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CDefectEventDefinition
#define SOAP_TYPE_TT1__CDefectEventDefinition (68)
/* TT1:CDefectEventDefinition */
class SOAP_CMAC TT1__CDefectEventDefinition : public TT1__CEventDefinition
{
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_TT1__CDefectEventDefinition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CDefectEventDefinition()  { }
	virtual ~TT1__CDefectEventDefinition() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCDefectEventDefinition
#define SOAP_TYPE_TT1ArrayOfCDefectEventDefinition (69)
/* SOAP encoded array of TT1:CDefectEventDefinition schema type: */
class SOAP_CMAC TT1ArrayOfCDefectEventDefinition
{
public:
	TT1__CDefectEventDefinition **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_TT1ArrayOfCDefectEventDefinition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCDefectEventDefinition() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCDefectEventDefinition() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCGlobalUser
#define SOAP_TYPE_TT1ArrayOfCGlobalUser (75)
/* SOAP encoded array of TT1:CGlobalUser schema type: */
class SOAP_CMAC TT1ArrayOfCGlobalUser
{
public:
	TT1__CGlobalUser **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_TT1ArrayOfCGlobalUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCGlobalUser() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCGlobalUser() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCUserLicense
#define SOAP_TYPE_TT1ArrayOfCUserLicense (77)
/* SOAP encoded array of TT1:CUserLicense schema type: */
class SOAP_CMAC TT1ArrayOfCUserLicense
{
public:
	TT1__CUserLicense **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_TT1ArrayOfCUserLicense */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCUserLicense() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCUserLicense() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCLinkedItem
#define SOAP_TYPE_TT1ArrayOfCLinkedItem (79)
/* SOAP encoded array of TT1:CLinkedItem schema type: */
class SOAP_CMAC TT1ArrayOfCLinkedItem
{
public:
	class TT1__CLinkedItem **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_TT1ArrayOfCLinkedItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCLinkedItem() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCLinkedItem() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCLinkHistoryItem
#define SOAP_TYPE_TT1ArrayOfCLinkHistoryItem (81)
/* SOAP encoded array of TT1:CLinkHistoryItem schema type: */
class SOAP_CMAC TT1ArrayOfCLinkHistoryItem
{
public:
	class TT1__CLinkHistoryItem **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_TT1ArrayOfCLinkHistoryItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCLinkHistoryItem() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCLinkHistoryItem() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCLink
#define SOAP_TYPE_TT1ArrayOfCLink (83)
/* SOAP encoded array of TT1:CLink schema type: */
class SOAP_CMAC TT1ArrayOfCLink
{
public:
	class TT1__CLink **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_TT1ArrayOfCLink */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCLink() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCLink() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCItemToTrack
#define SOAP_TYPE_TT1ArrayOfCItemToTrack (86)
/* SOAP encoded array of TT1:CItemToTrack schema type: */
class SOAP_CMAC TT1ArrayOfCItemToTrack
{
public:
	TT1__CItemToTrack **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_TT1ArrayOfCItemToTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCItemToTrack() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCItemToTrack() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CFolderItem
#define SOAP_TYPE_TT1__CFolderItem (88)
/* TT1:CFolderItem */
class SOAP_CMAC TT1__CFolderItem : public TT1__CItemWithDBRecordId
{
public:
	char *entitytablename;	/* required element of type xsd:string */
	LONG64 entityrecordid;	/* required element of type xsd:long */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE_TT1__CFolderItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CFolderItem() : entitytablename(NULL), entityrecordid(0) { }
	virtual ~TT1__CFolderItem() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCFolder
#define SOAP_TYPE_TT1ArrayOfCFolder (89)
/* SOAP encoded array of TT1:CFolder schema type: */
class SOAP_CMAC TT1ArrayOfCFolder
{
public:
	class TT1__CFolder **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE_TT1ArrayOfCFolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCFolder() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCFolder() { }
};
#endif

#ifndef SOAP_TYPE_TT1ArrayOfCFolderItem
#define SOAP_TYPE_TT1ArrayOfCFolderItem (90)
/* SOAP encoded array of TT1:CFolderItem schema type: */
class SOAP_CMAC TT1ArrayOfCFolderItem
{
public:
	TT1__CFolderItem **__ptritem;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE_TT1ArrayOfCFolderItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1ArrayOfCFolderItem() : __ptritem(NULL), __size(0), soap(NULL) { }
	virtual ~TT1ArrayOfCFolderItem() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CSystemBase
#define SOAP_TYPE_TT1__CSystemBase (39)
/* TT1:CSystemBase */
class SOAP_CMAC TT1__CSystemBase : public TT1__CItemToTrack
{
public:
	char *systemname;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_TT1__CSystemBase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CSystemBase() : systemname(NULL) { }
	virtual ~TT1__CSystemBase() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CStringField
#define SOAP_TYPE_TT1__CStringField (48)
/* TT1:CStringField */
class SOAP_CMAC TT1__CStringField : public TT1__CField
{
public:
	char *value;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_TT1__CStringField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CStringField() : value(NULL) { }
	virtual ~TT1__CStringField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CIntegerField
#define SOAP_TYPE_TT1__CIntegerField (49)
/* TT1:CIntegerField */
class SOAP_CMAC TT1__CIntegerField : public TT1__CField
{
public:
	int value;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_TT1__CIntegerField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CIntegerField() : value(0) { }
	virtual ~TT1__CIntegerField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CDecimalField
#define SOAP_TYPE_TT1__CDecimalField (50)
/* TT1:CDecimalField */
class SOAP_CMAC TT1__CDecimalField : public TT1__CField
{
public:
	double value;	/* required element of type xsd:double */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_TT1__CDecimalField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CDecimalField() : value(0) { }
	virtual ~TT1__CDecimalField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CBooleanField
#define SOAP_TYPE_TT1__CBooleanField (51)
/* TT1:CBooleanField */
class SOAP_CMAC TT1__CBooleanField : public TT1__CField
{
public:
	bool value;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_TT1__CBooleanField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CBooleanField() : value((bool)0) { }
	virtual ~TT1__CBooleanField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CDateField
#define SOAP_TYPE_TT1__CDateField (52)
/* TT1:CDateField */
class SOAP_CMAC TT1__CDateField : public TT1__CField
{
public:
	char *value;	/* optional element of type xsd:date */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_TT1__CDateField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CDateField() : value(NULL) { }
	virtual ~TT1__CDateField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CDateTimeField
#define SOAP_TYPE_TT1__CDateTimeField (53)
/* TT1:CDateTimeField */
class SOAP_CMAC TT1__CDateTimeField : public TT1__CField
{
public:
	time_t *value;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_TT1__CDateTimeField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CDateTimeField() : value(NULL) { }
	virtual ~TT1__CDateTimeField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CDropdownField
#define SOAP_TYPE_TT1__CDropdownField (54)
/* TT1:CDropdownField */
class SOAP_CMAC TT1__CDropdownField : public TT1__CField
{
public:
	char *value;	/* optional element of type xsd:string */
	TT1ArrayOfCFieldValue *dropdownValues;	/* optional element of type ArrayOfCFieldValue */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_TT1__CDropdownField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CDropdownField() : value(NULL), dropdownValues(NULL) { }
	virtual ~TT1__CDropdownField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CMultiSelectDropdownField
#define SOAP_TYPE_TT1__CMultiSelectDropdownField (55)
/* TT1:CMultiSelectDropdownField */
class SOAP_CMAC TT1__CMultiSelectDropdownField : public TT1__CField
{
public:
	TT1ArrayOfCFieldValue *values;	/* optional element of type ArrayOfCFieldValue */
	TT1ArrayOfCFieldValue *dropdownValues;	/* optional element of type ArrayOfCFieldValue */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_TT1__CMultiSelectDropdownField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CMultiSelectDropdownField() : values(NULL), dropdownValues(NULL) { }
	virtual ~TT1__CMultiSelectDropdownField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CVersionField
#define SOAP_TYPE_TT1__CVersionField (58)
/* TT1:CVersionField */
class SOAP_CMAC TT1__CVersionField : public TT1__CField
{
public:
	char *value;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_TT1__CVersionField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CVersionField() : value(NULL) { }
	virtual ~TT1__CVersionField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CDefectEvent
#define SOAP_TYPE_TT1__CDefectEvent (64)
/* TT1:CDefectEvent */
class SOAP_CMAC TT1__CDefectEvent : public TT1__CEvent
{
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_TT1__CDefectEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CDefectEvent()  { }
	virtual ~TT1__CDefectEvent() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CDefect
#define SOAP_TYPE_TT1__CDefect (70)
/* TT1:CDefect */
class SOAP_CMAC TT1__CDefect : public TT1__CItemToTrack
{
public:
	LONG64 *defectnumber;	/* optional element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
	char *state;	/* optional element of type xsd:string */
	char *disposition;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *priority;	/* optional element of type xsd:string */
	char *product;	/* optional element of type xsd:string */
	char *component;	/* optional element of type xsd:string */
	char *reference;	/* optional element of type xsd:string */
	char *severity;	/* optional element of type xsd:string */
	char *enteredby;	/* optional element of type xsd:string */
	char *workaround;	/* optional element of type xsd:string */
	char *dateentered;	/* optional element of type xsd:date */
	char *locationaddedfrom;	/* optional element of type xsd:string */
	time_t *datetimecreated;	/* optional element of type xsd:dateTime */
	time_t *datetimemodified;	/* optional element of type xsd:dateTime */
	char *createdbyuser;	/* optional element of type xsd:string */
	char *modifiedbyuser;	/* optional element of type xsd:string */
	double *actualhourstofix;	/* optional element of type xsd:double */
	double *estimatedhours;	/* optional element of type xsd:double */
	TT1ArrayOfCReportedByRecord *reportedbylist;	/* optional element of type ArrayOfCReportedByRecord */
	TT1ArrayOfCEvent *eventlist;	/* optional element of type ArrayOfCEvent */
	TT1ArrayOfCSCCFileRecord *pSCCFileList;	/* optional element of type ArrayOfCSCCFileRecord */
	TT1ArrayOfCField *customFieldList;	/* optional element of type ArrayOfCField */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_TT1__CDefect */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CDefect() : defectnumber(NULL), summary(NULL), state(NULL), disposition(NULL), type(NULL), priority(NULL), product(NULL), component(NULL), reference(NULL), severity(NULL), enteredby(NULL), workaround(NULL), dateentered(NULL), locationaddedfrom(NULL), datetimecreated(NULL), datetimemodified(NULL), createdbyuser(NULL), modifiedbyuser(NULL), actualhourstofix(NULL), estimatedhours(NULL), reportedbylist(NULL), eventlist(NULL), pSCCFileList(NULL), customFieldList(NULL) { }
	virtual ~TT1__CDefect() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CTask
#define SOAP_TYPE_TT1__CTask (71)
/* TT1:CTask */
class SOAP_CMAC TT1__CTask : public TT1__CItemToTrack
{
public:
	char *status;	/* optional element of type xsd:string */
	char *priority;	/* optional element of type xsd:string */
	char *summary;	/* optional element of type xsd:string */
	char *description;	/* optional element of type xsd:string */
	char *datedue;	/* optional element of type xsd:date */
	char *dateassigned;	/* optional element of type xsd:date */
	char *versiondue;	/* optional element of type xsd:string */
	char *assignedto;	/* optional element of type xsd:string */
	char *assignedby;	/* optional element of type xsd:string */
	LONG64 *assigneddefect;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_TT1__CTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CTask() : status(NULL), priority(NULL), summary(NULL), description(NULL), datedue(NULL), dateassigned(NULL), versiondue(NULL), assignedto(NULL), assignedby(NULL), assigneddefect(NULL) { }
	virtual ~TT1__CTask() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CUser
#define SOAP_TYPE_TT1__CUser (73)
/* TT1:CUser */
class SOAP_CMAC TT1__CUser : public TT1__CItemToTrack
{
public:
	char *firstname;	/* optional element of type xsd:string */
	char *middleinitials;	/* optional element of type xsd:string */
	char *lastname;	/* optional element of type xsd:string */
	char *usergroupname;	/* optional element of type xsd:string */
	char *company;	/* optional element of type xsd:string */
	char *emailtype;	/* optional element of type xsd:string */
	char *emailaddress;	/* optional element of type xsd:string */
	bool *isactive;	/* optional element of type xsd:boolean */
	bool *iscustomer;	/* optional element of type xsd:boolean */
	bool *isglobal;	/* optional element of type xsd:boolean */
	bool *isactiveglobal;	/* optional element of type xsd:boolean */
	char *userLicense;	/* optional element of type xsd:string */
	char *userLicenseTCM;	/* optional element of type xsd:string */
	char *password;	/* optional element of type xsd:string */
	char *loginname;	/* optional element of type xsd:string */
	TT1__PhoneNumber *phoneone;	/* optional element of type TT1:PhoneNumber */
	TT1__PhoneNumber *phonetwo;	/* optional element of type TT1:PhoneNumber */
	char *notes;	/* optional element of type xsd:string */
	bool *betasite;	/* optional element of type xsd:boolean */
	char *address;	/* optional element of type xsd:string */
	TT1__CSystem *testconfig;	/* optional element of type TT1:CSystem */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_TT1__CUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CUser() : firstname(NULL), middleinitials(NULL), lastname(NULL), usergroupname(NULL), company(NULL), emailtype(NULL), emailaddress(NULL), isactive(NULL), iscustomer(NULL), isglobal(NULL), isactiveglobal(NULL), userLicense(NULL), userLicenseTCM(NULL), password(NULL), loginname(NULL), phoneone(NULL), phonetwo(NULL), notes(NULL), betasite(NULL), address(NULL), testconfig(NULL) { }
	virtual ~TT1__CUser() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CLinkedItem
#define SOAP_TYPE_TT1__CLinkedItem (78)
/* TT1:CLinkedItem */
class SOAP_CMAC TT1__CLinkedItem : public TT1__COrderedItemWithDBRecordId
{
public:
	LONG64 *entityType;	/* optional element of type xsd:long */
	char *tablename;	/* required element of type xsd:string */
	LONG64 entityID;	/* required element of type xsd:long */
	char *number;	/* optional element of type xsd:string */
	char *summary;	/* optional element of type xsd:string */
	char *status;	/* optional element of type xsd:string */
	char *state;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_TT1__CLinkedItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CLinkedItem() : entityType(NULL), tablename(NULL), entityID(0), number(NULL), summary(NULL), status(NULL), state(NULL) { }
	virtual ~TT1__CLinkedItem() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CLinkHistoryItem
#define SOAP_TYPE_TT1__CLinkHistoryItem (80)
/* TT1:CLinkHistoryItem */
class SOAP_CMAC TT1__CLinkHistoryItem : public TT1__COrderedItemWithDBRecordId
{
public:
	time_t *date;	/* optional element of type xsd:dateTime */
	char *firstname;	/* optional element of type xsd:string */
	char *lastname;	/* optional element of type xsd:string */
	char *history;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_TT1__CLinkHistoryItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CLinkHistoryItem() : date(NULL), firstname(NULL), lastname(NULL), history(NULL) { }
	virtual ~TT1__CLinkHistoryItem() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CLink
#define SOAP_TYPE_TT1__CLink (82)
/* TT1:CLink */
class SOAP_CMAC TT1__CLink : public TT1__CItemToTrack
{
public:
	char *linkDefinitionName;	/* required element of type xsd:string */
	char *comment;	/* optional element of type xsd:string */
	bool *linkbroken;	/* optional element of type xsd:boolean */
	TT1__CLinkedItem *linkparent;	/* optional element of type TT1:CLinkedItem */
	TT1ArrayOfCLinkedItem *childList;	/* optional element of type ArrayOfCLinkedItem */
	TT1ArrayOfCLinkHistoryItem *historyList;	/* optional element of type ArrayOfCLinkHistoryItem */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_TT1__CLink */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CLink() : linkDefinitionName(NULL), comment(NULL), linkbroken(NULL), linkparent(NULL), childList(NULL), historyList(NULL) { }
	virtual ~TT1__CLink() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CTestCase
#define SOAP_TYPE_TT1__CTestCase (84)
/* TT1:CTestCase */
class SOAP_CMAC TT1__CTestCase : public TT1__CItemToTrack
{
public:
	LONG64 *testcasenumber;	/* optional element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
	char *state;	/* optional element of type xsd:string */
	char *createdbyuser;	/* optional element of type xsd:string */
	time_t *datetimecreated;	/* optional element of type xsd:dateTime */
	char *locationaddedfrom;	/* optional element of type xsd:string */
	char *modifiedbyuser;	/* optional element of type xsd:string */
	time_t *datetimemodified;	/* optional element of type xsd:dateTime */
	TT1ArrayOfCField *customFieldList;	/* optional element of type ArrayOfCField */
	TT1ArrayOfCEvent *eventlist;	/* optional element of type ArrayOfCEvent */
	double *actualhours;	/* optional element of type xsd:double */
	double *estimatedhours;	/* optional element of type xsd:double */
	char *type;	/* optional element of type xsd:string */
	char *testrunstepsmode;	/* optional element of type xsd:string */
	bool *isautomated;	/* optional element of type xsd:boolean */
	char *estimatedtime;	/* optional element of type xsd:string */
	char *steps;	/* optional element of type xsd:string */
	TT1ArrayOfCTestCaseVariantField *testVariants;	/* optional element of type ArrayOfCTestCaseVariantField */
	TT1ArrayOfCFileAttachment *attachmentlist;	/* optional element of type ArrayOfCFileAttachment */
	TT1ArrayOfCSCCFileRecord *sccFileList;	/* optional element of type ArrayOfCSCCFileRecord */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_TT1__CTestCase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CTestCase() : testcasenumber(NULL), summary(NULL), state(NULL), createdbyuser(NULL), datetimecreated(NULL), locationaddedfrom(NULL), modifiedbyuser(NULL), datetimemodified(NULL), customFieldList(NULL), eventlist(NULL), actualhours(NULL), estimatedhours(NULL), type(NULL), testrunstepsmode(NULL), isautomated(NULL), estimatedtime(NULL), steps(NULL), testVariants(NULL), attachmentlist(NULL), sccFileList(NULL) { }
	virtual ~TT1__CTestCase() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CTestRun
#define SOAP_TYPE_TT1__CTestRun (85)
/* TT1:CTestRun */
class SOAP_CMAC TT1__CTestRun : public TT1__CItemToTrack
{
public:
	LONG64 *testrunnumber;	/* optional element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
	char *state;	/* optional element of type xsd:string */
	char *createdbyuser;	/* optional element of type xsd:string */
	time_t *datetimecreated;	/* optional element of type xsd:dateTime */
	char *locationaddedfrom;	/* optional element of type xsd:string */
	char *modifiedbyuser;	/* optional element of type xsd:string */
	time_t *datetimemodified;	/* optional element of type xsd:dateTime */
	TT1ArrayOfCField *customFieldList;	/* optional element of type ArrayOfCField */
	TT1ArrayOfCEvent *eventlist;	/* optional element of type ArrayOfCEvent */
	double *actualhours;	/* optional element of type xsd:double */
	double *estimatedhours;	/* optional element of type xsd:double */
	LONG64 *testcasenumber;	/* optional element of type xsd:long */
	LONG64 *testcaserecordid;	/* optional element of type xsd:long */
	char *type;	/* optional element of type xsd:string */
	char *testrunset;	/* optional element of type xsd:string */
	bool *isautomated;	/* optional element of type xsd:boolean */
	char *estimatedtime;	/* optional element of type xsd:string */
	char *steps;	/* optional element of type xsd:string */
	char *problemstatement;	/* optional element of type xsd:string */
	TT1ArrayOfCTestCaseVariantField *testVariants;	/* optional element of type ArrayOfCTestCaseVariantField */
	TT1ArrayOfCFileAttachment *attachmentlist;	/* optional element of type ArrayOfCFileAttachment */
	TT1ArrayOfCSCCFileRecord *sccFileList;	/* optional element of type ArrayOfCSCCFileRecord */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_TT1__CTestRun */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CTestRun() : testrunnumber(NULL), summary(NULL), state(NULL), createdbyuser(NULL), datetimecreated(NULL), locationaddedfrom(NULL), modifiedbyuser(NULL), datetimemodified(NULL), customFieldList(NULL), eventlist(NULL), actualhours(NULL), estimatedhours(NULL), testcasenumber(NULL), testcaserecordid(NULL), type(NULL), testrunset(NULL), isautomated(NULL), estimatedtime(NULL), steps(NULL), problemstatement(NULL), testVariants(NULL), attachmentlist(NULL), sccFileList(NULL) { }
	virtual ~TT1__CTestRun() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CFolder
#define SOAP_TYPE_TT1__CFolder (87)
/* TT1:CFolder */
class SOAP_CMAC TT1__CFolder : public TT1__CItemToTrack
{
public:
	LONG64 *createdbyuser;	/* optional element of type xsd:long */
	bool *ispublic;	/* optional element of type xsd:boolean */
	LONG64 *modifiedbyuser;	/* optional element of type xsd:long */
	char *locationaddedfrom;	/* optional element of type xsd:string */
	time_t *datetimecreated;	/* optional element of type xsd:dateTime */
	time_t *datetimemodified;	/* optional element of type xsd:dateTime */
	char *name;	/* optional element of type xsd:string */
	char *description;	/* optional element of type xsd:string */
	char *path;	/* optional element of type xsd:string */
	LONG64 *order;	/* optional element of type xsd:long */
	LONG64 *parentid;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE_TT1__CFolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CFolder() : createdbyuser(NULL), ispublic(NULL), modifiedbyuser(NULL), locationaddedfrom(NULL), datetimecreated(NULL), datetimemodified(NULL), name(NULL), description(NULL), path(NULL), order(NULL), parentid(NULL) { }
	virtual ~TT1__CFolder() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CSystem
#define SOAP_TYPE_TT1__CSystem (40)
/* TT1:CSystem */
class SOAP_CMAC TT1__CSystem : public TT1__CSystemBase
{
public:
	char *location;	/* optional element of type xsd:string */
	char *computermodel;	/* optional element of type xsd:string */
	char *computerbrand;	/* optional element of type xsd:string */
	char *cputype;	/* optional element of type xsd:string */
	char *cpuspeed;	/* optional element of type xsd:string */
	char *harddisktype;	/* optional element of type xsd:string */
	char *harddisksize;	/* optional element of type xsd:string */
	char *ramsize;	/* optional element of type xsd:string */
	char *romsize;	/* optional element of type xsd:string */
	char *osname;	/* optional element of type xsd:string */
	char *osversion;	/* optional element of type xsd:string */
	char *videoname;	/* optional element of type xsd:string */
	bool *hascdrom;	/* optional element of type xsd:boolean */
	char *cdrommodel;	/* optional element of type xsd:string */
	bool *hasscanner;	/* optional element of type xsd:boolean */
	char *scannermodel;	/* optional element of type xsd:string */
	bool *hasmodem;	/* optional element of type xsd:boolean */
	char *modemmodel;	/* optional element of type xsd:string */
	bool *hasprinter;	/* optional element of type xsd:boolean */
	char *printermodel;	/* optional element of type xsd:string */
	char *otherhardware;	/* optional element of type xsd:string */
	bool *hasmultiplemonitors;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_TT1__CSystem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CSystem() : location(NULL), computermodel(NULL), computerbrand(NULL), cputype(NULL), cpuspeed(NULL), harddisktype(NULL), harddisksize(NULL), ramsize(NULL), romsize(NULL), osname(NULL), osversion(NULL), videoname(NULL), hascdrom(NULL), cdrommodel(NULL), hasscanner(NULL), scannermodel(NULL), hasmodem(NULL), modemmodel(NULL), hasprinter(NULL), printermodel(NULL), otherhardware(NULL), hasmultiplemonitors(NULL) { }
	virtual ~TT1__CSystem() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CTestRunVariantField
#define SOAP_TYPE_TT1__CTestRunVariantField (56)
/* TT1:CTestRunVariantField */
class SOAP_CMAC TT1__CTestRunVariantField : public TT1__CMultiSelectDropdownField
{
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_TT1__CTestRunVariantField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CTestRunVariantField()  { }
	virtual ~TT1__CTestRunVariantField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__CTestCaseVariantField
#define SOAP_TYPE_TT1__CTestCaseVariantField (57)
/* TT1:CTestCaseVariantField */
class SOAP_CMAC TT1__CTestCaseVariantField : public TT1__CTestRunVariantField
{
public:
	char *type;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_TT1__CTestCaseVariantField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         TT1__CTestCaseVariantField() : type(NULL) { }
	virtual ~TT1__CTestCaseVariantField() { }
};
#endif

#ifndef SOAP_TYPE_TT1__getDatabaseListResponse
#define SOAP_TYPE_TT1__getDatabaseListResponse (176)
/* TT1:getDatabaseListResponse */
struct TT1__getDatabaseListResponse
{
public:
	TT1ArrayOfCDatabase *pDBList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCDatabase */
};
#endif

#ifndef SOAP_TYPE_TT1__getDatabaseList
#define SOAP_TYPE_TT1__getDatabaseList (180)
/* TT1:getDatabaseList */
struct TT1__getDatabaseList
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_TT1__getProjectListResponse
#define SOAP_TYPE_TT1__getProjectListResponse (181)
/* TT1:getProjectListResponse */
struct TT1__getProjectListResponse
{
public:
	TT1ArrayOfCProject *pProjList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCProject */
};
#endif

#ifndef SOAP_TYPE_TT1__getProjectList
#define SOAP_TYPE_TT1__getProjectList (185)
/* TT1:getProjectList */
struct TT1__getProjectList
{
public:
	char *username;	/* optional element of type xsd:string */
	char *password;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getProjectDataOptionListResponse
#define SOAP_TYPE_TT1__getProjectDataOptionListResponse (186)
/* TT1:getProjectDataOptionListResponse */
struct TT1__getProjectDataOptionListResponse
{
public:
	TT1ArrayOfCProjectDataOption *pProjTypes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCProjectDataOption */
};
#endif

#ifndef SOAP_TYPE_TT1__getProjectDataOptionList
#define SOAP_TYPE_TT1__getProjectDataOptionList (189)
/* TT1:getProjectDataOptionList */
struct TT1__getProjectDataOptionList
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_TT1__DatabaseLogonResponse
#define SOAP_TYPE_TT1__DatabaseLogonResponse (192)
/* TT1:DatabaseLogonResponse */
struct TT1__DatabaseLogonResponse
{
public:
	LONG64 Cookie;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__DatabaseLogon
#define SOAP_TYPE_TT1__DatabaseLogon (193)
/* TT1:DatabaseLogon */
struct TT1__DatabaseLogon
{
public:
	char *dbname;	/* optional element of type xsd:string */
	char *username;	/* optional element of type xsd:string */
	char *password;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__ProjectLogonResponse
#define SOAP_TYPE_TT1__ProjectLogonResponse (195)
/* TT1:ProjectLogonResponse */
struct TT1__ProjectLogonResponse
{
public:
	LONG64 Cookie;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__ProjectLogon
#define SOAP_TYPE_TT1__ProjectLogon (196)
/* TT1:ProjectLogon */
struct TT1__ProjectLogon
{
public:
	TT1__CProject *pProj;	/* optional element of type TT1:CProject */
	char *username;	/* optional element of type xsd:string */
	char *password;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__DatabaseLogoffResponse
#define SOAP_TYPE_TT1__DatabaseLogoffResponse (199)
/* TT1:DatabaseLogoffResponse */
struct TT1__DatabaseLogoffResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__DatabaseLogoff
#define SOAP_TYPE_TT1__DatabaseLogoff (200)
/* TT1:DatabaseLogoff */
struct TT1__DatabaseLogoff
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getTableListResponse
#define SOAP_TYPE_TT1__getTableListResponse (201)
/* TT1:getTableListResponse */
struct TT1__getTableListResponse
{
public:
	TT1ArrayOfCDatabaseTable *pTableList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCDatabaseTable */
};
#endif

#ifndef SOAP_TYPE_TT1__getTableList
#define SOAP_TYPE_TT1__getTableList (205)
/* TT1:getTableList */
struct TT1__getTableList
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getDropdownFieldForTableResponse
#define SOAP_TYPE_TT1__getDropdownFieldForTableResponse (206)
/* TT1:getDropdownFieldForTableResponse */
struct TT1__getDropdownFieldForTableResponse
{
public:
	TT1ArrayOfCTableField *pFieldList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCTableField */
};
#endif

#ifndef SOAP_TYPE_TT1__getDropdownFieldForTable
#define SOAP_TYPE_TT1__getDropdownFieldForTable (210)
/* TT1:getDropdownFieldForTable */
struct TT1__getDropdownFieldForTable
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *tablename;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getDropdownFieldValuesForTableResponse
#define SOAP_TYPE_TT1__getDropdownFieldValuesForTableResponse (211)
/* TT1:getDropdownFieldValuesForTableResponse */
struct TT1__getDropdownFieldValuesForTableResponse
{
public:
	TT1ArrayOfCFieldValue *pValueList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCFieldValue */
};
#endif

#ifndef SOAP_TYPE_TT1__getDropdownFieldValuesForTable
#define SOAP_TYPE_TT1__getDropdownFieldValuesForTable (214)
/* TT1:getDropdownFieldValuesForTable */
struct TT1__getDropdownFieldValuesForTable
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *tablename;	/* optional element of type xsd:string */
	char *fieldname;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__addDropdownFieldValuesForTableResponse
#define SOAP_TYPE_TT1__addDropdownFieldValuesForTableResponse (216)
/* TT1:addDropdownFieldValuesForTableResponse */
struct TT1__addDropdownFieldValuesForTableResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__addDropdownFieldValuesForTable
#define SOAP_TYPE_TT1__addDropdownFieldValuesForTable (217)
/* TT1:addDropdownFieldValuesForTable */
struct TT1__addDropdownFieldValuesForTable
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *tablename;	/* optional element of type xsd:string */
	char *fieldname;	/* optional element of type xsd:string */
	TT1ArrayOfCFieldValue *pValueList;	/* optional element of type ArrayOfCFieldValue */
};
#endif

#ifndef SOAP_TYPE_TT1__GetLinkDefinitionValuesResponse
#define SOAP_TYPE_TT1__GetLinkDefinitionValuesResponse (218)
/* TT1:GetLinkDefinitionValuesResponse */
struct TT1__GetLinkDefinitionValuesResponse
{
public:
	TT1ArrayOfCFieldValue *pValueList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCFieldValue */
};
#endif

#ifndef SOAP_TYPE_TT1__GetLinkDefinitionValues
#define SOAP_TYPE_TT1__GetLinkDefinitionValues (221)
/* TT1:GetLinkDefinitionValues */
struct TT1__GetLinkDefinitionValues
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getColumnsForTableResponse
#define SOAP_TYPE_TT1__getColumnsForTableResponse (222)
/* TT1:getColumnsForTableResponse */
struct TT1__getColumnsForTableResponse
{
public:
	TT1ArrayOfCTableColumn *pColumnList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCTableColumn */
};
#endif

#ifndef SOAP_TYPE_TT1__getColumnsForTable
#define SOAP_TYPE_TT1__getColumnsForTable (225)
/* TT1:getColumnsForTable */
struct TT1__getColumnsForTable
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *tablename;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getFilterListResponse
#define SOAP_TYPE_TT1__getFilterListResponse (226)
/* TT1:getFilterListResponse */
struct TT1__getFilterListResponse
{
public:
	TT1ArrayOfCFilter *pFilterList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCFilter */
};
#endif

#ifndef SOAP_TYPE_TT1__getFilterList
#define SOAP_TYPE_TT1__getFilterList (230)
/* TT1:getFilterList */
struct TT1__getFilterList
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getFilterListForTableResponse
#define SOAP_TYPE_TT1__getFilterListForTableResponse (231)
/* TT1:getFilterListForTableResponse */
struct TT1__getFilterListForTableResponse
{
public:
	TT1ArrayOfCFilter *pFilterList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCFilter */
};
#endif

#ifndef SOAP_TYPE_TT1__getFilterListForTable
#define SOAP_TYPE_TT1__getFilterListForTable (234)
/* TT1:getFilterListForTable */
struct TT1__getFilterListForTable
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *tablename;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getRecordListForTableResponse
#define SOAP_TYPE_TT1__getRecordListForTableResponse (235)
/* TT1:getRecordListForTableResponse */
struct TT1__getRecordListForTableResponse
{
public:
	TT1__CRecordListSoap *recordlist;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CRecordListSoap */
};
#endif

#ifndef SOAP_TYPE_TT1__getRecordListForTable
#define SOAP_TYPE_TT1__getRecordListForTable (239)
/* TT1:getRecordListForTable */
struct TT1__getRecordListForTable
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *tablename;	/* optional element of type xsd:string */
	char *filtername;	/* optional element of type xsd:string */
	TT1ArrayOfCTableColumn *columnlist;	/* optional element of type ArrayOfCTableColumn */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestConfigResponse
#define SOAP_TYPE_TT1__getTestConfigResponse (240)
/* TT1:getTestConfigResponse */
struct TT1__getTestConfigResponse
{
public:
	TT1__CSystem *pTestConfig;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CSystem */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestConfig
#define SOAP_TYPE_TT1__getTestConfig (243)
/* TT1:getTestConfig */
struct TT1__getTestConfig
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *name;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestConfigByRecordIDResponse
#define SOAP_TYPE_TT1__getTestConfigByRecordIDResponse (244)
/* TT1:getTestConfigByRecordIDResponse */
struct TT1__getTestConfigByRecordIDResponse
{
public:
	TT1__CSystem *pTestConfig;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CSystem */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestConfigByRecordID
#define SOAP_TYPE_TT1__getTestConfigByRecordID (247)
/* TT1:getTestConfigByRecordID */
struct TT1__getTestConfigByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addTestConfigResponse
#define SOAP_TYPE_TT1__addTestConfigResponse (249)
/* TT1:addTestConfigResponse */
struct TT1__addTestConfigResponse
{
public:
	LONG64 recordID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addTestConfig
#define SOAP_TYPE_TT1__addTestConfig (250)
/* TT1:addTestConfig */
struct TT1__addTestConfig
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CSystem *pTestConfig;	/* optional element of type TT1:CSystem */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestConfigResponse
#define SOAP_TYPE_TT1__editTestConfigResponse (251)
/* TT1:editTestConfigResponse */
struct TT1__editTestConfigResponse
{
public:
	TT1__CSystem *pTestConfig;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CSystem */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestConfig
#define SOAP_TYPE_TT1__editTestConfig (254)
/* TT1:editTestConfig */
struct TT1__editTestConfig
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *name;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestConfigByRecordIDResponse
#define SOAP_TYPE_TT1__editTestConfigByRecordIDResponse (255)
/* TT1:editTestConfigByRecordIDResponse */
struct TT1__editTestConfigByRecordIDResponse
{
public:
	TT1__CSystem *pTestConfig;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CSystem */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestConfigByRecordID
#define SOAP_TYPE_TT1__editTestConfigByRecordID (258)
/* TT1:editTestConfigByRecordID */
struct TT1__editTestConfigByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__saveTestConfigResponse
#define SOAP_TYPE_TT1__saveTestConfigResponse (260)
/* TT1:saveTestConfigResponse */
struct TT1__saveTestConfigResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__saveTestConfig
#define SOAP_TYPE_TT1__saveTestConfig (261)
/* TT1:saveTestConfig */
struct TT1__saveTestConfig
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CSystem *pTestConfig;	/* optional element of type TT1:CSystem */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestConfigResponse
#define SOAP_TYPE_TT1__deleteTestConfigResponse (263)
/* TT1:deleteTestConfigResponse */
struct TT1__deleteTestConfigResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestConfig
#define SOAP_TYPE_TT1__deleteTestConfig (264)
/* TT1:deleteTestConfig */
struct TT1__deleteTestConfig
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *name;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestConfigByRecordIDResponse
#define SOAP_TYPE_TT1__deleteTestConfigByRecordIDResponse (266)
/* TT1:deleteTestConfigByRecordIDResponse */
struct TT1__deleteTestConfigByRecordIDResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestConfigByRecordID
#define SOAP_TYPE_TT1__deleteTestConfigByRecordID (267)
/* TT1:deleteTestConfigByRecordID */
struct TT1__deleteTestConfigByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveTestConfigResponse
#define SOAP_TYPE_TT1__cancelSaveTestConfigResponse (269)
/* TT1:cancelSaveTestConfigResponse */
struct TT1__cancelSaveTestConfigResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveTestConfig
#define SOAP_TYPE_TT1__cancelSaveTestConfig (270)
/* TT1:cancelSaveTestConfig */
struct TT1__cancelSaveTestConfig
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getAttachmentTypesResponse
#define SOAP_TYPE_TT1__getAttachmentTypesResponse (271)
/* TT1:getAttachmentTypesResponse */
struct TT1__getAttachmentTypesResponse
{
public:
	TT1ArrayOfstring *pTypeList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfstring */
};
#endif

#ifndef SOAP_TYPE_TT1__getAttachmentTypes
#define SOAP_TYPE_TT1__getAttachmentTypes (274)
/* TT1:getAttachmentTypes */
struct TT1__getAttachmentTypes
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getEventDefinitionListResponse
#define SOAP_TYPE_TT1__getEventDefinitionListResponse (275)
/* TT1:getEventDefinitionListResponse */
struct TT1__getEventDefinitionListResponse
{
public:
	TT1ArrayOfCEventDefinition *EventDefinitionList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCEventDefinition */
};
#endif

#ifndef SOAP_TYPE_TT1__getEventDefinitionList
#define SOAP_TYPE_TT1__getEventDefinitionList (279)
/* TT1:getEventDefinitionList */
struct TT1__getEventDefinitionList
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *tablename;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getDefectEventDefinitionListResponse
#define SOAP_TYPE_TT1__getDefectEventDefinitionListResponse (280)
/* TT1:getDefectEventDefinitionListResponse */
struct TT1__getDefectEventDefinitionListResponse
{
public:
	TT1ArrayOfCDefectEventDefinition *EventDefinitionList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCDefectEventDefinition */
};
#endif

#ifndef SOAP_TYPE_TT1__getDefectEventDefinitionList
#define SOAP_TYPE_TT1__getDefectEventDefinitionList (284)
/* TT1:getDefectEventDefinitionList */
struct TT1__getDefectEventDefinitionList
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getCustomFieldsDefinitionListResponse
#define SOAP_TYPE_TT1__getCustomFieldsDefinitionListResponse (285)
/* TT1:getCustomFieldsDefinitionListResponse */
struct TT1__getCustomFieldsDefinitionListResponse
{
public:
	TT1ArrayOfCField *customFields;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCField */
};
#endif

#ifndef SOAP_TYPE_TT1__getCustomFieldsDefinitionList
#define SOAP_TYPE_TT1__getCustomFieldsDefinitionList (288)
/* TT1:getCustomFieldsDefinitionList */
struct TT1__getCustomFieldsDefinitionList
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *tablename;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getDefectCustomFieldsDefinitionListResponse
#define SOAP_TYPE_TT1__getDefectCustomFieldsDefinitionListResponse (289)
/* TT1:getDefectCustomFieldsDefinitionListResponse */
struct TT1__getDefectCustomFieldsDefinitionListResponse
{
public:
	TT1ArrayOfCField *customFields;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCField */
};
#endif

#ifndef SOAP_TYPE_TT1__getDefectCustomFieldsDefinitionList
#define SOAP_TYPE_TT1__getDefectCustomFieldsDefinitionList (292)
/* TT1:getDefectCustomFieldsDefinitionList */
struct TT1__getDefectCustomFieldsDefinitionList
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getDefectResponse
#define SOAP_TYPE_TT1__getDefectResponse (293)
/* TT1:getDefectResponse */
struct TT1__getDefectResponse
{
public:
	TT1__CDefect *pDefect;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CDefect */
};
#endif

#ifndef SOAP_TYPE_TT1__getDefect
#define SOAP_TYPE_TT1__getDefect (297)
/* TT1:getDefect */
struct TT1__getDefect
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 defectNumber;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__getDefectByRecordIDResponse
#define SOAP_TYPE_TT1__getDefectByRecordIDResponse (298)
/* TT1:getDefectByRecordIDResponse */
struct TT1__getDefectByRecordIDResponse
{
public:
	TT1__CDefect *pDefect;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CDefect */
};
#endif

#ifndef SOAP_TYPE_TT1__getDefectByRecordID
#define SOAP_TYPE_TT1__getDefectByRecordID (301)
/* TT1:getDefectByRecordID */
struct TT1__getDefectByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__addDefectResponse
#define SOAP_TYPE_TT1__addDefectResponse (303)
/* TT1:addDefectResponse */
struct TT1__addDefectResponse
{
public:
	LONG64 recordID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addDefect
#define SOAP_TYPE_TT1__addDefect (304)
/* TT1:addDefect */
struct TT1__addDefect
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CDefect *pDefect;	/* optional element of type TT1:CDefect */
};
#endif

#ifndef SOAP_TYPE_TT1__addDefectWithLinkResponse
#define SOAP_TYPE_TT1__addDefectWithLinkResponse (306)
/* TT1:addDefectWithLinkResponse */
struct TT1__addDefectWithLinkResponse
{
public:
	LONG64 recordID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addDefectWithLink
#define SOAP_TYPE_TT1__addDefectWithLink (307)
/* TT1:addDefectWithLink */
struct TT1__addDefectWithLink
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CDefect *pDefect;	/* optional element of type TT1:CDefect */
	LONG64 testRunRecordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteDefectResponse
#define SOAP_TYPE_TT1__deleteDefectResponse (309)
/* TT1:deleteDefectResponse */
struct TT1__deleteDefectResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteDefect
#define SOAP_TYPE_TT1__deleteDefect (310)
/* TT1:deleteDefect */
struct TT1__deleteDefect
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 defectNumber;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteDefectByRecordIDResponse
#define SOAP_TYPE_TT1__deleteDefectByRecordIDResponse (312)
/* TT1:deleteDefectByRecordIDResponse */
struct TT1__deleteDefectByRecordIDResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteDefectByRecordID
#define SOAP_TYPE_TT1__deleteDefectByRecordID (313)
/* TT1:deleteDefectByRecordID */
struct TT1__deleteDefectByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__editDefectResponse
#define SOAP_TYPE_TT1__editDefectResponse (314)
/* TT1:editDefectResponse */
struct TT1__editDefectResponse
{
public:
	TT1__CDefect *pDefect;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CDefect */
};
#endif

#ifndef SOAP_TYPE_TT1__editDefect
#define SOAP_TYPE_TT1__editDefect (317)
/* TT1:editDefect */
struct TT1__editDefect
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 defectNumber;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__editDefectByRecordIDResponse
#define SOAP_TYPE_TT1__editDefectByRecordIDResponse (318)
/* TT1:editDefectByRecordIDResponse */
struct TT1__editDefectByRecordIDResponse
{
public:
	TT1__CDefect *pDefect;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CDefect */
};
#endif

#ifndef SOAP_TYPE_TT1__editDefectByRecordID
#define SOAP_TYPE_TT1__editDefectByRecordID (321)
/* TT1:editDefectByRecordID */
struct TT1__editDefectByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__saveDefectResponse
#define SOAP_TYPE_TT1__saveDefectResponse (323)
/* TT1:saveDefectResponse */
struct TT1__saveDefectResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__saveDefect
#define SOAP_TYPE_TT1__saveDefect (324)
/* TT1:saveDefect */
struct TT1__saveDefect
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CDefect *pDefect;	/* optional element of type TT1:CDefect */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveDefectResponse
#define SOAP_TYPE_TT1__cancelSaveDefectResponse (326)
/* TT1:cancelSaveDefectResponse */
struct TT1__cancelSaveDefectResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveDefect
#define SOAP_TYPE_TT1__cancelSaveDefect (327)
/* TT1:cancelSaveDefect */
struct TT1__cancelSaveDefect
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getAttachmentResponse
#define SOAP_TYPE_TT1__getAttachmentResponse (328)
/* TT1:getAttachmentResponse */
struct TT1__getAttachmentResponse
{
public:
	TT1__CFileAttachment *pAttachment;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CFileAttachment */
};
#endif

#ifndef SOAP_TYPE_TT1__getAttachment
#define SOAP_TYPE_TT1__getAttachment (331)
/* TT1:getAttachment */
struct TT1__getAttachment
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *tablename;	/* optional element of type xsd:string */
	LONG64 recordID;	/* required element of type xsd:long */
	LONG64 eventID;	/* required element of type xsd:long */
	char *pszArchiveName;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getDefectAttachmentResponse
#define SOAP_TYPE_TT1__getDefectAttachmentResponse (332)
/* TT1:getDefectAttachmentResponse */
struct TT1__getDefectAttachmentResponse
{
public:
	TT1__CFileAttachment *pAttachment;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CFileAttachment */
};
#endif

#ifndef SOAP_TYPE_TT1__getDefectAttachment
#define SOAP_TYPE_TT1__getDefectAttachment (335)
/* TT1:getDefectAttachment */
struct TT1__getDefectAttachment
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *pszArchiveName;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getTaskResponse
#define SOAP_TYPE_TT1__getTaskResponse (336)
/* TT1:getTaskResponse */
struct TT1__getTaskResponse
{
public:
	TT1__CTask *pTask;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTask */
};
#endif

#ifndef SOAP_TYPE_TT1__getTask
#define SOAP_TYPE_TT1__getTask (340)
/* TT1:getTask */
struct TT1__getTask
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getTaskByRecordIDResponse
#define SOAP_TYPE_TT1__getTaskByRecordIDResponse (341)
/* TT1:getTaskByRecordIDResponse */
struct TT1__getTaskByRecordIDResponse
{
public:
	TT1__CTask *pTask;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTask */
};
#endif

#ifndef SOAP_TYPE_TT1__getTaskByRecordID
#define SOAP_TYPE_TT1__getTaskByRecordID (344)
/* TT1:getTaskByRecordID */
struct TT1__getTaskByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addTaskResponse
#define SOAP_TYPE_TT1__addTaskResponse (346)
/* TT1:addTaskResponse */
struct TT1__addTaskResponse
{
public:
	LONG64 recordID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addTask
#define SOAP_TYPE_TT1__addTask (347)
/* TT1:addTask */
struct TT1__addTask
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CTask *pTask;	/* optional element of type TT1:CTask */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTaskResponse
#define SOAP_TYPE_TT1__deleteTaskResponse (349)
/* TT1:deleteTaskResponse */
struct TT1__deleteTaskResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTask
#define SOAP_TYPE_TT1__deleteTask (350)
/* TT1:deleteTask */
struct TT1__deleteTask
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTaskByRecordIDResponse
#define SOAP_TYPE_TT1__deleteTaskByRecordIDResponse (352)
/* TT1:deleteTaskByRecordIDResponse */
struct TT1__deleteTaskByRecordIDResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTaskByRecordID
#define SOAP_TYPE_TT1__deleteTaskByRecordID (353)
/* TT1:deleteTaskByRecordID */
struct TT1__deleteTaskByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__editTaskResponse
#define SOAP_TYPE_TT1__editTaskResponse (354)
/* TT1:editTaskResponse */
struct TT1__editTaskResponse
{
public:
	TT1__CTask *pTask;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTask */
};
#endif

#ifndef SOAP_TYPE_TT1__editTask
#define SOAP_TYPE_TT1__editTask (357)
/* TT1:editTask */
struct TT1__editTask
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__editTaskByRecordIDResponse
#define SOAP_TYPE_TT1__editTaskByRecordIDResponse (358)
/* TT1:editTaskByRecordIDResponse */
struct TT1__editTaskByRecordIDResponse
{
public:
	TT1__CTask *pTask;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTask */
};
#endif

#ifndef SOAP_TYPE_TT1__editTaskByRecordID
#define SOAP_TYPE_TT1__editTaskByRecordID (361)
/* TT1:editTaskByRecordID */
struct TT1__editTaskByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__saveTaskResponse
#define SOAP_TYPE_TT1__saveTaskResponse (363)
/* TT1:saveTaskResponse */
struct TT1__saveTaskResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__saveTask
#define SOAP_TYPE_TT1__saveTask (364)
/* TT1:saveTask */
struct TT1__saveTask
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CTask *pTask;	/* optional element of type TT1:CTask */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveTaskResponse
#define SOAP_TYPE_TT1__cancelSaveTaskResponse (366)
/* TT1:cancelSaveTaskResponse */
struct TT1__cancelSaveTaskResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveTask
#define SOAP_TYPE_TT1__cancelSaveTask (367)
/* TT1:cancelSaveTask */
struct TT1__cancelSaveTask
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getGlobalUserListResponse
#define SOAP_TYPE_TT1__getGlobalUserListResponse (368)
/* TT1:getGlobalUserListResponse */
struct TT1__getGlobalUserListResponse
{
public:
	TT1ArrayOfCGlobalUser *GlobalUserList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCGlobalUser */
};
#endif

#ifndef SOAP_TYPE_TT1__getGlobalUserList
#define SOAP_TYPE_TT1__getGlobalUserList (372)
/* TT1:getGlobalUserList */
struct TT1__getGlobalUserList
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getGlobalCustomerListResponse
#define SOAP_TYPE_TT1__getGlobalCustomerListResponse (373)
/* TT1:getGlobalCustomerListResponse */
struct TT1__getGlobalCustomerListResponse
{
public:
	TT1ArrayOfCGlobalUser *GlobalCustomerList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCGlobalUser */
};
#endif

#ifndef SOAP_TYPE_TT1__getGlobalCustomerList
#define SOAP_TYPE_TT1__getGlobalCustomerList (376)
/* TT1:getGlobalCustomerList */
struct TT1__getGlobalCustomerList
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getUserLicenseListResponse
#define SOAP_TYPE_TT1__getUserLicenseListResponse (377)
/* TT1:getUserLicenseListResponse */
struct TT1__getUserLicenseListResponse
{
public:
	TT1ArrayOfCUserLicense *UserLicenseList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCUserLicense */
};
#endif

#ifndef SOAP_TYPE_TT1__getUserLicenseList
#define SOAP_TYPE_TT1__getUserLicenseList (381)
/* TT1:getUserLicenseList */
struct TT1__getUserLicenseList
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getUserResponse
#define SOAP_TYPE_TT1__getUserResponse (382)
/* TT1:getUserResponse */
struct TT1__getUserResponse
{
public:
	TT1__CUser *pUser;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__getUser
#define SOAP_TYPE_TT1__getUser (386)
/* TT1:getUser */
struct TT1__getUser
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *firstName;	/* optional element of type xsd:string */
	char *middleInitials;	/* optional element of type xsd:string */
	char *lastName;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getUserByRecordIDResponse
#define SOAP_TYPE_TT1__getUserByRecordIDResponse (387)
/* TT1:getUserByRecordIDResponse */
struct TT1__getUserByRecordIDResponse
{
public:
	TT1__CUser *pUser;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__getUserByRecordID
#define SOAP_TYPE_TT1__getUserByRecordID (390)
/* TT1:getUserByRecordID */
struct TT1__getUserByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addUserResponse
#define SOAP_TYPE_TT1__addUserResponse (392)
/* TT1:addUserResponse */
struct TT1__addUserResponse
{
public:
	LONG64 recordID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addUser
#define SOAP_TYPE_TT1__addUser (393)
/* TT1:addUser */
struct TT1__addUser
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CUser *pUser;	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__editUserResponse
#define SOAP_TYPE_TT1__editUserResponse (394)
/* TT1:editUserResponse */
struct TT1__editUserResponse
{
public:
	TT1__CUser *pUser;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__editUser
#define SOAP_TYPE_TT1__editUser (397)
/* TT1:editUser */
struct TT1__editUser
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *firstName;	/* optional element of type xsd:string */
	char *middleInitials;	/* optional element of type xsd:string */
	char *lastName;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__editUserByRecordIDResponse
#define SOAP_TYPE_TT1__editUserByRecordIDResponse (398)
/* TT1:editUserByRecordIDResponse */
struct TT1__editUserByRecordIDResponse
{
public:
	TT1__CUser *pUser;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__editUserByRecordID
#define SOAP_TYPE_TT1__editUserByRecordID (401)
/* TT1:editUserByRecordID */
struct TT1__editUserByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__saveUserResponse
#define SOAP_TYPE_TT1__saveUserResponse (403)
/* TT1:saveUserResponse */
struct TT1__saveUserResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__saveUser
#define SOAP_TYPE_TT1__saveUser (404)
/* TT1:saveUser */
struct TT1__saveUser
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *firstName;	/* optional element of type xsd:string */
	char *middleInitials;	/* optional element of type xsd:string */
	char *lastName;	/* optional element of type xsd:string */
	TT1__CUser *pUser;	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteUserResponse
#define SOAP_TYPE_TT1__deleteUserResponse (406)
/* TT1:deleteUserResponse */
struct TT1__deleteUserResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteUser
#define SOAP_TYPE_TT1__deleteUser (407)
/* TT1:deleteUser */
struct TT1__deleteUser
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *firstName;	/* optional element of type xsd:string */
	char *middleInitials;	/* optional element of type xsd:string */
	char *lastName;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteUserByRecordIDResponse
#define SOAP_TYPE_TT1__deleteUserByRecordIDResponse (409)
/* TT1:deleteUserByRecordIDResponse */
struct TT1__deleteUserByRecordIDResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteUserByRecordID
#define SOAP_TYPE_TT1__deleteUserByRecordID (410)
/* TT1:deleteUserByRecordID */
struct TT1__deleteUserByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveUserResponse
#define SOAP_TYPE_TT1__cancelSaveUserResponse (412)
/* TT1:cancelSaveUserResponse */
struct TT1__cancelSaveUserResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveUser
#define SOAP_TYPE_TT1__cancelSaveUser (413)
/* TT1:cancelSaveUser */
struct TT1__cancelSaveUser
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__promoteUserResponse
#define SOAP_TYPE_TT1__promoteUserResponse (415)
/* TT1:promoteUserResponse */
struct TT1__promoteUserResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__promoteUser
#define SOAP_TYPE_TT1__promoteUser (416)
/* TT1:promoteUser */
struct TT1__promoteUser
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *localUser;	/* optional element of type xsd:string */
	char *globalUser;	/* optional element of type xsd:string */
	char *loginname;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__addGlobalUserResponse
#define SOAP_TYPE_TT1__addGlobalUserResponse (418)
/* TT1:addGlobalUserResponse */
struct TT1__addGlobalUserResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__addGlobalUser
#define SOAP_TYPE_TT1__addGlobalUser (419)
/* TT1:addGlobalUser */
struct TT1__addGlobalUser
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CGlobalUser *pUser;	/* optional element of type TT1:CGlobalUser */
};
#endif

#ifndef SOAP_TYPE_TT1__getCustomerResponse
#define SOAP_TYPE_TT1__getCustomerResponse (420)
/* TT1:getCustomerResponse */
struct TT1__getCustomerResponse
{
public:
	TT1__CUser *pCustomer;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__getCustomer
#define SOAP_TYPE_TT1__getCustomer (423)
/* TT1:getCustomer */
struct TT1__getCustomer
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *firstName;	/* optional element of type xsd:string */
	char *middleInitials;	/* optional element of type xsd:string */
	char *lastName;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getCustomerByRecordIDResponse
#define SOAP_TYPE_TT1__getCustomerByRecordIDResponse (424)
/* TT1:getCustomerByRecordIDResponse */
struct TT1__getCustomerByRecordIDResponse
{
public:
	TT1__CUser *pCustomer;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__getCustomerByRecordID
#define SOAP_TYPE_TT1__getCustomerByRecordID (427)
/* TT1:getCustomerByRecordID */
struct TT1__getCustomerByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addCustomerResponse
#define SOAP_TYPE_TT1__addCustomerResponse (429)
/* TT1:addCustomerResponse */
struct TT1__addCustomerResponse
{
public:
	LONG64 recordID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addCustomer
#define SOAP_TYPE_TT1__addCustomer (430)
/* TT1:addCustomer */
struct TT1__addCustomer
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CUser *pCustomer;	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__editCustomerResponse
#define SOAP_TYPE_TT1__editCustomerResponse (431)
/* TT1:editCustomerResponse */
struct TT1__editCustomerResponse
{
public:
	TT1__CUser *pCustomer;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__editCustomer
#define SOAP_TYPE_TT1__editCustomer (434)
/* TT1:editCustomer */
struct TT1__editCustomer
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *firstName;	/* optional element of type xsd:string */
	char *middleInitials;	/* optional element of type xsd:string */
	char *lastName;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__editCustomerByRecordIDResponse
#define SOAP_TYPE_TT1__editCustomerByRecordIDResponse (435)
/* TT1:editCustomerByRecordIDResponse */
struct TT1__editCustomerByRecordIDResponse
{
public:
	TT1__CUser *pCustomer;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__editCustomerByRecordID
#define SOAP_TYPE_TT1__editCustomerByRecordID (438)
/* TT1:editCustomerByRecordID */
struct TT1__editCustomerByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__saveCustomerResponse
#define SOAP_TYPE_TT1__saveCustomerResponse (440)
/* TT1:saveCustomerResponse */
struct TT1__saveCustomerResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__saveCustomer
#define SOAP_TYPE_TT1__saveCustomer (441)
/* TT1:saveCustomer */
struct TT1__saveCustomer
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *firstName;	/* optional element of type xsd:string */
	char *middleInitials;	/* optional element of type xsd:string */
	char *lastName;	/* optional element of type xsd:string */
	TT1__CUser *pCustomer;	/* optional element of type TT1:CUser */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteCustomerResponse
#define SOAP_TYPE_TT1__deleteCustomerResponse (443)
/* TT1:deleteCustomerResponse */
struct TT1__deleteCustomerResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteCustomer
#define SOAP_TYPE_TT1__deleteCustomer (444)
/* TT1:deleteCustomer */
struct TT1__deleteCustomer
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *firstName;	/* optional element of type xsd:string */
	char *middleInitials;	/* optional element of type xsd:string */
	char *lastName;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteCustomerByRecordIDResponse
#define SOAP_TYPE_TT1__deleteCustomerByRecordIDResponse (446)
/* TT1:deleteCustomerByRecordIDResponse */
struct TT1__deleteCustomerByRecordIDResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteCustomerByRecordID
#define SOAP_TYPE_TT1__deleteCustomerByRecordID (447)
/* TT1:deleteCustomerByRecordID */
struct TT1__deleteCustomerByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveCustomerResponse
#define SOAP_TYPE_TT1__cancelSaveCustomerResponse (449)
/* TT1:cancelSaveCustomerResponse */
struct TT1__cancelSaveCustomerResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveCustomer
#define SOAP_TYPE_TT1__cancelSaveCustomer (450)
/* TT1:cancelSaveCustomer */
struct TT1__cancelSaveCustomer
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__promoteCustomerResponse
#define SOAP_TYPE_TT1__promoteCustomerResponse (452)
/* TT1:promoteCustomerResponse */
struct TT1__promoteCustomerResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__promoteCustomer
#define SOAP_TYPE_TT1__promoteCustomer (453)
/* TT1:promoteCustomer */
struct TT1__promoteCustomer
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *localCustomer;	/* optional element of type xsd:string */
	char *globalUser;	/* optional element of type xsd:string */
	char *loginname;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__addGlobalCustomerResponse
#define SOAP_TYPE_TT1__addGlobalCustomerResponse (455)
/* TT1:addGlobalCustomerResponse */
struct TT1__addGlobalCustomerResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__addGlobalCustomer
#define SOAP_TYPE_TT1__addGlobalCustomer (456)
/* TT1:addGlobalCustomer */
struct TT1__addGlobalCustomer
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CGlobalUser *pUser;	/* optional element of type TT1:CGlobalUser */
};
#endif

#ifndef SOAP_TYPE_TT1__getLinksForItemResponse
#define SOAP_TYPE_TT1__getLinksForItemResponse (457)
/* TT1:getLinksForItemResponse */
struct TT1__getLinksForItemResponse
{
public:
	TT1ArrayOfCLink *pLinkList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCLink */
};
#endif

#ifndef SOAP_TYPE_TT1__getLinksForItem
#define SOAP_TYPE_TT1__getLinksForItem (461)
/* TT1:getLinksForItem */
struct TT1__getLinksForItem
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *tablename;	/* optional element of type xsd:string */
	LONG64 itemRecordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getLinksForDefectResponse
#define SOAP_TYPE_TT1__getLinksForDefectResponse (462)
/* TT1:getLinksForDefectResponse */
struct TT1__getLinksForDefectResponse
{
public:
	TT1ArrayOfCLink *pLinkList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCLink */
};
#endif

#ifndef SOAP_TYPE_TT1__getLinksForDefect
#define SOAP_TYPE_TT1__getLinksForDefect (465)
/* TT1:getLinksForDefect */
struct TT1__getLinksForDefect
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 defectRecordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getLinkResponse
#define SOAP_TYPE_TT1__getLinkResponse (466)
/* TT1:getLinkResponse */
struct TT1__getLinkResponse
{
public:
	TT1__CLink *pLink;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CLink */
};
#endif

#ifndef SOAP_TYPE_TT1__getLink
#define SOAP_TYPE_TT1__getLink (469)
/* TT1:getLink */
struct TT1__getLink
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 linkID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addLinkResponse
#define SOAP_TYPE_TT1__addLinkResponse (471)
/* TT1:addLinkResponse */
struct TT1__addLinkResponse
{
public:
	LONG64 recordID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addLink
#define SOAP_TYPE_TT1__addLink (472)
/* TT1:addLink */
struct TT1__addLink
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CLink *pLink;	/* optional element of type TT1:CLink */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteLinkResponse
#define SOAP_TYPE_TT1__deleteLinkResponse (474)
/* TT1:deleteLinkResponse */
struct TT1__deleteLinkResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteLink
#define SOAP_TYPE_TT1__deleteLink (475)
/* TT1:deleteLink */
struct TT1__deleteLink
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 linkID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__editLinkResponse
#define SOAP_TYPE_TT1__editLinkResponse (476)
/* TT1:editLinkResponse */
struct TT1__editLinkResponse
{
public:
	TT1__CLink *pLink;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CLink */
};
#endif

#ifndef SOAP_TYPE_TT1__editLink
#define SOAP_TYPE_TT1__editLink (479)
/* TT1:editLink */
struct TT1__editLink
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 linkID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__saveLinkResponse
#define SOAP_TYPE_TT1__saveLinkResponse (481)
/* TT1:saveLinkResponse */
struct TT1__saveLinkResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__saveLink
#define SOAP_TYPE_TT1__saveLink (482)
/* TT1:saveLink */
struct TT1__saveLink
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CLink *pLink;	/* optional element of type TT1:CLink */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveLinkResponse
#define SOAP_TYPE_TT1__cancelSaveLinkResponse (484)
/* TT1:cancelSaveLinkResponse */
struct TT1__cancelSaveLinkResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveLink
#define SOAP_TYPE_TT1__cancelSaveLink (485)
/* TT1:cancelSaveLink */
struct TT1__cancelSaveLink
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 linkID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestVariantTypesResponse
#define SOAP_TYPE_TT1__getTestVariantTypesResponse (486)
/* TT1:getTestVariantTypesResponse */
struct TT1__getTestVariantTypesResponse
{
public:
	TT1ArrayOfstring *pTypeList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfstring */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestVariantTypes
#define SOAP_TYPE_TT1__getTestVariantTypes (489)
/* TT1:getTestVariantTypes */
struct TT1__getTestVariantTypes
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestRunStepsModesResponse
#define SOAP_TYPE_TT1__getTestRunStepsModesResponse (490)
/* TT1:getTestRunStepsModesResponse */
struct TT1__getTestRunStepsModesResponse
{
public:
	TT1ArrayOfstring *pModeList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfstring */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestRunStepsModes
#define SOAP_TYPE_TT1__getTestRunStepsModes (493)
/* TT1:getTestRunStepsModes */
struct TT1__getTestRunStepsModes
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestCaseResponse
#define SOAP_TYPE_TT1__getTestCaseResponse (494)
/* TT1:getTestCaseResponse */
struct TT1__getTestCaseResponse
{
public:
	TT1__CTestCase *pTestCase;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTestCase */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestCase
#define SOAP_TYPE_TT1__getTestCase (498)
/* TT1:getTestCase */
struct TT1__getTestCase
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 testCaseNumber;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestCaseByRecordIDResponse
#define SOAP_TYPE_TT1__getTestCaseByRecordIDResponse (499)
/* TT1:getTestCaseByRecordIDResponse */
struct TT1__getTestCaseByRecordIDResponse
{
public:
	TT1__CTestCase *pTestCase;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTestCase */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestCaseByRecordID
#define SOAP_TYPE_TT1__getTestCaseByRecordID (502)
/* TT1:getTestCaseByRecordID */
struct TT1__getTestCaseByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__addTestCaseResponse
#define SOAP_TYPE_TT1__addTestCaseResponse (504)
/* TT1:addTestCaseResponse */
struct TT1__addTestCaseResponse
{
public:
	LONG64 recordID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addTestCase
#define SOAP_TYPE_TT1__addTestCase (505)
/* TT1:addTestCase */
struct TT1__addTestCase
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CTestCase *pTestCase;	/* optional element of type TT1:CTestCase */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestCaseResponse
#define SOAP_TYPE_TT1__deleteTestCaseResponse (507)
/* TT1:deleteTestCaseResponse */
struct TT1__deleteTestCaseResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestCase
#define SOAP_TYPE_TT1__deleteTestCase (508)
/* TT1:deleteTestCase */
struct TT1__deleteTestCase
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 testCaseNumber;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
	bool bDeleteAssociatedTestRuns;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestCaseByRecordIDResponse
#define SOAP_TYPE_TT1__deleteTestCaseByRecordIDResponse (510)
/* TT1:deleteTestCaseByRecordIDResponse */
struct TT1__deleteTestCaseByRecordIDResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestCaseByRecordID
#define SOAP_TYPE_TT1__deleteTestCaseByRecordID (511)
/* TT1:deleteTestCaseByRecordID */
struct TT1__deleteTestCaseByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool bDeleteAssociatedTestRun;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestCaseResponse
#define SOAP_TYPE_TT1__editTestCaseResponse (512)
/* TT1:editTestCaseResponse */
struct TT1__editTestCaseResponse
{
public:
	TT1__CTestCase *pTestCase;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTestCase */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestCase
#define SOAP_TYPE_TT1__editTestCase (515)
/* TT1:editTestCase */
struct TT1__editTestCase
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 testCaseNumber;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestCaseByRecordIDResponse
#define SOAP_TYPE_TT1__editTestCaseByRecordIDResponse (516)
/* TT1:editTestCaseByRecordIDResponse */
struct TT1__editTestCaseByRecordIDResponse
{
public:
	TT1__CTestCase *pTestCase;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTestCase */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestCaseByRecordID
#define SOAP_TYPE_TT1__editTestCaseByRecordID (519)
/* TT1:editTestCaseByRecordID */
struct TT1__editTestCaseByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__saveTestCaseResponse
#define SOAP_TYPE_TT1__saveTestCaseResponse (521)
/* TT1:saveTestCaseResponse */
struct TT1__saveTestCaseResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__saveTestCase
#define SOAP_TYPE_TT1__saveTestCase (522)
/* TT1:saveTestCase */
struct TT1__saveTestCase
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CTestCase *pTestCase;	/* optional element of type TT1:CTestCase */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveTestCaseResponse
#define SOAP_TYPE_TT1__cancelSaveTestCaseResponse (524)
/* TT1:cancelSaveTestCaseResponse */
struct TT1__cancelSaveTestCaseResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveTestCase
#define SOAP_TYPE_TT1__cancelSaveTestCase (525)
/* TT1:cancelSaveTestCase */
struct TT1__cancelSaveTestCase
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestRunResponse
#define SOAP_TYPE_TT1__getTestRunResponse (526)
/* TT1:getTestRunResponse */
struct TT1__getTestRunResponse
{
public:
	TT1__CTestRun *pTestRun;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTestRun */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestRun
#define SOAP_TYPE_TT1__getTestRun (530)
/* TT1:getTestRun */
struct TT1__getTestRun
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 testRunNumber;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestRunByRecordIDResponse
#define SOAP_TYPE_TT1__getTestRunByRecordIDResponse (531)
/* TT1:getTestRunByRecordIDResponse */
struct TT1__getTestRunByRecordIDResponse
{
public:
	TT1__CTestRun *pTestRun;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTestRun */
};
#endif

#ifndef SOAP_TYPE_TT1__getTestRunByRecordID
#define SOAP_TYPE_TT1__getTestRunByRecordID (534)
/* TT1:getTestRunByRecordID */
struct TT1__getTestRunByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestRunResponse
#define SOAP_TYPE_TT1__deleteTestRunResponse (536)
/* TT1:deleteTestRunResponse */
struct TT1__deleteTestRunResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestRun
#define SOAP_TYPE_TT1__deleteTestRun (537)
/* TT1:deleteTestRun */
struct TT1__deleteTestRun
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 testRunNumber;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestRunByRecordIDResponse
#define SOAP_TYPE_TT1__deleteTestRunByRecordIDResponse (539)
/* TT1:deleteTestRunByRecordIDResponse */
struct TT1__deleteTestRunByRecordIDResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteTestRunByRecordID
#define SOAP_TYPE_TT1__deleteTestRunByRecordID (540)
/* TT1:deleteTestRunByRecordID */
struct TT1__deleteTestRunByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestRunResponse
#define SOAP_TYPE_TT1__editTestRunResponse (541)
/* TT1:editTestRunResponse */
struct TT1__editTestRunResponse
{
public:
	TT1__CTestRun *pTestRun;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTestRun */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestRun
#define SOAP_TYPE_TT1__editTestRun (544)
/* TT1:editTestRun */
struct TT1__editTestRun
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 testRunNumber;	/* required element of type xsd:long */
	char *summary;	/* optional element of type xsd:string */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestRunByRecordIDResponse
#define SOAP_TYPE_TT1__editTestRunByRecordIDResponse (545)
/* TT1:editTestRunByRecordIDResponse */
struct TT1__editTestRunByRecordIDResponse
{
public:
	TT1__CTestRun *pTestRun;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CTestRun */
};
#endif

#ifndef SOAP_TYPE_TT1__editTestRunByRecordID
#define SOAP_TYPE_TT1__editTestRunByRecordID (548)
/* TT1:editTestRunByRecordID */
struct TT1__editTestRunByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool bDownloadAttachments;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__saveTestRunResponse
#define SOAP_TYPE_TT1__saveTestRunResponse (550)
/* TT1:saveTestRunResponse */
struct TT1__saveTestRunResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__saveTestRun
#define SOAP_TYPE_TT1__saveTestRun (551)
/* TT1:saveTestRun */
struct TT1__saveTestRun
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CTestRun *pTestRun;	/* optional element of type TT1:CTestRun */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveTestRunResponse
#define SOAP_TYPE_TT1__cancelSaveTestRunResponse (553)
/* TT1:cancelSaveTestRunResponse */
struct TT1__cancelSaveTestRunResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveTestRun
#define SOAP_TYPE_TT1__cancelSaveTestRun (554)
/* TT1:cancelSaveTestRun */
struct TT1__cancelSaveTestRun
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__createDefectForTestRunResponse
#define SOAP_TYPE_TT1__createDefectForTestRunResponse (555)
/* TT1:createDefectForTestRunResponse */
struct TT1__createDefectForTestRunResponse
{
public:
	TT1__CDefect *pDefect;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CDefect */
};
#endif

#ifndef SOAP_TYPE_TT1__createDefectForTestRun
#define SOAP_TYPE_TT1__createDefectForTestRun (558)
/* TT1:createDefectForTestRun */
struct TT1__createDefectForTestRun
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__generateTestRunsResponse
#define SOAP_TYPE_TT1__generateTestRunsResponse (559)
/* TT1:generateTestRunsResponse */
struct TT1__generateTestRunsResponse
{
public:
	TT1ArrayOfCItemToTrack *pResults;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCItemToTrack */
};
#endif

#ifndef SOAP_TYPE_TT1__generateTestRuns
#define SOAP_TYPE_TT1__generateTestRuns (564)
/* TT1:generateTestRuns */
struct TT1__generateTestRuns
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	TT1ArrayOfCTestRunVariantField *testVariants;	/* optional element of type ArrayOfCTestRunVariantField */
	char *testRunSet;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__addFolderResponse
#define SOAP_TYPE_TT1__addFolderResponse (566)
/* TT1:addFolderResponse */
struct TT1__addFolderResponse
{
public:
	LONG64 recordID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__addFolder
#define SOAP_TYPE_TT1__addFolder (567)
/* TT1:addFolder */
struct TT1__addFolder
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CFolder *pFolder;	/* optional element of type TT1:CFolder */
};
#endif

#ifndef SOAP_TYPE_TT1__editFolderResponse
#define SOAP_TYPE_TT1__editFolderResponse (568)
/* TT1:editFolderResponse */
struct TT1__editFolderResponse
{
public:
	TT1__CFolder *pFolder;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CFolder */
};
#endif

#ifndef SOAP_TYPE_TT1__editFolder
#define SOAP_TYPE_TT1__editFolder (571)
/* TT1:editFolder */
struct TT1__editFolder
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *folderPath;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__editFolderByRecordIDResponse
#define SOAP_TYPE_TT1__editFolderByRecordIDResponse (572)
/* TT1:editFolderByRecordIDResponse */
struct TT1__editFolderByRecordIDResponse
{
public:
	TT1__CFolder *pFolder;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CFolder */
};
#endif

#ifndef SOAP_TYPE_TT1__editFolderByRecordID
#define SOAP_TYPE_TT1__editFolderByRecordID (575)
/* TT1:editFolderByRecordID */
struct TT1__editFolderByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool publicFolder;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__saveFolderResponse
#define SOAP_TYPE_TT1__saveFolderResponse (577)
/* TT1:saveFolderResponse */
struct TT1__saveFolderResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__saveFolder
#define SOAP_TYPE_TT1__saveFolder (578)
/* TT1:saveFolder */
struct TT1__saveFolder
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	TT1__CFolder *pFolder;	/* optional element of type TT1:CFolder */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveFolderResponse
#define SOAP_TYPE_TT1__cancelSaveFolderResponse (580)
/* TT1:cancelSaveFolderResponse */
struct TT1__cancelSaveFolderResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__cancelSaveFolder
#define SOAP_TYPE_TT1__cancelSaveFolder (581)
/* TT1:cancelSaveFolder */
struct TT1__cancelSaveFolder
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getFolderResponse
#define SOAP_TYPE_TT1__getFolderResponse (582)
/* TT1:getFolderResponse */
struct TT1__getFolderResponse
{
public:
	TT1__CFolder *pFolder;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CFolder */
};
#endif

#ifndef SOAP_TYPE_TT1__getFolder
#define SOAP_TYPE_TT1__getFolder (585)
/* TT1:getFolder */
struct TT1__getFolder
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *path;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getFolderByRecordIDResponse
#define SOAP_TYPE_TT1__getFolderByRecordIDResponse (586)
/* TT1:getFolderByRecordIDResponse */
struct TT1__getFolderByRecordIDResponse
{
public:
	TT1__CFolder *pFolder;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type TT1:CFolder */
};
#endif

#ifndef SOAP_TYPE_TT1__getFolderByRecordID
#define SOAP_TYPE_TT1__getFolderByRecordID (589)
/* TT1:getFolderByRecordID */
struct TT1__getFolderByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool publicFolder;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteFolderResponse
#define SOAP_TYPE_TT1__deleteFolderResponse (591)
/* TT1:deleteFolderResponse */
struct TT1__deleteFolderResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteFolder
#define SOAP_TYPE_TT1__deleteFolder (592)
/* TT1:deleteFolder */
struct TT1__deleteFolder
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	char *folderPath;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteFolderByRecordIDResponse
#define SOAP_TYPE_TT1__deleteFolderByRecordIDResponse (594)
/* TT1:deleteFolderByRecordIDResponse */
struct TT1__deleteFolderByRecordIDResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__deleteFolderByRecordID
#define SOAP_TYPE_TT1__deleteFolderByRecordID (595)
/* TT1:deleteFolderByRecordID */
struct TT1__deleteFolderByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool publicFolder;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__addEntityToFolderByRecordIDResponse
#define SOAP_TYPE_TT1__addEntityToFolderByRecordIDResponse (597)
/* TT1:addEntityToFolderByRecordIDResponse */
struct TT1__addEntityToFolderByRecordIDResponse
{
public:
	int itemRecordID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__addEntityToFolderByRecordID
#define SOAP_TYPE_TT1__addEntityToFolderByRecordID (598)
/* TT1:addEntityToFolderByRecordID */
struct TT1__addEntityToFolderByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool publicFolder;	/* required element of type xsd:boolean */
	LONG64 entityRecordID;	/* required element of type xsd:long */
	char *entityTableName;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__removeEntityFromFolderByRecordIDResponse
#define SOAP_TYPE_TT1__removeEntityFromFolderByRecordIDResponse (600)
/* TT1:removeEntityFromFolderByRecordIDResponse */
struct TT1__removeEntityFromFolderByRecordIDResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_TT1__removeEntityFromFolderByRecordID
#define SOAP_TYPE_TT1__removeEntityFromFolderByRecordID (601)
/* TT1:removeEntityFromFolderByRecordID */
struct TT1__removeEntityFromFolderByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool publicFolder;	/* required element of type xsd:boolean */
	TT1__CFolderItem *entity;	/* optional element of type TT1:CFolderItem */
};
#endif

#ifndef SOAP_TYPE_TT1__getEntityListForFolderByRecordIDResponse
#define SOAP_TYPE_TT1__getEntityListForFolderByRecordIDResponse (602)
/* TT1:getEntityListForFolderByRecordIDResponse */
struct TT1__getEntityListForFolderByRecordIDResponse
{
public:
	TT1ArrayOfCFolderItem *pEntityList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfCFolderItem */
};
#endif

#ifndef SOAP_TYPE_TT1__getEntityListForFolderByRecordID
#define SOAP_TYPE_TT1__getEntityListForFolderByRecordID (606)
/* TT1:getEntityListForFolderByRecordID */
struct TT1__getEntityListForFolderByRecordID
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
	LONG64 recordID;	/* required element of type xsd:long */
	bool publicFolder;	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_TT1__getFolderPathSeparatorResponse
#define SOAP_TYPE_TT1__getFolderPathSeparatorResponse (609)
/* TT1:getFolderPathSeparatorResponse */
struct TT1__getFolderPathSeparatorResponse
{
public:
	char separator;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:byte */
};
#endif

#ifndef SOAP_TYPE_TT1__getFolderPathSeparator
#define SOAP_TYPE_TT1__getFolderPathSeparator (610)
/* TT1:getFolderPathSeparator */
struct TT1__getFolderPathSeparator
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getRootPublicFolderPathResponse
#define SOAP_TYPE_TT1__getRootPublicFolderPathResponse (613)
/* TT1:getRootPublicFolderPathResponse */
struct TT1__getRootPublicFolderPathResponse
{
public:
	char *strPublicPath;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getRootPublicFolderPath
#define SOAP_TYPE_TT1__getRootPublicFolderPath (614)
/* TT1:getRootPublicFolderPath */
struct TT1__getRootPublicFolderPath
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_TT1__getRootPrivateFolderPathResponse
#define SOAP_TYPE_TT1__getRootPrivateFolderPathResponse (616)
/* TT1:getRootPrivateFolderPathResponse */
struct TT1__getRootPrivateFolderPathResponse
{
public:
	char *strPrivatePath;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_TT1__getRootPrivateFolderPath
#define SOAP_TYPE_TT1__getRootPrivateFolderPath (617)
/* TT1:getRootPrivateFolderPath */
struct TT1__getRootPrivateFolderPath
{
public:
	LONG64 cookie;	/* required element of type xsd:long */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (618)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (619)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (621)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (624)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (625)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (12)
typedef char xsd__byte;
#endif

#ifndef SOAP_TYPE_xsd__date
#define SOAP_TYPE_xsd__date (13)
typedef char *xsd__date;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDatabaseList(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct TT1__getDatabaseListResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getProjectList(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *username, char *password, struct TT1__getProjectListResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getProjectDataOptionList(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct TT1__getProjectDataOptionListResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__DatabaseLogon(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *dbname, char *username, char *password, LONG64 &Cookie);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__ProjectLogon(struct soap *soap, const char *soap_endpoint, const char *soap_action, TT1__CProject *pProj, char *username, char *password, LONG64 &Cookie);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__DatabaseLogoff(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTableList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getTableListResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDropdownFieldForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct TT1__getDropdownFieldForTableResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDropdownFieldValuesForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, char *fieldname, struct TT1__getDropdownFieldValuesForTableResponse &_param_6);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addDropdownFieldValuesForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, char *fieldname, TT1ArrayOfCFieldValue *pValueList, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__GetLinkDefinitionValues(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__GetLinkDefinitionValuesResponse &_param_7);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getColumnsForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct TT1__getColumnsForTableResponse &_param_8);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getFilterList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getFilterListResponse &_param_9);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getFilterListForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct TT1__getFilterListForTableResponse &_param_10);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getRecordListForTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, char *filtername, TT1ArrayOfCTableColumn *columnlist, struct TT1__getRecordListForTableResponse &_param_11);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *name, struct TT1__getTestConfigResponse &_param_12);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestConfigByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__getTestConfigByRecordIDResponse &_param_13);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CSystem *pTestConfig, LONG64 &recordID);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *name, struct TT1__editTestConfigResponse &_param_14);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestConfigByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__editTestConfigByRecordIDResponse &_param_15);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CSystem *pTestConfig, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *name, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestConfigByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveTestConfig(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getAttachmentTypes(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getAttachmentTypesResponse &_param_16);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getEventDefinitionList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct TT1__getEventDefinitionListResponse &_param_17);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDefectEventDefinitionList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getDefectEventDefinitionListResponse &_param_18);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getCustomFieldsDefinitionList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct TT1__getCustomFieldsDefinitionListResponse &_param_19);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDefectCustomFieldsDefinitionList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getDefectCustomFieldsDefinitionListResponse &_param_20);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 defectNumber, char *summary, bool bDownloadAttachments, struct TT1__getDefectResponse &_param_21);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDefectByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__getDefectByRecordIDResponse &_param_22);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CDefect *pDefect, LONG64 &recordID);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addDefectWithLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CDefect *pDefect, LONG64 testRunRecordID, LONG64 &recordID);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 defectNumber, char *summary, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteDefectByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 defectNumber, char *summary, bool bDownloadAttachments, struct TT1__editDefectResponse &_param_23);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editDefectByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__editDefectByRecordIDResponse &_param_24);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CDefect *pDefect, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getAttachment(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, LONG64 recordID, LONG64 eventID, char *pszArchiveName, struct TT1__getAttachmentResponse &_param_25);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getDefectAttachment(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *pszArchiveName, struct TT1__getDefectAttachmentResponse &_param_26);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *summary, struct TT1__getTaskResponse &_param_27);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTaskByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__getTaskByRecordIDResponse &_param_28);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CTask *pTask, LONG64 &recordID);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *summary, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTaskByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *summary, struct TT1__editTaskResponse &_param_29);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTaskByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__editTaskByRecordIDResponse &_param_30);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CTask *pTask, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveTask(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getGlobalUserList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getGlobalUserListResponse &_param_31);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getGlobalCustomerList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getGlobalCustomerListResponse &_param_32);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getUserLicenseList(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getUserLicenseListResponse &_param_33);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct TT1__getUserResponse &_param_34);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getUserByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__getUserByRecordIDResponse &_param_35);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CUser *pUser, LONG64 &recordID);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct TT1__editUserResponse &_param_36);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editUserByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__editUserByRecordIDResponse &_param_37);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, TT1__CUser *pUser, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteUserByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__promoteUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *localUser, char *globalUser, char *loginname, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addGlobalUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CGlobalUser *pUser, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct TT1__getCustomerResponse &_param_38);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getCustomerByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__getCustomerByRecordIDResponse &_param_39);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CUser *pCustomer, LONG64 &recordID);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct TT1__editCustomerResponse &_param_40);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editCustomerByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__editCustomerByRecordIDResponse &_param_41);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, TT1__CUser *pCustomer, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteCustomerByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__promoteCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *localCustomer, char *globalUser, char *loginname, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addGlobalCustomer(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CGlobalUser *pUser, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getLinksForItem(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *tablename, LONG64 itemRecordID, struct TT1__getLinksForItemResponse &_param_42);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getLinksForDefect(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 defectRecordID, struct TT1__getLinksForDefectResponse &_param_43);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, struct TT1__getLinkResponse &_param_44);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CLink *pLink, LONG64 &recordID);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, struct TT1__editLinkResponse &_param_45);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CLink *pLink, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestVariantTypes(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getTestVariantTypesResponse &_param_46);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestRunStepsModes(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, struct TT1__getTestRunStepsModesResponse &_param_47);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDownloadAttachments, struct TT1__getTestCaseResponse &_param_48);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestCaseByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__getTestCaseByRecordIDResponse &_param_49);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CTestCase *pTestCase, LONG64 &recordID);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDeleteAssociatedTestRuns, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestCaseByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDeleteAssociatedTestRun, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDownloadAttachments, struct TT1__editTestCaseResponse &_param_50);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestCaseByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__editTestCaseByRecordIDResponse &_param_51);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CTestCase *pTestCase, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveTestCase(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testRunNumber, char *summary, bool bDownloadAttachments, struct TT1__getTestRunResponse &_param_52);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getTestRunByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__getTestRunByRecordIDResponse &_param_53);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testRunNumber, char *summary, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteTestRunByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 testRunNumber, char *summary, bool bDownloadAttachments, struct TT1__editTestRunResponse &_param_54);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editTestRunByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct TT1__editTestRunByRecordIDResponse &_param_55);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CTestRun *pTestRun, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__createDefectForTestRun(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct TT1__createDefectForTestRunResponse &_param_56);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__generateTestRuns(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, TT1ArrayOfCTestRunVariantField *testVariants, char *testRunSet, struct TT1__generateTestRunsResponse &_param_57);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CFolder *pFolder, LONG64 &recordID);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *folderPath, struct TT1__editFolderResponse &_param_58);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__editFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, struct TT1__editFolderByRecordIDResponse &_param_59);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__saveFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, TT1__CFolder *pFolder, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__cancelSaveFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *path, struct TT1__getFolderResponse &_param_60);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, struct TT1__getFolderByRecordIDResponse &_param_61);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteFolder(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *folderPath, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__deleteFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__addEntityToFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, LONG64 entityRecordID, char *entityTableName, int &itemRecordID);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__removeEntityFromFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, TT1__CFolderItem *entity, int &result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getEntityListForFolderByRecordID(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, struct TT1__getEntityListForFolderByRecordIDResponse &_param_62);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getFolderPathSeparator(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char &separator);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getRootPublicFolderPath(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *&strPublicPath);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_TT1__getRootPrivateFolderPath(struct soap *soap, const char *soap_endpoint, const char *soap_action, LONG64 cookie, char *&strPrivatePath);

#endif

/* End of TestTrackStub.h */
