/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2011 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "OnlineSubsystemSteamworksNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_ENUMS
#define INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_ENUMS 1

enum ESteamMatchmakingType
{
    SMT_Invalid             =0,
    SMT_LAN                 =1,
    SMT_Internet            =2,
    SMT_MAX                 =3,
};
#define FOREACH_ENUM_ESTEAMMATCHMAKINGTYPE(op) \
    op(SMT_Invalid) \
    op(SMT_LAN) \
    op(SMT_Internet) 
enum ELeaderboardUpdateType
{
    LUT_KeepBest            =0,
    LUT_Force               =1,
    LUT_MAX                 =2,
};
#define FOREACH_ENUM_ELEADERBOARDUPDATETYPE(op) \
    op(LUT_KeepBest) \
    op(LUT_Force) 
enum ELeaderboardFormat
{
    LF_Number               =0,
    LF_Seconds              =1,
    LF_Milliseconds         =2,
    LF_MAX                  =3,
};
#define FOREACH_ENUM_ELEADERBOARDFORMAT(op) \
    op(LF_Number) \
    op(LF_Seconds) \
    op(LF_Milliseconds) 
enum ELeaderboardSortType
{
    LST_Ascending           =0,
    LST_Descending          =1,
    LST_MAX                 =2,
};
#define FOREACH_ENUM_ELEADERBOARDSORTTYPE(op) \
    op(LST_Ascending) \
    op(LST_Descending) 
enum ELeaderboardRequestType
{
    LRT_Global              =0,
    LRT_Player              =1,
    LRT_Friends             =2,
    LRT_MAX                 =3,
};
#define FOREACH_ENUM_ELEADERBOARDREQUESTTYPE(op) \
    op(LRT_Global) \
    op(LRT_Player) \
    op(LRT_Friends) 
enum EMuteType
{
    MUTE_None               =0,
    MUTE_AllButFriends      =1,
    MUTE_All                =2,
    MUTE_MAX                =3,
};
#define FOREACH_ENUM_EMUTETYPE(op) \
    op(MUTE_None) \
    op(MUTE_AllButFriends) \
    op(MUTE_All) 

#endif // !INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_CLASSES
#define INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

struct FServerQueryToRulesResponseMapping
{
    INT Query;
    SteamRulesResponse* Response;

    /** Constructors */
    FServerQueryToRulesResponseMapping() {}
    FServerQueryToRulesResponseMapping(EEventParm)
    {
        appMemzero(this, sizeof(FServerQueryToRulesResponseMapping));
    }
};

struct FServerQueryToPingResponseMapping
{
    INT Query;
    SteamPingResponse* Response;

    /** Constructors */
    FServerQueryToPingResponseMapping() {}
    FServerQueryToPingResponseMapping(EEventParm)
    {
        appMemzero(this, sizeof(FServerQueryToPingResponseMapping));
    }
};

class UOnlineGameInterfaceSteamworks : public UOnlineGameInterfaceImpl
{
public:
    //## BEGIN PROPS OnlineGameInterfaceSteamworks
    TArrayNoInit<struct FServerQueryToRulesResponseMapping> QueryToRulesResponseMap;
    TArrayNoInit<struct FServerQueryToPingResponseMapping> QueryToPingResponseMap;
    SteamServerListResponse* ServerListResponse;
    BYTE CurrentMatchmakingType;
    SCRIPT_ALIGN;
    void* CurrentMatchmakingQuery;
    TArrayNoInit<FScriptDelegate> GameInviteAcceptedDelegates;
    class UOnlineGameSearch* InviteGameSearch;
    FStringNoInit InviteLocationUrl;
    TArrayNoInit<FScriptDelegate> RegisterPlayerCompleteDelegates;
    TArrayNoInit<FScriptDelegate> UnregisterPlayerCompleteDelegates;
    FScriptDelegate __OnGameInviteAccepted__Delegate;
    FScriptDelegate __OnRegisterPlayerComplete__Delegate;
    FScriptDelegate __OnUnregisterPlayerComplete__Delegate;
    //## END PROPS OnlineGameInterfaceSteamworks

    virtual UBOOL UpdateOnlineGame(FName SessionName,class UOnlineGameSettings* UpdatedGameSettings,UBOOL bShouldRefreshOnlineData=FALSE);
    virtual UBOOL AcceptGameInvite(BYTE LocalUserNum,FName SessionName);
    virtual UBOOL RegisterPlayer(FName SessionName,struct FUniqueNetId PlayerID,UBOOL bWasInvited);
    virtual UBOOL UnregisterPlayer(FName SessionName,struct FUniqueNetId PlayerID);
    DECLARE_FUNCTION(execUpdateOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_GET_OBJECT(UOnlineGameSettings,UpdatedGameSettings);
        P_GET_UBOOL_OPTX(bShouldRefreshOnlineData,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->UpdateOnlineGame(SessionName,UpdatedGameSettings,bShouldRefreshOnlineData);
    }
    DECLARE_FUNCTION(execAcceptGameInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->AcceptGameInvite(LocalUserNum,SessionName);
    }
    DECLARE_FUNCTION(execRegisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL(bWasInvited);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterPlayer(SessionName,PlayerID,bWasInvited);
    }
    DECLARE_FUNCTION(execUnregisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterPlayer(SessionName,PlayerID);
    }
    DECLARE_CLASS(UOnlineGameInterfaceSteamworks,UOnlineGameInterfaceImpl,0|CLASS_Config,OnlineSubsystemSteamworks)
	/** Cleanup stuff that happens outside of uobject's view. */
	virtual void FinishDestroy();

	/** Shut down all Steam HServerQuery handles that might be in-flight. */
	void CancelAllQueries();

	/** Handles updating of any async tasks that need to be performed */
	void Tick(FLOAT DeltaTime);

	/** Bridge from ISteamMatchmakingServerListResponse (glue object that bridges to here is this->ServerListResponse). */
	void ServerResponded(int iServer);
	void ServerFailedToRespond(int iServer);
	void RefreshComplete(EMatchMakingServerResponse Response);

	/** Bridge from ISteamMatchmakingRulesResponse (glue class that bridges to here is SteamRulesResponse). */
	void RulesResponded(SteamRulesResponse *RulesResponse, const char *pchRule, const char *pchValue);
	void RulesFailedToRespond(SteamRulesResponse *RulesResponse);
	void RulesRefreshComplete(SteamRulesResponse *RulesResponse);

	/** Clean up a query mapped in QueryToRulesResponseMap. */
	void CancelSteamRulesQuery(SteamRulesResponse *RulesResponse, const UBOOL bCancel);

	/** Bridge from ISteamMatchmakingPingResponse (glue class that bridges to here is SteamPingResponse). */
	void UpdatePing(SteamPingResponse *PingResponse, const INT Ping);
	void PingServerResponded(SteamPingResponse *PingResponse, const gameserveritem_t &server);
	void PingServerFailedToRespond(SteamPingResponse *PingResponse);

	/** Clean up a query mapped in QueryToPingResponseMap. */
	void CancelSteamPingQuery(SteamPingResponse *PingResponse, const UBOOL bCancel);

	/** Add server to search results. */
	void AddServerToSearchResults(const gameserveritem_t *Server, const INT SteamIndex);

	/** Updates the server details with the new data */
	void UpdateGameSettingsData(UOnlineGameSettings* GameSettings, const SteamRulesMap &Rules);

	/** Marks a server in the server list as unreachable */
	void MarkServerAsUnreachable(const FInternetIpAddr& Addr);

	/** Frees the current server browser query and marks the search as done */
	void CleanupServerBrowserQuery(const UBOOL bCancel);

	/** Returns TRUE if the game wants stats, FALSE if not */
	UBOOL GameWantsStats();

	/** Returns TRUE if Game Server init succeeded, FALSE if not */
	UBOOL PublishSteamServer(const EServerMode ServerMode);

	/** Returns TRUE if we could start the LAN beacon, FALSE if not */
	UBOOL StartSteamLanBeacon();

	/** Clean up a previously started LAN beacon. */
	void StopSteamLanBeacon();

	/** Do some paperwork when Steam tells us the server policy. */
	void OnGSPolicyResponse(const UBOOL bIsVACSecured);

	/** overridden from superclass. */
	UBOOL FindOnlineGames(BYTE SearchingPlayerNum,UOnlineGameSearch* SearchSettings);
	DWORD FindInternetGames();
	DWORD FindLanGames();
	UBOOL CancelFindOnlineGames();
	DWORD CancelFindInternetGames();
	DWORD CancelFindLanGames();
	void RefreshPublishedGameSettings();
	UBOOL CreateOnlineGame(BYTE HostingPlayerNum,FName SessionName,UOnlineGameSettings* NewGameSettings);
	DWORD CreateInternetGame(BYTE HostingPlayerNum);
	DWORD CreateLanGame(BYTE HostingPlayerNum);
	UBOOL JoinOnlineGame(BYTE PlayerNum,FName SessionName,const FOnlineGameSearchResult& DesiredGame);
	DWORD JoinInternetGame(BYTE PlayerNum);
	UBOOL StartOnlineGame(FName SessionName);
	DWORD StartInternetGame();
	UBOOL EndOnlineGame(FName SessionName);
	DWORD EndInternetGame();
	UBOOL DestroyOnlineGame(FName SessionName);
	DWORD DestroyInternetGame();
	DWORD DestroyLanGame();
	void TickLanTasks(FLOAT DeltaTime);
	void TickInternetTasks(FLOAT DeltaTime);
	void SetInviteInfo(const TCHAR* LocationString);
	void RegisterLocalTalkers();
	void UnregisterLocalTalkers();
	DWORD ReadPlatformSpecificInternetSessionInfo(const FOnlineGameSearchResult& DesiredGame,BYTE PlatformSpecificInfo[64]);
	DWORD BindPlatformSpecificSessionToInternetSearch(BYTE SearchingPlayerNum,UOnlineGameSearch* SearchSettings,BYTE* PlatformSpecificInfo);
};

struct FLocalTalkerSteam : public FLocalTalker
{
    BYTE MuteType;
    SCRIPT_ALIGN;

    /** Constructors */
    FLocalTalkerSteam() {}
    FLocalTalkerSteam(EEventParm)
    {
        appMemzero(this, sizeof(FLocalTalkerSteam));
    }
};

struct FPlayerStat
{
    INT ViewId;
    INT ColumnId;
    struct FSettingsData Data;

    /** Constructors */
    FPlayerStat() {}
    FPlayerStat(EEventParm)
    {
        appMemzero(this, sizeof(FPlayerStat));
    }
};

struct FPendingPlayerStats
{
    struct FUniqueNetId Player;
    FStringNoInit PlayerName;
    FStringNoInit StatGuid;
    TArrayNoInit<struct FPlayerStat> Stats;
    struct FOnlinePlayerScore Score;
    FStringNoInit Place;

    /** Constructors */
    FPendingPlayerStats() {}
    FPendingPlayerStats(EEventParm)
    {
        appMemzero(this, sizeof(FPendingPlayerStats));
    }
};

struct FProfileSettingsCache
{
    class UOnlineProfileSettings* Profile;
    TArrayNoInit<FScriptDelegate> ReadDelegates;
    TArrayNoInit<FScriptDelegate> WriteDelegates;
    TArrayNoInit<FScriptDelegate> ProfileDataChangedDelegates;

    /** Constructors */
    FProfileSettingsCache() {}
    FProfileSettingsCache(EEventParm)
    {
        appMemzero(this, sizeof(FProfileSettingsCache));
    }
};

struct FDeviceIdCache
{
    INT DeviceID;
    FScriptDelegate DeviceSelectionMulticast;
    TArrayNoInit<FScriptDelegate> DeviceSelectionDelegates;

    /** Constructors */
    FDeviceIdCache() {}
    FDeviceIdCache(EEventParm)
    {
        appMemzero(this, sizeof(FDeviceIdCache));
    }
};

struct FOnlineStatusMapping
{
    INT StatusId;
    FStringNoInit StatusString;

    /** Constructors */
    FOnlineStatusMapping() {}
    FOnlineStatusMapping(EEventParm)
    {
        appMemzero(this, sizeof(FOnlineStatusMapping));
    }
};

struct FControllerConnectionState
{
    INT bIsControllerConnected;
    INT bLastIsControllerConnected;

    /** Constructors */
    FControllerConnectionState() {}
    FControllerConnectionState(EEventParm)
    {
        appMemzero(this, sizeof(FControllerConnectionState));
    }
};

struct FQueuedAvatarRequest
{
    FLOAT CheckTime;
    INT NumberOfAttempts;
    struct FUniqueNetId PlayerNetId;
    FScriptDelegate ReadOnlineAvatarCompleteDelegate;

    /** Constructors */
    FQueuedAvatarRequest() {}
    FQueuedAvatarRequest(EEventParm)
    {
        appMemzero(this, sizeof(FQueuedAvatarRequest));
    }
};

struct FAchievementMappingInfo
{
    INT AchievementId;
    FName AchievementName;
    INT ViewId;
    INT ProgressCount;
    INT MaxProgress;
    BITFIELD bAutoUnlock:1;
    SCRIPT_ALIGN;

    /** Constructors */
    FAchievementMappingInfo() {}
    FAchievementMappingInfo(EEventParm)
    {
        appMemzero(this, sizeof(FAchievementMappingInfo));
    }
};

struct FAchievementProgressStat
{
    INT AchievementId;
    INT Progress;
    INT MaxProgress;
    BITFIELD bUnlock:1;
    SCRIPT_ALIGN;

    /** Constructors */
    FAchievementProgressStat() {}
    FAchievementProgressStat(EEventParm)
    {
        appMemzero(this, sizeof(FAchievementProgressStat));
    }
};

struct FLeaderboardTemplate
{
    FStringNoInit LeaderboardName;
    BYTE UpdateType;
    INT LeaderboardSize;
    BYTE SortType;
    BYTE DisplayFormat;
    SCRIPT_ALIGN;
    SteamLeaderboard_t LeaderboardRef;
    BITFIELD bLeaderboardInitializing:1;
    BITFIELD bLeaderboardInitiated:1;
    SCRIPT_ALIGN;

    /** Constructors */
    FLeaderboardTemplate() {}
    FLeaderboardTemplate(EEventParm)
    {
        appMemzero(this, sizeof(FLeaderboardTemplate));
    }
};

struct FDeferredLeaderboardRead
{
    FStringNoInit LeaderboardName;
    BYTE RequestType;
    INT Start;
    INT End;

    /** Constructors */
    FDeferredLeaderboardRead() {}
    FDeferredLeaderboardRead(EEventParm)
    {
        appMemzero(this, sizeof(FDeferredLeaderboardRead));
    }
};

struct FDeferredLeaderboardWrite
{
    FStringNoInit LeaderboardName;
    INT Score;

    /** Constructors */
    FDeferredLeaderboardWrite() {}
    FDeferredLeaderboardWrite(EEventParm)
    {
        appMemzero(this, sizeof(FDeferredLeaderboardWrite));
    }
};

struct FLeaderboardEntry
{
    struct FUniqueNetId PlayerUID;
    INT Rank;
    INT Score;

    /** Constructors */
    FLeaderboardEntry() {}
    FLeaderboardEntry(EEventParm)
    {
        appMemzero(this, sizeof(FLeaderboardEntry));
    }
};

struct FViewIdToLeaderboardName
{
    INT ViewId;
    FStringNoInit LeaderboardName;

    /** Constructors */
    FViewIdToLeaderboardName() {}
    FViewIdToLeaderboardName(EEventParm)
    {
        appMemzero(this, sizeof(FViewIdToLeaderboardName));
    }
};

struct OnlineSubsystemSteamworks_eventOnGetNumberOfCurrentPlayersComplete_Parms
{
    INT TotalPlayers;
    OnlineSubsystemSteamworks_eventOnGetNumberOfCurrentPlayersComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadOnlineAvatarComplete_Parms
{
    struct FUniqueNetId PlayerNetId;
    class UTexture2D* Avatar;
    OnlineSubsystemSteamworks_eventOnReadOnlineAvatarComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadAchievementsComplete_Parms
{
    INT TitleId;
    OnlineSubsystemSteamworks_eventOnReadAchievementsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnProfileDataChanged_Parms
{
    OnlineSubsystemSteamworks_eventOnProfileDataChanged_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnUnlockAchievementComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnUnlockAchievementComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnDeviceSelectionComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnDeviceSelectionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnRegisterHostStatGuidComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnRegisterHostStatGuidComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnFriendMessageReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId SendingPlayer;
    FString SendingNick;
    FString Message;
    OnlineSubsystemSteamworks_eventOnFriendMessageReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnJoinFriendGameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnJoinFriendGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReceivedGameInvite_Parms
{
    BYTE LocalUserNum;
    FString InviterName;
    OnlineSubsystemSteamworks_eventOnReceivedGameInvite_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnFriendInviteReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId RequestingPlayer;
    FString RequestingNick;
    FString Message;
    OnlineSubsystemSteamworks_eventOnFriendInviteReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnAddFriendByNameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnAddFriendByNameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnKeyboardInputComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnKeyboardInputComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnCreateOnlineAccountCompleted_Parms
{
    BYTE ErrorStatus;
    OnlineSubsystemSteamworks_eventOnCreateOnlineAccountCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadTitleFileComplete_Parms
{
    UBOOL bWasSuccessful;
    FString Filename;
    OnlineSubsystemSteamworks_eventOnReadTitleFileComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnStorageDeviceChange_Parms
{
    OnlineSubsystemSteamworks_eventOnStorageDeviceChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnConnectionStatusChange_Parms
{
    BYTE ConnectionStatus;
    OnlineSubsystemSteamworks_eventOnConnectionStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnControllerChange_Parms
{
    INT ControllerId;
    UBOOL bIsConnected;
    OnlineSubsystemSteamworks_eventOnControllerChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnExternalUIChange_Parms
{
    UBOOL bIsOpening;
    OnlineSubsystemSteamworks_eventOnExternalUIChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLinkStatusChange_Parms
{
    UBOOL bIsConnected;
    OnlineSubsystemSteamworks_eventOnLinkStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnFlushOnlineStatsComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnFlushOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadOnlineStatsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnReadOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnRecognitionComplete_Parms
{
    OnlineSubsystemSteamworks_eventOnRecognitionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnPlayerTalkingStateChange_Parms
{
    struct FUniqueNetId Player;
    UBOOL bIsTalking;
    OnlineSubsystemSteamworks_eventOnPlayerTalkingStateChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadFriendsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnReadFriendsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnWritePlayerStorageComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnWritePlayerStorageComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadPlayerStorageForNetIdComplete_Parms
{
    struct FUniqueNetId NetId;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnReadPlayerStorageForNetIdComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadPlayerStorageComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnReadPlayerStorageComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnWriteProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnWriteProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnReadProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLoginStatusChange_Parms
{
    BYTE NewStatus;
    struct FUniqueNetId NewId;
    OnlineSubsystemSteamworks_eventOnLoginStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLogoutCompleted_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnLogoutCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLoginFailed_Parms
{
    BYTE LocalUserNum;
    BYTE ErrorCode;
    OnlineSubsystemSteamworks_eventOnLoginFailed_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnFriendsChange_Parms
{
    OnlineSubsystemSteamworks_eventOnFriendsChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnMutingChange_Parms
{
    OnlineSubsystemSteamworks_eventOnMutingChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLoginCancelled_Parms
{
    OnlineSubsystemSteamworks_eventOnLoginCancelled_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLoginChange_Parms
{
    BYTE LocalUserNum;
    OnlineSubsystemSteamworks_eventOnLoginChange_Parms(EEventParm)
    {
    }
};
class UOnlineSubsystemSteamworks : public UOnlineSubsystemCommonImpl
{
public:
    //## BEGIN PROPS OnlineSubsystemSteamworks
    SteamCallbackBridge* CallbackBridge;
    BITFIELD bStoringAchievement:1;
    BITFIELD bGSStatsStoresSuccess:1;
    BITFIELD bNeedsKeyboardTicking:1;
    BITFIELD bLastHasConnection:1;
    BITFIELD bIsStatsSessionOk:1;
    BITFIELD bHasSteamworksAccount:1;
    BITFIELD bShouldUseMcp:1;
    BITFIELD bListenHostPendingAuth:1;
    BITFIELD bListenHostAuthenticated:1;
    BITFIELD bIncrementStatValues:1;
    INT TotalGSStatsStoresPending;
    BYTE UserStatsReceivedState;
    BYTE LoggedInStatus;
    BYTE bWasKeyboardInputCanceled;
    BYTE CurrentNotificationPosition;
    BYTE ListenAuthRetryCount;
    class UOnlineGameInterfaceSteamworks* CachedGameInt;
    FStringNoInit LocalProfileName;
    FStringNoInit LoggedInPlayerName;
    struct FUniqueNetId LoggedInPlayerId;
    INT LoggedInPlayerNum;
    FStringNoInit ProfileDataDirectory;
    FStringNoInit ProfileDataExtension;
    TArrayNoInit<FScriptDelegate> WriteProfileSettingsDelegates;
    class UOnlineProfileSettings* CachedProfile;
    TArrayNoInit<FScriptDelegate> LocalPlayerStorageReadDelegates;
    TArrayNoInit<FScriptDelegate> LocalPlayerStorageWriteDelegates;
    TArrayNoInit<FScriptDelegate> RemotePlayerStorageReadDelegates;
    TArrayNoInit<FScriptDelegate> SpeechRecognitionCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ReadFriendsDelegates;
    TArrayNoInit<FScriptDelegate> FriendsChangeDelegates;
    TArrayNoInit<FScriptDelegate> MutingChangeDelegates;
    TArrayNoInit<FScriptDelegate> LoginChangeDelegates;
    TArrayNoInit<FScriptDelegate> LoginFailedDelegates;
    TArrayNoInit<FScriptDelegate> LogoutCompletedDelegates;
    TArrayNoInit<FScriptDelegate> AccountCreateDelegates;
    TArrayNoInit<FScriptDelegate> TalkingDelegates;
    TArrayNoInit<FScriptDelegate> ReadOnlineStatsCompleteDelegates;
    TArrayNoInit<FScriptDelegate> FlushOnlineStatsDelegates;
    TArrayNoInit<FScriptDelegate> ConnectionStatusChangeDelegates;
    TArrayNoInit<FScriptDelegate> ControllerChangeDelegates;
    TArrayNoInit<FScriptDelegate> LinkStatusDelegates;
    TArrayNoInit<FScriptDelegate> ReadTitleFileCompleteDelegates;
    TArrayNoInit<FScriptDelegate> AchievementDelegates;
    TArrayNoInit<FScriptDelegate> AchievementReadDelegates;
    struct FLocalTalkerSteam CurrentLocalTalker;
    TArrayNoInit<struct FRemoteTalker> RemoteTalkers;
    INT GameID;
    class UOnlineStatsRead* CurrentStatsRead;
    TArrayNoInit<struct FPendingPlayerStats> PendingStats;
    FStringNoInit KeyboardResultsString;
    TArrayNoInit<FScriptDelegate> KeyboardInputDelegates;
    TArrayNoInit<FScriptDelegate> FriendInviteReceivedDelegates;
    TArrayNoInit<FScriptDelegate> FriendMessageReceivedDelegates;
    TArrayNoInit<FScriptDelegate> AddFriendByNameCompleteDelegates;
    struct FProfileSettingsCache ProfileCache;
    class UOnlinePlayerStorage* PlayerStorageCache;
    FStringNoInit CachedFriendMessage;
    struct FDeviceIdCache DeviceCache;
    TArrayNoInit<FString> LocationUrlsForInvites;
    FStringNoInit LocationUrl;
    TArrayNoInit<FScriptDelegate> ReceivedGameInviteDelegates;
    TArrayNoInit<FScriptDelegate> JoinFriendGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> GetNumberOfCurrentPlayersCompleteDelegates;
    TArrayNoInit<FScriptDelegate> RegisterHostStatGuidCompleteDelegates;
    TArrayNoInit<struct FOnlineFriendMessage> CachedFriendMessages;
    TArrayNoInit<struct FOnlineStatusMapping> StatusMappings;
    FStringNoInit DefaultStatus;
    FStringNoInit GameInviteMessage;
    struct FControllerConnectionState ControllerStates[4];
    FLOAT ConnectionPresenceTimeInterval;
    FLOAT ConnectionPresenceElapsedTime;
    FStringNoInit EncryptedProductKey;
    INT NextAuthId;
    FStringNoInit ServerChallenge;
    FStringNoInit ServerResponse;
    INT ServerLocalId;
    TArrayNoInit<struct FUniqueNetId> MuteList;
    TArrayNoInit<struct FQueuedAvatarRequest> QueuedAvatarRequests;
    TArrayNoInit<struct FAchievementMappingInfo> AchievementMappings;
    TArrayNoInit<struct FAchievementProgressStat> PendingAchievementProgress;
    TArrayNoInit<struct FLeaderboardTemplate> LeaderboardList;
    INT PendingLeaderboardInits;
    INT PendingLeaderboardReads;
    INT PendingLeaderboardWrites;
    TArrayNoInit<struct FDeferredLeaderboardRead> DeferredLeaderboardReads;
    TArrayNoInit<struct FDeferredLeaderboardWrite> DeferredLeaderboardWrites;
    TArrayNoInit<struct FDeferredLeaderboardWrite> PendingLeaderboardStats;
    TArrayNoInit<struct FLeaderboardEntry> ProcessedLeaderboardReads;
    TArrayNoInit<struct FViewIdToLeaderboardName> LeaderboardNameMappings;
    FLOAT ListenAuthTimestamp;
    TArrayNoInit<struct FUniqueNetId> StatsReadList;
    FScriptDelegate __OnLoginChange__Delegate;
    FScriptDelegate __OnLoginCancelled__Delegate;
    FScriptDelegate __OnMutingChange__Delegate;
    FScriptDelegate __OnFriendsChange__Delegate;
    FScriptDelegate __OnLoginFailed__Delegate;
    FScriptDelegate __OnLogoutCompleted__Delegate;
    FScriptDelegate __OnLoginStatusChange__Delegate;
    FScriptDelegate __OnReadProfileSettingsComplete__Delegate;
    FScriptDelegate __OnWriteProfileSettingsComplete__Delegate;
    FScriptDelegate __OnReadPlayerStorageComplete__Delegate;
    FScriptDelegate __OnReadPlayerStorageForNetIdComplete__Delegate;
    FScriptDelegate __OnWritePlayerStorageComplete__Delegate;
    FScriptDelegate __OnReadFriendsComplete__Delegate;
    FScriptDelegate __OnPlayerTalkingStateChange__Delegate;
    FScriptDelegate __OnRecognitionComplete__Delegate;
    FScriptDelegate __OnReadOnlineStatsComplete__Delegate;
    FScriptDelegate __OnFlushOnlineStatsComplete__Delegate;
    FScriptDelegate __OnLinkStatusChange__Delegate;
    FScriptDelegate __OnExternalUIChange__Delegate;
    FScriptDelegate __OnControllerChange__Delegate;
    FScriptDelegate __OnConnectionStatusChange__Delegate;
    FScriptDelegate __OnStorageDeviceChange__Delegate;
    FScriptDelegate __OnReadTitleFileComplete__Delegate;
    FScriptDelegate __OnCreateOnlineAccountCompleted__Delegate;
    FScriptDelegate __OnKeyboardInputComplete__Delegate;
    FScriptDelegate __OnAddFriendByNameComplete__Delegate;
    FScriptDelegate __OnFriendInviteReceived__Delegate;
    FScriptDelegate __OnReceivedGameInvite__Delegate;
    FScriptDelegate __OnJoinFriendGameComplete__Delegate;
    FScriptDelegate __OnFriendMessageReceived__Delegate;
    FScriptDelegate __OnRegisterHostStatGuidComplete__Delegate;
    FScriptDelegate __OnDeviceSelectionComplete__Delegate;
    FScriptDelegate __OnUnlockAchievementComplete__Delegate;
    FScriptDelegate __OnProfileDataChanged__Delegate;
    FScriptDelegate __OnReadAchievementsComplete__Delegate;
    FScriptDelegate __OnReadOnlineAvatarComplete__Delegate;
    FScriptDelegate __OnGetNumberOfCurrentPlayersComplete__Delegate;
    //## END PROPS OnlineSubsystemSteamworks

    virtual UBOOL Init();
    virtual UBOOL ShowLoginUI(UBOOL bShowOnlineOnly=FALSE);
    virtual UBOOL Login(BYTE LocalUserNum,const FString& LoginName,const FString& Password,UBOOL bWantsLocalOnly=FALSE);
    virtual UBOOL AutoLogin();
    virtual UBOOL Logout(BYTE LocalUserNum);
    virtual BYTE GetLoginStatus(BYTE LocalUserNum);
    virtual BYTE CanPlayOnline(BYTE LocalUserNum);
    virtual BYTE CanCommunicate(BYTE LocalUserNum);
    virtual UBOOL IsFriend(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL AreAnyFriends(BYTE LocalUserNum,TArray<struct FFriendsQuery>& Query);
    virtual UBOOL ReadProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL WriteProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL ReadFriendsList(BYTE LocalUserNum,INT Count=0,INT StartingAt=0);
    virtual BYTE GetFriendsList(BYTE LocalUserNum,TArray<struct FOnlineFriend>& Friends,INT Count=0,INT StartingAt=0);
    virtual UBOOL RegisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL UnregisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL RegisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL UnregisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL IsLocalPlayerTalking(BYTE LocalUserNum);
    virtual UBOOL IsRemotePlayerTalking(struct FUniqueNetId PlayerID);
    virtual UBOOL IsHeadsetPresent(BYTE LocalUserNum);
    virtual UBOOL SetRemoteTalkerPriority(BYTE LocalUserNum,struct FUniqueNetId PlayerID,INT Priority);
    virtual UBOOL MuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID,UBOOL bIsSystemWide=FALSE);
    virtual UBOOL UnmuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID,UBOOL bIsSystemWide=FALSE);
    virtual void StartNetworkedVoice(BYTE LocalUserNum);
    virtual void StopNetworkedVoice(BYTE LocalUserNum);
    virtual UBOOL StartSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL StopSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL GetRecognitionResults(BYTE LocalUserNum,TArray<FSpeechRecognizedWord>& Words);
    virtual UBOOL SelectVocabulary(BYTE LocalUserNum,INT VocabularyId);
    virtual UBOOL SetSpeechRecognitionObject(BYTE LocalUserNum,class USpeechRecognition* SpeechRecogObj);
    virtual UBOOL ReadOnlineStats(const TArray<struct FUniqueNetId>& Players,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsForFriends(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead,INT StartIndex=1,INT NumToRead=100);
    virtual UBOOL ReadOnlineStatsByRankAroundPlayer(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead,INT NumRows=10);
    virtual void FreeStats(class UOnlineStatsRead* StatsRead);
    virtual UBOOL WriteOnlineStats(FName SessionName,struct FUniqueNetId Player,class UOnlineStatsWrite* StatsWrite);
    virtual UBOOL FlushOnlineStats(FName SessionName);
    virtual UBOOL WriteOnlinePlayerScores(FName SessionName,INT LeaderboardId,const TArray<struct FOnlinePlayerScore>& PlayerScores);
    virtual UBOOL HasLinkConnection();
    virtual void SetNetworkNotificationPosition(BYTE NewPos);
    virtual UBOOL IsControllerConnected(INT ControllerId);
    virtual BYTE GetNATType();
    virtual UBOOL ReadTitleFile(const FString& FileToRead);
    virtual UBOOL GetTitleFileContents(const FString& Filename,TArray<BYTE>& FileContents);
    virtual UBOOL CreateOnlineAccount(const FString& UserName,const FString& Password,const FString& EmailAddress,const FString& ProductKey=TEXT(""));
    virtual void SetOnlineStatus(BYTE LocalUserNum,INT StatusId,const TArray<struct FLocalizedStringSetting>& LocalizedStringSettings,const TArray<struct FSettingsProperty>& Properties);
    virtual UBOOL ShowKeyboardUI(BYTE LocalUserNum,const FString& TitleText,const FString& DescriptionText,UBOOL bIsPassword=FALSE,UBOOL bShouldValidate=TRUE,const FString& DefaultText=TEXT(""),INT MaxResultLength=256);
    virtual UBOOL AddFriend(BYTE LocalUserNum,struct FUniqueNetId NewFriend,const FString& Message=TEXT(""));
    virtual UBOOL AddFriendByName(BYTE LocalUserNum,const FString& FriendName,const FString& Message=TEXT(""));
    virtual UBOOL RemoveFriend(BYTE LocalUserNum,struct FUniqueNetId FormerFriend);
    virtual UBOOL AcceptFriendInvite(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer);
    virtual UBOOL DenyFriendInvite(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer);
    virtual UBOOL SendMessageToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Message);
    virtual UBOOL SendGameInviteToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Text=TEXT(""));
    virtual UBOOL SendGameInviteToFriends(BYTE LocalUserNum,const TArray<struct FUniqueNetId>& Friends,const FString& Text=TEXT(""));
    virtual UBOOL JoinFriendGame(BYTE LocalUserNum,struct FUniqueNetId Friend);
    virtual FString GetHostStatGuid();
    virtual UBOOL RegisterHostStatGuid(const FString& HostStatGuid);
    virtual FString GetClientStatGuid();
    virtual UBOOL RegisterStatGuid(struct FUniqueNetId PlayerID,const FString& ClientStatGuid);
    virtual UBOOL ShowFeedbackUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowGamerCardUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowMessagesUI(BYTE LocalUserNum);
    virtual UBOOL ShowAchievementsUI(BYTE LocalUserNum);
    virtual UBOOL ShowInviteUI(BYTE LocalUserNum,const FString& InviteText=TEXT(""));
    virtual UBOOL ShowContentMarketplaceUI(BYTE LocalUserNum,INT CategoryMask=-1,INT OfferId=0);
    virtual UBOOL ShowMembershipMarketplaceUI(BYTE LocalUserNum);
    virtual UBOOL ShowDeviceSelectionUI(BYTE LocalUserNum,INT SizeNeeded,UBOOL bManageStorage=FALSE);
    virtual INT GetDeviceSelectionResults(BYTE LocalUserNum,FString& DeviceName);
    virtual UBOOL IsDeviceValid(INT DeviceID,INT SizeNeeded=0);
    virtual UBOOL UnlockAchievement(BYTE LocalUserNum,INT AchievementId);
    virtual UBOOL UnlockGamerPicture(BYTE LocalUserNum,INT PictureId);
    virtual UBOOL ShowFriendsUI(BYTE LocalUserNum);
    virtual UBOOL ShowFriendsInviteUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowPlayersUI(BYTE LocalUserNum);
    virtual UBOOL ReadAchievements(BYTE LocalUserNum,INT TitleId=0,UBOOL bShouldReadText=TRUE,UBOOL bShouldReadImages=FALSE);
    virtual BYTE GetAchievements(BYTE LocalUserNum,TArray<struct FAchievementDetails>& Achievements,INT TitleId=0);
    virtual UBOOL ShowCustomPlayersUI(BYTE LocalUserNum,const TArray<struct FUniqueNetId>& Players,const FString& Title,const FString& Description);
    virtual void ReadOnlineAvatar(const struct FUniqueNetId PlayerNetId,FScriptDelegate ReadOnlineAvatarCompleteDelegate);
    virtual UBOOL GetNumberOfCurrentPlayers();
    virtual UBOOL ResetStats(UBOOL bResetAchievements);
    virtual UBOOL CreateLeaderboard(const FString& LeaderboardName,BYTE SortType,BYTE DisplayFormat);
    virtual UBOOL DisplayAchievementProgress(INT AchievementId,INT ProgressCount,INT MaxProgress);
    virtual FString UniqueNetIdToPlayerName(const struct FUniqueNetId& Uid);
    DECLARE_FUNCTION(execShowLoginUI)
    {
        P_GET_UBOOL_OPTX(bShowOnlineOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->ShowLoginUI(bShowOnlineOnly);
    }
    DECLARE_FUNCTION(execLogin)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(LoginName);
        P_GET_STR(Password);
        P_GET_UBOOL_OPTX(bWantsLocalOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->Login(LocalUserNum,LoginName,Password,bWantsLocalOnly);
    }
    DECLARE_FUNCTION(execAutoLogin)
    {
        P_FINISH;
        *(UBOOL*)Result=this->AutoLogin();
    }
    DECLARE_FUNCTION(execLogout)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->Logout(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetLoginStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->GetLoginStatus(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanPlayOnline)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanPlayOnline(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanCommunicate)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanCommunicate(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->IsFriend(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execAreAnyFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FFriendsQuery,Query);
        P_FINISH;
        *(UBOOL*)Result=this->AreAnyFriends(LocalUserNum,Query);
    }
    DECLARE_FUNCTION(execReadProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=this->ReadProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execWriteProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=this->WriteProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execReadFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(UBOOL*)Result=this->ReadFriendsList(LocalUserNum,Count,StartingAt);
    }
    DECLARE_FUNCTION(execGetFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FOnlineFriend,Friends);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(BYTE*)Result=this->GetFriendsList(LocalUserNum,Friends,Count,StartingAt);
    }
    DECLARE_FUNCTION(execRegisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execUnregisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execRegisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execUnregisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execIsLocalPlayerTalking)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->IsLocalPlayerTalking(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsRemotePlayerTalking)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->IsRemotePlayerTalking(PlayerID);
    }
    DECLARE_FUNCTION(execIsHeadsetPresent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->IsHeadsetPresent(LocalUserNum);
    }
    DECLARE_FUNCTION(execSetRemoteTalkerPriority)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_INT(Priority);
        P_FINISH;
        *(UBOOL*)Result=this->SetRemoteTalkerPriority(LocalUserNum,PlayerID,Priority);
    }
    DECLARE_FUNCTION(execMuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL_OPTX(bIsSystemWide,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->MuteRemoteTalker(LocalUserNum,PlayerID,bIsSystemWide);
    }
    DECLARE_FUNCTION(execUnmuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL_OPTX(bIsSystemWide,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->UnmuteRemoteTalker(LocalUserNum,PlayerID,bIsSystemWide);
    }
    DECLARE_FUNCTION(execStartNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        this->StartNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        this->StopNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStartSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->StartSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->StopSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetRecognitionResults)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(FSpeechRecognizedWord,Words);
        P_FINISH;
        *(UBOOL*)Result=this->GetRecognitionResults(LocalUserNum,Words);
    }
    DECLARE_FUNCTION(execSelectVocabulary)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(VocabularyId);
        P_FINISH;
        *(UBOOL*)Result=this->SelectVocabulary(LocalUserNum,VocabularyId);
    }
    DECLARE_FUNCTION(execSetSpeechRecognitionObject)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(USpeechRecognition,SpeechRecogObj);
        P_FINISH;
        *(UBOOL*)Result=this->SetSpeechRecognitionObject(LocalUserNum,SpeechRecogObj);
    }
    DECLARE_FUNCTION(execReadOnlineStats)
    {
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStats(Players,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsForFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsForFriends(LocalUserNum,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRank)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(StartIndex,1);
        P_GET_INT_OPTX(NumToRead,100);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsByRank(StatsRead,StartIndex,NumToRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRankAroundPlayer)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(NumRows,10);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsByRankAroundPlayer(LocalUserNum,StatsRead,NumRows);
    }
    DECLARE_FUNCTION(execFreeStats)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        this->FreeStats(StatsRead);
    }
    DECLARE_FUNCTION(execWriteOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,Player);
        P_GET_OBJECT(UOnlineStatsWrite,StatsWrite);
        P_FINISH;
        *(UBOOL*)Result=this->WriteOnlineStats(SessionName,Player,StatsWrite);
    }
    DECLARE_FUNCTION(execFlushOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->FlushOnlineStats(SessionName);
    }
    DECLARE_FUNCTION(execWriteOnlinePlayerScores)
    {
        P_GET_NAME(SessionName);
        P_GET_INT(LeaderboardId);
        P_GET_TARRAY_REF(struct FOnlinePlayerScore,PlayerScores);
        P_FINISH;
        *(UBOOL*)Result=this->WriteOnlinePlayerScores(SessionName,LeaderboardId,PlayerScores);
    }
    DECLARE_FUNCTION(execHasLinkConnection)
    {
        P_FINISH;
        *(UBOOL*)Result=this->HasLinkConnection();
    }
    DECLARE_FUNCTION(execSetNetworkNotificationPosition)
    {
        P_GET_BYTE(NewPos);
        P_FINISH;
        this->SetNetworkNotificationPosition(NewPos);
    }
    DECLARE_FUNCTION(execIsControllerConnected)
    {
        P_GET_INT(ControllerId);
        P_FINISH;
        *(UBOOL*)Result=this->IsControllerConnected(ControllerId);
    }
    DECLARE_FUNCTION(execGetNATType)
    {
        P_FINISH;
        *(BYTE*)Result=this->GetNATType();
    }
    DECLARE_FUNCTION(execReadTitleFile)
    {
        P_GET_STR(FileToRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadTitleFile(FileToRead);
    }
    DECLARE_FUNCTION(execGetTitleFileContents)
    {
        P_GET_STR(Filename);
        P_GET_TARRAY_REF(BYTE,FileContents);
        P_FINISH;
        *(UBOOL*)Result=this->GetTitleFileContents(Filename,FileContents);
    }
    DECLARE_FUNCTION(execCreateOnlineAccount)
    {
        P_GET_STR(UserName);
        P_GET_STR(Password);
        P_GET_STR(EmailAddress);
        P_GET_STR_OPTX(ProductKey,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->CreateOnlineAccount(UserName,Password,EmailAddress,ProductKey);
    }
    DECLARE_FUNCTION(execSetOnlineStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(StatusId);
        P_GET_TARRAY_REF(struct FLocalizedStringSetting,LocalizedStringSettings);
        P_GET_TARRAY_REF(struct FSettingsProperty,Properties);
        P_FINISH;
        this->SetOnlineStatus(LocalUserNum,StatusId,LocalizedStringSettings,Properties);
    }
    DECLARE_FUNCTION(execShowKeyboardUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(TitleText);
        P_GET_STR(DescriptionText);
        P_GET_UBOOL_OPTX(bIsPassword,FALSE);
        P_GET_UBOOL_OPTX(bShouldValidate,TRUE);
        P_GET_STR_OPTX(DefaultText,TEXT(""));
        P_GET_INT_OPTX(MaxResultLength,256);
        P_FINISH;
        *(UBOOL*)Result=this->ShowKeyboardUI(LocalUserNum,TitleText,DescriptionText,bIsPassword,bShouldValidate,DefaultText,MaxResultLength);
    }
    DECLARE_FUNCTION(execAddFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,NewFriend);
        P_GET_STR_OPTX(Message,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->AddFriend(LocalUserNum,NewFriend,Message);
    }
    DECLARE_FUNCTION(execAddFriendByName)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(FriendName);
        P_GET_STR_OPTX(Message,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->AddFriendByName(LocalUserNum,FriendName,Message);
    }
    DECLARE_FUNCTION(execRemoveFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,FormerFriend);
        P_FINISH;
        *(UBOOL*)Result=this->RemoveFriend(LocalUserNum,FormerFriend);
    }
    DECLARE_FUNCTION(execAcceptFriendInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,RequestingPlayer);
        P_FINISH;
        *(UBOOL*)Result=this->AcceptFriendInvite(LocalUserNum,RequestingPlayer);
    }
    DECLARE_FUNCTION(execDenyFriendInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,RequestingPlayer);
        P_FINISH;
        *(UBOOL*)Result=this->DenyFriendInvite(LocalUserNum,RequestingPlayer);
    }
    DECLARE_FUNCTION(execSendMessageToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR(Message);
        P_FINISH;
        *(UBOOL*)Result=this->SendMessageToFriend(LocalUserNum,Friend,Message);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->SendGameInviteToFriend(LocalUserNum,Friend,Text);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY(struct FUniqueNetId,Friends);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->SendGameInviteToFriends(LocalUserNum,Friends,Text);
    }
    DECLARE_FUNCTION(execJoinFriendGame)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_FINISH;
        *(UBOOL*)Result=this->JoinFriendGame(LocalUserNum,Friend);
    }
    DECLARE_FUNCTION(execGetHostStatGuid)
    {
        P_FINISH;
        *(FString*)Result=this->GetHostStatGuid();
    }
    DECLARE_FUNCTION(execRegisterHostStatGuid)
    {
        P_GET_STR_REF(HostStatGuid);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterHostStatGuid(HostStatGuid);
    }
    DECLARE_FUNCTION(execGetClientStatGuid)
    {
        P_FINISH;
        *(FString*)Result=this->GetClientStatGuid();
    }
    DECLARE_FUNCTION(execRegisterStatGuid)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_STR_REF(ClientStatGuid);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterStatGuid(PlayerID,ClientStatGuid);
    }
    DECLARE_FUNCTION(execShowFeedbackUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->ShowFeedbackUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowGamerCardUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->ShowGamerCardUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowMessagesUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowMessagesUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowAchievementsUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowAchievementsUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowInviteUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR_OPTX(InviteText,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->ShowInviteUI(LocalUserNum,InviteText);
    }
    DECLARE_FUNCTION(execShowContentMarketplaceUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(CategoryMask,-1);
        P_GET_INT_OPTX(OfferId,0);
        P_FINISH;
        *(UBOOL*)Result=this->ShowContentMarketplaceUI(LocalUserNum,CategoryMask,OfferId);
    }
    DECLARE_FUNCTION(execShowMembershipMarketplaceUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowMembershipMarketplaceUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowDeviceSelectionUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(SizeNeeded);
        P_GET_UBOOL_OPTX(bManageStorage,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->ShowDeviceSelectionUI(LocalUserNum,SizeNeeded,bManageStorage);
    }
    DECLARE_FUNCTION(execGetDeviceSelectionResults)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR_REF(DeviceName);
        P_FINISH;
        *(INT*)Result=this->GetDeviceSelectionResults(LocalUserNum,DeviceName);
    }
    DECLARE_FUNCTION(execIsDeviceValid)
    {
        P_GET_INT(DeviceID);
        P_GET_INT_OPTX(SizeNeeded,0);
        P_FINISH;
        *(UBOOL*)Result=this->IsDeviceValid(DeviceID,SizeNeeded);
    }
    DECLARE_FUNCTION(execUnlockAchievement)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(AchievementId);
        P_FINISH;
        *(UBOOL*)Result=this->UnlockAchievement(LocalUserNum,AchievementId);
    }
    DECLARE_FUNCTION(execUnlockGamerPicture)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(PictureId);
        P_FINISH;
        *(UBOOL*)Result=this->UnlockGamerPicture(LocalUserNum,PictureId);
    }
    DECLARE_FUNCTION(execShowFriendsUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowFriendsUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowFriendsInviteUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->ShowFriendsInviteUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowPlayersUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowPlayersUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execReadAchievements)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(TitleId,0);
        P_GET_UBOOL_OPTX(bShouldReadText,TRUE);
        P_GET_UBOOL_OPTX(bShouldReadImages,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->ReadAchievements(LocalUserNum,TitleId,bShouldReadText,bShouldReadImages);
    }
    DECLARE_FUNCTION(execGetAchievements)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FAchievementDetails,Achievements);
        P_GET_INT_OPTX(TitleId,0);
        P_FINISH;
        *(BYTE*)Result=this->GetAchievements(LocalUserNum,Achievements,TitleId);
    }
    DECLARE_FUNCTION(execShowCustomPlayersUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_GET_STR(Title);
        P_GET_STR(Description);
        P_FINISH;
        *(UBOOL*)Result=this->ShowCustomPlayersUI(LocalUserNum,Players,Title,Description);
    }
    DECLARE_FUNCTION(execReadOnlineAvatar)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerNetId);
        P_GET_DELEGATE(ReadOnlineAvatarCompleteDelegate);
        P_FINISH;
        this->ReadOnlineAvatar(PlayerNetId,ReadOnlineAvatarCompleteDelegate);
    }
    DECLARE_FUNCTION(execGetNumberOfCurrentPlayers)
    {
        P_FINISH;
        *(UBOOL*)Result=this->GetNumberOfCurrentPlayers();
    }
    DECLARE_FUNCTION(execResetStats)
    {
        P_GET_UBOOL(bResetAchievements);
        P_FINISH;
        *(UBOOL*)Result=this->ResetStats(bResetAchievements);
    }
    DECLARE_FUNCTION(execCreateLeaderboard)
    {
        P_GET_STR(LeaderboardName);
        P_GET_BYTE(SortType);
        P_GET_BYTE(DisplayFormat);
        P_FINISH;
        *(UBOOL*)Result=this->CreateLeaderboard(LeaderboardName,SortType,DisplayFormat);
    }
    DECLARE_FUNCTION(execDisplayAchievementProgress)
    {
        P_GET_INT(AchievementId);
        P_GET_INT(ProgressCount);
        P_GET_INT(MaxProgress);
        P_FINISH;
        *(UBOOL*)Result=this->DisplayAchievementProgress(AchievementId,ProgressCount,MaxProgress);
    }
    DECLARE_FUNCTION(execUniqueNetIdToPlayerName)
    {
        P_GET_STRUCT_REF(struct FUniqueNetId,Uid);
        P_FINISH;
        *(FString*)Result=this->UniqueNetIdToPlayerName(Uid);
    }
    void delegateOnGetNumberOfCurrentPlayersComplete(INT TotalPlayers)
    {
        OnlineSubsystemSteamworks_eventOnGetNumberOfCurrentPlayersComplete_Parms Parms(EC_EventParm);
        Parms.TotalPlayers=TotalPlayers;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnGetNumberOfCurrentPlayersComplete,&__OnGetNumberOfCurrentPlayersComplete__Delegate,&Parms);
    }
    void delegateOnReadOnlineAvatarComplete(const struct FUniqueNetId PlayerNetId,class UTexture2D* Avatar)
    {
        OnlineSubsystemSteamworks_eventOnReadOnlineAvatarComplete_Parms Parms(EC_EventParm);
        Parms.PlayerNetId=PlayerNetId;
        Parms.Avatar=Avatar;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadOnlineAvatarComplete,&__OnReadOnlineAvatarComplete__Delegate,&Parms);
    }
    void delegateOnReadAchievementsComplete(INT TitleId)
    {
        OnlineSubsystemSteamworks_eventOnReadAchievementsComplete_Parms Parms(EC_EventParm);
        Parms.TitleId=TitleId;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadAchievementsComplete,&__OnReadAchievementsComplete__Delegate,&Parms);
    }
    void delegateOnProfileDataChanged()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnProfileDataChanged,&__OnProfileDataChanged__Delegate,NULL);
    }
    void delegateOnUnlockAchievementComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnUnlockAchievementComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnUnlockAchievementComplete,&__OnUnlockAchievementComplete__Delegate,&Parms);
    }
    void delegateOnDeviceSelectionComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnDeviceSelectionComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnDeviceSelectionComplete,&__OnDeviceSelectionComplete__Delegate,&Parms);
    }
    void delegateOnRegisterHostStatGuidComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnRegisterHostStatGuidComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnRegisterHostStatGuidComplete,&__OnRegisterHostStatGuidComplete__Delegate,&Parms);
    }
    void delegateOnFriendMessageReceived(BYTE LocalUserNum,struct FUniqueNetId SendingPlayer,const FString& SendingNick,const FString& Message)
    {
        OnlineSubsystemSteamworks_eventOnFriendMessageReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.SendingPlayer=SendingPlayer;
        Parms.SendingNick=SendingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnFriendMessageReceived,&__OnFriendMessageReceived__Delegate,&Parms);
    }
    void delegateOnJoinFriendGameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnJoinFriendGameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnJoinFriendGameComplete,&__OnJoinFriendGameComplete__Delegate,&Parms);
    }
    void delegateOnReceivedGameInvite(BYTE LocalUserNum,const FString& InviterName)
    {
        OnlineSubsystemSteamworks_eventOnReceivedGameInvite_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.InviterName=InviterName;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReceivedGameInvite,&__OnReceivedGameInvite__Delegate,&Parms);
    }
    void delegateOnFriendInviteReceived(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer,const FString& RequestingNick,const FString& Message)
    {
        OnlineSubsystemSteamworks_eventOnFriendInviteReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.RequestingPlayer=RequestingPlayer;
        Parms.RequestingNick=RequestingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnFriendInviteReceived,&__OnFriendInviteReceived__Delegate,&Parms);
    }
    void delegateOnAddFriendByNameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnAddFriendByNameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnAddFriendByNameComplete,&__OnAddFriendByNameComplete__Delegate,&Parms);
    }
    void delegateOnKeyboardInputComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnKeyboardInputComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnKeyboardInputComplete,&__OnKeyboardInputComplete__Delegate,&Parms);
    }
    void delegateOnCreateOnlineAccountCompleted(BYTE ErrorStatus)
    {
        OnlineSubsystemSteamworks_eventOnCreateOnlineAccountCompleted_Parms Parms(EC_EventParm);
        Parms.ErrorStatus=ErrorStatus;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnCreateOnlineAccountCompleted,&__OnCreateOnlineAccountCompleted__Delegate,&Parms);
    }
    void delegateOnReadTitleFileComplete(UBOOL bWasSuccessful,const FString& Filename)
    {
        OnlineSubsystemSteamworks_eventOnReadTitleFileComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.Filename=Filename;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadTitleFileComplete,&__OnReadTitleFileComplete__Delegate,&Parms);
    }
    void delegateOnStorageDeviceChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnStorageDeviceChange,&__OnStorageDeviceChange__Delegate,NULL);
    }
    void delegateOnConnectionStatusChange(BYTE ConnectionStatus)
    {
        OnlineSubsystemSteamworks_eventOnConnectionStatusChange_Parms Parms(EC_EventParm);
        Parms.ConnectionStatus=ConnectionStatus;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnConnectionStatusChange,&__OnConnectionStatusChange__Delegate,&Parms);
    }
    void delegateOnControllerChange(INT ControllerId,UBOOL bIsConnected)
    {
        OnlineSubsystemSteamworks_eventOnControllerChange_Parms Parms(EC_EventParm);
        Parms.ControllerId=ControllerId;
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnControllerChange,&__OnControllerChange__Delegate,&Parms);
    }
    void delegateOnExternalUIChange(UBOOL bIsOpening)
    {
        OnlineSubsystemSteamworks_eventOnExternalUIChange_Parms Parms(EC_EventParm);
        Parms.bIsOpening=bIsOpening ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnExternalUIChange,&__OnExternalUIChange__Delegate,&Parms);
    }
    void delegateOnLinkStatusChange(UBOOL bIsConnected)
    {
        OnlineSubsystemSteamworks_eventOnLinkStatusChange_Parms Parms(EC_EventParm);
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLinkStatusChange,&__OnLinkStatusChange__Delegate,&Parms);
    }
    void delegateOnFlushOnlineStatsComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnFlushOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnFlushOnlineStatsComplete,&__OnFlushOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnReadOnlineStatsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnReadOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadOnlineStatsComplete,&__OnReadOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnRecognitionComplete()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnRecognitionComplete,&__OnRecognitionComplete__Delegate,NULL);
    }
    void delegateOnPlayerTalkingStateChange(struct FUniqueNetId Player,UBOOL bIsTalking)
    {
        OnlineSubsystemSteamworks_eventOnPlayerTalkingStateChange_Parms Parms(EC_EventParm);
        Parms.Player=Player;
        Parms.bIsTalking=bIsTalking ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnPlayerTalkingStateChange,&__OnPlayerTalkingStateChange__Delegate,&Parms);
    }
    void delegateOnReadFriendsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnReadFriendsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadFriendsComplete,&__OnReadFriendsComplete__Delegate,&Parms);
    }
    void delegateOnWritePlayerStorageComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnWritePlayerStorageComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnWritePlayerStorageComplete,&__OnWritePlayerStorageComplete__Delegate,&Parms);
    }
    void delegateOnReadPlayerStorageForNetIdComplete(struct FUniqueNetId NetId,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnReadPlayerStorageForNetIdComplete_Parms Parms(EC_EventParm);
        Parms.NetId=NetId;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadPlayerStorageForNetIdComplete,&__OnReadPlayerStorageForNetIdComplete__Delegate,&Parms);
    }
    void delegateOnReadPlayerStorageComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnReadPlayerStorageComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadPlayerStorageComplete,&__OnReadPlayerStorageComplete__Delegate,&Parms);
    }
    void delegateOnWriteProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnWriteProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnWriteProfileSettingsComplete,&__OnWriteProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnReadProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnReadProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadProfileSettingsComplete,&__OnReadProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnLoginStatusChange(BYTE NewStatus,struct FUniqueNetId NewId)
    {
        OnlineSubsystemSteamworks_eventOnLoginStatusChange_Parms Parms(EC_EventParm);
        Parms.NewStatus=NewStatus;
        Parms.NewId=NewId;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLoginStatusChange,&__OnLoginStatusChange__Delegate,&Parms);
    }
    void delegateOnLogoutCompleted(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnLogoutCompleted_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLogoutCompleted,&__OnLogoutCompleted__Delegate,&Parms);
    }
    void delegateOnLoginFailed(BYTE LocalUserNum,BYTE ErrorCode)
    {
        OnlineSubsystemSteamworks_eventOnLoginFailed_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.ErrorCode=ErrorCode;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLoginFailed,&__OnLoginFailed__Delegate,&Parms);
    }
    void delegateOnFriendsChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnFriendsChange,&__OnFriendsChange__Delegate,NULL);
    }
    void delegateOnMutingChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnMutingChange,&__OnMutingChange__Delegate,NULL);
    }
    void delegateOnLoginCancelled()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLoginCancelled,&__OnLoginCancelled__Delegate,NULL);
    }
    void delegateOnLoginChange(BYTE LocalUserNum)
    {
        OnlineSubsystemSteamworks_eventOnLoginChange_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLoginChange,&__OnLoginChange__Delegate,&Parms);
    }
    DECLARE_CLASS(UOnlineSubsystemSteamworks,UOnlineSubsystemCommonImpl,0|CLASS_Config,OnlineSubsystemSteamworks)
	/** Cleanup stuff that happens outside of uobject's view. */
	virtual void FinishDestroy();

	/** Initializes Steamworks */
	UBOOL InitSteamworks();

	/** Handles updating of any async tasks that need to be performed */
	void Tick(FLOAT DeltaTime);

	/** Ticks the connection checking code */
	void TickConnectionStatusChange(FLOAT DeltaTime);

	/** Allows the Steamworks code to perform their Think operations */
	void TickSteamworksTasks(FLOAT DeltaTime);

	/** Logs the player into the default account */
	void SignInLocally();

	/** Steam callback: user stats/achievements for the player have been obtained. */
	void OnUserStatsReceived(UserStatsReceived_t *CallbackData);

	/** Steam callback: user stats/achievements for the player have been sent. */
	void OnUserStatsStored(UserStatsStored_t *CallbackData);
	
	/** Steam callback: user stats for a specific player have been obtained. */
	void OnSpecificUserStatsReceived(UserStatsReceived_t *CallbackData, bool bIOFailure);

	/** Steam callback: user stats for a specific player have been obtained. */
	void OnSpecificGSStatsReceived(GSStatsReceived_t *CallbackData, bool bIOFailure);

	/** Steam callback: user stats for a specific player have been sent. */
	void OnSpecificGSStatsStored(GSStatsStored_t *CallbackData, bool bIOFailure);

	/** Steam callback: count of total players received. */
	void OnNumberOfCurrentPlayers(NumberOfCurrentPlayers_t *CallbackData, bool bIOFailure);

	/** Steam callback: connection to Steam obtained. */
	void OnSteamServersConnected(SteamServersConnected_t *CallbackData);

	/** Steam callback: connection to Steam lost. */
	void OnSteamServersDisconnected(SteamServersDisconnected_t *CallbackData);

	/** Steam callback: game server is ready. */
	void OnGSPolicyResponse(GSPolicyResponse_t *CallbackData);

	/** Steam callback: Steam auth approved client. */
	void OnGSClientApprove(GSClientApprove_t *CallbackData);

	/** Steam callback: Steam auth denied client. */
	void OnGSClientDeny(GSClientDeny_t *CallbackData);

	/** Steam callback: Steam auth kicked client. */
	void OnGSClientKick(GSClientKick_t *CallbackData);

	/** Steam callback: Leaderboard template for specified leaderboard name has been found*/
	void OnUserFindLeaderboard(LeaderboardFindResult_t* Callbackdata, bool bIOFailure);

	/** Steam callback: Entries for the specified leaderboard have been retrieved */
	void OnUserDownloadedLeaderboardEntries(LeaderboardScoresDownloaded_t* CallbackData, bool bIOFailure);

	/** Steam callback: The player score for the specified leaderboard has been uploaded */
	void OnUserUploadedLeaderboardScore(LeaderboardScoreUploaded_t* CallbackData, bool bIOFailure);

	/** Registers all of the local talkers with the voice engine */
	void RegisterLocalTalkers();

	/** Unregisters all of the local talkers from the voice engine */
	void UnregisterLocalTalkers();

	/** Just empties the mute list and remote talker list */
	void UnregisterRemoteTalkers()
	{
		RemoteTalkers.Empty();
		MuteList.Empty();
	}

	/** Finds a remote talker in the cached list */
	FRemoteTalker* FindRemoteTalker(FUniqueNetId UniqueId);

	/** Handles updating of any async tasks that need to be performed */
	void TickVoice(FLOAT DeltaTime);

	/** Reads any data that is currently queued in the voice interface */
	void ProcessLocalVoicePackets();

	/** Submits network packets to the voice interface for playback */
	void ProcessRemoteVoicePackets();

	/** Processes any talking delegates that need to be fired off */
	void ProcessTalkingDelegates();

	/** Processes any speech recognition delegates that need to be fired off */
	void ProcessSpeechRecognitionDelegates();

	/** Builds the Steamworks location string from the game the player is connected to */
	FString GetServerLocation() const;

	/** Clears the various data that is associated with a player to prevent the data being used across logins */
	void ClearPlayerInfo();

	/** Determines whether the user's profile file exists or not */	
	UBOOL DoesProfileExist();

	/** Return steamcloud filename for player profile. */
	FString CreateProfileName();

	/** Decrypts the product key and places it in the specified buffer */
	UBOOL DecryptProductKey(BYTE* Buffer,DWORD BufferLen);

	/** Searches for a player's pending stats, returning them if they exist, or adding them if they don't */
	FPendingPlayerStats& FindOrAddPendingPlayerStats(const FUniqueNetId& Player);

	/** Get the Steamworks stat field string for a given view/column */
	FString GetStatsFieldName(INT ViewId, INT ColumnId);

	/** Refresh data in pending stats */
	void AddOrUpdatePlayerStat(TArray<FPlayerStat>& PlayerStats, INT ViewId, INT ColumnId, const FSettingsData& Data);

	/** Called when ready to submit all collected stats */
	UBOOL CreateAndSubmitStatsReport();

	/** Returns TRUE if stats are enabled for this session, FALSE otherwise */
	inline UBOOL SessionHasStats(void)
	{
#if HAVE_STEAM_CLIENT_STATS
		AWorldInfo* WorldInfo = GWorld->GetWorldInfo();

		// Clients can always write stats, they are not locked to an active game session (they are, however, locked to client-only stats)
		if (WorldInfo != NULL && (WorldInfo->NetMode == NM_Standalone || WorldInfo->NetMode == NM_Client))
			return TRUE;
#endif
		return CachedGameInt->GameWantsStats() && bIsStatsSessionOk;
	}

	/** Handle actual downloading of avatars from Steam. */
	UBOOL GetOnlineAvatar(const struct FUniqueNetId PlayerNetId,FScriptDelegate &ReadOnlineAvatarCompleteDelegate,const UBOOL bTriggerOnFailure);

	/** Sets up the specified leaderboard, so that read/write calls can be performed on it */
	UBOOL InitiateLeaderboard(const FString& LeaderboardName);

	/** Reads entries from the specified leaderboard */
	UBOOL ReadLeaderboardEntries(const FString& LeaderboardName, BYTE RequestType=LRT_Global, INT Start=0, INT End=0);

	/** Writes out the leaderboard score, for the currently logged in player */
	UBOOL WriteLeaderboardScore(const FString& LeaderboardName, INT Score);

	/** Takes a stats ViewId and matches it up to a leaderboard name */
	FString LeaderboardNameLookup(INT ViewId);

	/** Refresh pending achievement progress updates */
	void AddOrUpdateAchievementStat(const FAchievementMappingInfo& Ach, const FSettingsData& Data);

	/** Refresh pending leaderboard stats */
	void AddOrUpdateLeaderboardStat(INT ViewId, const FSettingsData& Data);
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UOnlineGameInterfaceSteamworks,-1,execUnregisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceSteamworks,-1,execRegisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceSteamworks,-1,execAcceptGameInvite);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceSteamworks,-1,execUpdateOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUniqueNetIdToPlayerName);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execDisplayAchievementProgress);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execCreateLeaderboard);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execResetStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetNumberOfCurrentPlayers);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadOnlineAvatar);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowCustomPlayersUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetAchievements);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadAchievements);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowPlayersUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowFriendsInviteUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowFriendsUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUnlockGamerPicture);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUnlockAchievement);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execIsDeviceValid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetDeviceSelectionResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowDeviceSelectionUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowMembershipMarketplaceUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowContentMarketplaceUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowInviteUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowAchievementsUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowMessagesUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowGamerCardUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowFeedbackUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execRegisterStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetClientStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execRegisterHostStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetHostStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execJoinFriendGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSendGameInviteToFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSendGameInviteToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSendMessageToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execDenyFriendInvite);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execAcceptFriendInvite);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execRemoveFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execAddFriendByName);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execAddFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowKeyboardUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSetOnlineStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execCreateOnlineAccount);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetTitleFileContents);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadTitleFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetNATType);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execIsControllerConnected);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSetNetworkNotificationPosition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execHasLinkConnection);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execWriteOnlinePlayerScores);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execFlushOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execWriteOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execFreeStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadOnlineStatsByRankAroundPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadOnlineStatsByRank);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadOnlineStatsForFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSetSpeechRecognitionObject);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSelectVocabulary);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetRecognitionResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execStopSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execStartSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execStopNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execStartNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUnmuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execMuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSetRemoteTalkerPriority);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execIsHeadsetPresent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execIsRemotePlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execIsLocalPlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUnregisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execRegisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUnregisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execRegisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execWriteProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execAreAnyFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execIsFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execCanCommunicate);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execCanPlayOnline);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetLoginStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execLogout);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execAutoLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowLoginUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execInit);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ONLINESUBSYSTEMSTEAMWORKS_NATIVE_DEFS
#define ONLINESUBSYSTEMSTEAMWORKS_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_ONLINESUBSYSTEMSTEAMWORKS \
	UOnlineGameInterfaceSteamworks::StaticClass(); \
	GNativeLookupFuncs.Set(FName("OnlineGameInterfaceSteamworks"), GOnlineSubsystemSteamworksUOnlineGameInterfaceSteamworksNatives); \
	UOnlineSubsystemSteamworks::StaticClass(); \
	GNativeLookupFuncs.Set(FName("OnlineSubsystemSteamworks"), GOnlineSubsystemSteamworksUOnlineSubsystemSteamworksNatives); \

#endif // ONLINESUBSYSTEMSTEAMWORKS_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GOnlineSubsystemSteamworksUOnlineGameInterfaceSteamworksNatives[] = 
{ 
	MAP_NATIVE(UOnlineGameInterfaceSteamworks, execUnregisterPlayer)
	MAP_NATIVE(UOnlineGameInterfaceSteamworks, execRegisterPlayer)
	MAP_NATIVE(UOnlineGameInterfaceSteamworks, execAcceptGameInvite)
	MAP_NATIVE(UOnlineGameInterfaceSteamworks, execUpdateOnlineGame)
	{NULL, NULL}
};

FNativeFunctionLookup GOnlineSubsystemSteamworksUOnlineSubsystemSteamworksNatives[] = 
{ 
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUniqueNetIdToPlayerName)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execDisplayAchievementProgress)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execCreateLeaderboard)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execResetStats)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetNumberOfCurrentPlayers)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadOnlineAvatar)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowCustomPlayersUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetAchievements)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadAchievements)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowPlayersUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowFriendsInviteUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowFriendsUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUnlockGamerPicture)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUnlockAchievement)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execIsDeviceValid)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetDeviceSelectionResults)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowDeviceSelectionUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowMembershipMarketplaceUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowContentMarketplaceUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowInviteUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowAchievementsUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowMessagesUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowGamerCardUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowFeedbackUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execRegisterStatGuid)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetClientStatGuid)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execRegisterHostStatGuid)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetHostStatGuid)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execJoinFriendGame)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSendGameInviteToFriends)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSendGameInviteToFriend)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSendMessageToFriend)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execDenyFriendInvite)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execAcceptFriendInvite)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execRemoveFriend)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execAddFriendByName)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execAddFriend)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowKeyboardUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSetOnlineStatus)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execCreateOnlineAccount)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetTitleFileContents)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadTitleFile)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetNATType)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execIsControllerConnected)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSetNetworkNotificationPosition)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execHasLinkConnection)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execWriteOnlinePlayerScores)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execFlushOnlineStats)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execWriteOnlineStats)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execFreeStats)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadOnlineStatsByRankAroundPlayer)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadOnlineStatsByRank)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadOnlineStatsForFriends)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadOnlineStats)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSetSpeechRecognitionObject)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSelectVocabulary)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetRecognitionResults)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execStopSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execStartSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execStopNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execStartNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUnmuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execMuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSetRemoteTalkerPriority)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execIsHeadsetPresent)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execIsRemotePlayerTalking)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execIsLocalPlayerTalking)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUnregisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execRegisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUnregisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execRegisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetFriendsList)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadFriendsList)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execWriteProfileSettings)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadProfileSettings)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execAreAnyFriends)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execIsFriend)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execCanCommunicate)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execCanPlayOnline)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetLoginStatus)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execLogout)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execAutoLogin)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execLogin)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowLoginUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execInit)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(UOnlineGameInterfaceSteamworks,OnlineGameInterfaceSteamworks,QueryToRulesResponseMap)
VERIFY_CLASS_OFFSET_NODIE(UOnlineGameInterfaceSteamworks,OnlineGameInterfaceSteamworks,__OnUnregisterPlayerComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineGameInterfaceSteamworks)
VERIFY_CLASS_OFFSET_NODIE(UOnlineSubsystemSteamworks,OnlineSubsystemSteamworks,CallbackBridge)
VERIFY_CLASS_OFFSET_NODIE(UOnlineSubsystemSteamworks,OnlineSubsystemSteamworks,__OnGetNumberOfCurrentPlayersComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineSubsystemSteamworks)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
