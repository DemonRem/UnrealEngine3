/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2011 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "EngineNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ENGINE_FOLIAGE_ENUMS
#define INCLUDED_ENGINE_FOLIAGE_ENUMS 1


#endif // !INCLUDED_ENGINE_FOLIAGE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_ENGINE_FOLIAGE_CLASSES
#define INCLUDED_ENGINE_FOLIAGE_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

class AInteractiveFoliageActor : public AStaticMeshActor
{
public:
    //## BEGIN PROPS InteractiveFoliageActor
private:
    class UCylinderComponent* CylinderComponent;
    FVector TouchingActorEntryPosition;
    FVector FoliageVelocity;
    FVector FoliageForce;
    FVector FoliagePosition;
public:
    FLOAT FoliageDamageImpulseScale;
    FLOAT FoliageTouchImpulseScale;
    FLOAT FoliageStiffness;
    FLOAT FoliageStiffnessQuadratic;
    FLOAT FoliageDamping;
    FLOAT MaxDamageImpulse;
    FLOAT MaxTouchImpulse;
    FLOAT MaxForce;
    FLOAT Mass;
    //## END PROPS InteractiveFoliageActor

    virtual void TakeDamage(INT Damage,class AController* EventInstigator,FVector HitLocation,FVector Momentum,class UClass* DamageType,struct FTraceHitInfo HitInfo=FTraceHitInfo(EC_EventParm),class AActor* DamageCauser=NULL);
    virtual void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector HitLocation,FVector HitNormal);
    DECLARE_FUNCTION(execTakeDamage)
    {
        P_GET_INT(Damage);
        P_GET_OBJECT(AController,EventInstigator);
        P_GET_STRUCT(FVector,HitLocation);
        P_GET_STRUCT(FVector,Momentum);
        P_GET_OBJECT(UClass,DamageType);
        P_GET_STRUCT_OPTX(struct FTraceHitInfo,HitInfo,FTraceHitInfo(EC_EventParm));
        P_GET_OBJECT_OPTX(AActor,DamageCauser,NULL);
        P_FINISH;
        this->TakeDamage(Damage,EventInstigator,HitLocation,Momentum,DamageType,HitInfo,DamageCauser);
    }
    DECLARE_FUNCTION(execTouch)
    {
        P_GET_OBJECT(AActor,Other);
        P_GET_OBJECT(UPrimitiveComponent,OtherComp);
        P_GET_STRUCT(FVector,HitLocation);
        P_GET_STRUCT(FVector,HitNormal);
        P_FINISH;
        this->Touch(Other,OtherComp,HitLocation,HitNormal);
    }
    DECLARE_CLASS(AInteractiveFoliageActor,AStaticMeshActor,0,Engine)
protected:
	void SetupCollisionCylinder();
public:
	virtual void TickSpecial(FLOAT DeltaSeconds);
	virtual void Spawned();
	virtual void PostLoad();
};

class UInteractiveFoliageComponent : public UStaticMeshComponent
{
public:
    //## BEGIN PROPS InteractiveFoliageComponent
protected:
    class FInteractiveFoliageSceneProxy* FoliageSceneProxy;
public:
    //## END PROPS InteractiveFoliageComponent

    DECLARE_CLASS(UInteractiveFoliageComponent,UStaticMeshComponent,0,Engine)
	virtual FPrimitiveSceneProxy* CreateSceneProxy();
	/**
	* Detach the component from the scene and remove its render proxy
	* @param bWillReattach TRUE if the detachment will be followed by an attachment
	*/
	virtual void Detach( UBOOL bWillReattach = FALSE );

	friend class AInteractiveFoliageActor;
};

class UActorFactoryInteractiveFoliage : public UActorFactoryStaticMesh
{
public:
    //## BEGIN PROPS ActorFactoryInteractiveFoliage
    //## END PROPS ActorFactoryInteractiveFoliage

    DECLARE_CLASS(UActorFactoryInteractiveFoliage,UActorFactoryStaticMesh,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActorFactoryInteractiveFoliage)
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_ENGINE_FOLIAGE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(AInteractiveFoliageActor,-1,execTouch);
AUTOGENERATE_FUNCTION(AInteractiveFoliageActor,-1,execTakeDamage);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ENGINE_FOLIAGE_NATIVE_DEFS
#define ENGINE_FOLIAGE_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE_FOLIAGE \
	AInteractiveFoliageActor::StaticClass(); \
	GNativeLookupFuncs.Set(FName("InteractiveFoliageActor"), GEngineAInteractiveFoliageActorNatives); \
	UInteractiveFoliageComponent::StaticClass(); \
	UActorFactoryInteractiveFoliage::StaticClass(); \

#endif // ENGINE_FOLIAGE_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GEngineAInteractiveFoliageActorNatives[] = 
{ 
	MAP_NATIVE(AInteractiveFoliageActor, execTouch)
	MAP_NATIVE(AInteractiveFoliageActor, execTakeDamage)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(AInteractiveFoliageActor,InteractiveFoliageActor,CylinderComponent)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveFoliageActor,InteractiveFoliageActor,Mass)
VERIFY_CLASS_SIZE_NODIE(AInteractiveFoliageActor)
VERIFY_CLASS_OFFSET_NODIE(UInteractiveFoliageComponent,InteractiveFoliageComponent,FoliageSceneProxy)
VERIFY_CLASS_SIZE_NODIE(UInteractiveFoliageComponent)
VERIFY_CLASS_SIZE_NODIE(UActorFactoryInteractiveFoliage)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
