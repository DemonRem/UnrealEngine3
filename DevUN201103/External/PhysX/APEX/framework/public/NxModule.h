#include "NxApex.h"

#ifndef __NX_MODULE_H__
#define __NX_MODULE_H__
/*
 * Copyright 2009-2010 NVIDIA Corporation.  All rights reserved.
 *
 * NOTICE TO USER:
 *
 * This source code is subject to NVIDIA ownership rights under U.S. and
 * international Copyright laws.  Users and possessors of this source code
 * are hereby granted a nonexclusive, royalty-free license to use this code
 * in individual and commercial software.
 *
 * NVIDIA MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS SOURCE
 * CODE FOR ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR
 * IMPLIED WARRANTY OF ANY KIND.  NVIDIA DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOURCE CODE, INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.
 * IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL,
 * OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
 * OF USE, DATA OR PROFITS,  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION,  ARISING OUT OF OR IN CONNECTION WITH THE USE
 * OR PERFORMANCE OF THIS SOURCE CODE.
 *
 * U.S. Government End Users.   This source code is a "commercial item" as
 * that term is defined at  48 C.F.R. 2.101 (OCT 1995), consisting  of
 * "commercial computer  software"  and "commercial computer software
 * documentation" as such terms are  used in 48 C.F.R. 12.212 (SEPT 1995)
 * and is provided to the U.S. Government only as a commercial end item.
 * Consistent with 48 C.F.R.12.212 and 48 C.F.R. 227.7202-1 through
 * 227.7202-4 (JUNE 1995), all U.S. Government End Users acquire the
 * source code with only those rights set forth herein.
 *
 * Any use of this source code in individual and commercial software must
 * include, in the user documentation and internal comments to the code,
 * the above Disclaimer and U.S. Government End Users Notice.
 */

/*!
\file
\brief APEX Module API
*/

namespace physx {
namespace apex {

PX_PUSH_PACK_DEFAULT

/**
\brief A structure that holds two templated values, a min and a max
*/
template <typename T>
struct NxRange
{
	NxRange() {};
	NxRange(T inMin, T inMax) : minimum(inMin), maximum(inMax) {};

	bool operator== (const NxRange& r) const
	{
		return minimum == r.minimum && maximum == r.maximum;
	}

	T minimum;
	T maximum;
};


/**
\brief A named parameter with a range of possible integer values
*/
struct NxApexParameter
{
	NxApexParameter() : name(NULL), current(0) {};

	NxApexParameter(const char* inName, NxRange<physx::PxU32> inRange) : name(inName), range(inRange), current(inRange.minimum) {}

	const char* name;
	NxRange<physx::PxU32> range;
	physx::PxU32 current;
};

/**
\brief Scales a value from one range to another
*/
class NxInterpolator
{
public:
	virtual physx::PxF32 interpolate(physx::PxF32 inCurrent, physx::PxF32 inMin, physx::PxF32 inMax, physx::PxF32 outMin, physx::PxF32 outMax) = 0;
};


/**
\brief base class of all APEX modules

It describes the LODParameters and weights defined by the module.
*/
class NxModule : public NxApexInterface
{
public:
	/**
	\brief Initialize the module
	\param[in] desc use NxModule::getDefaultModuleDesc() to get the descriptor necessary for initializing the module
	*/
	virtual void init( ::NxParameterized::Interface &desc ) = 0;

	/**
	\brief Returns the name of the module
	*/
	virtual const char* getName() const = 0;

	/**
	\brief Returns the unique ID of the module
	*/
	virtual NxAuthObjTypeID getModuleID() const = 0;

	/**
	\brief Returns the number of parameters of this module
	*/
	virtual physx::PxU32 getNbParameters() const = 0;

	/**
	\brief Returns an array of parameters.
	*/
	virtual NxApexParameter** getParameters() = 0;

	/**
	\brief Returns the NxParameterized interface that contains module initialization parameters
	\note The module itself owns this object, so there's no need for the application to destroy it
	*/
	virtual ::NxParameterized::Interface *getDefaultModuleDesc(){ return NULL; }

	/**
	\brief Set a parameter
	
	Directly sets the current value of the parameter with the given index, bypassing
	any configuration manager.
	*/
	virtual void setIntValue(physx::PxU32 parameterIndex, physx::PxU32 value) = 0;

	/**
	\brief Allocate a renderable iterator

	Returns an NxApexRenderable iterator instance for the specified NxApexScene.  The iterator
	will return pointers to renderables in this scene that were generated by this module. This
	is the preferred method for rendering IOFX actors.
	*/
    virtual NxApexRenderableIterator *createRenderableIterator( const NxApexScene& ) = 0;

	/**
	\brief Set module LOD weights

	Sets scaling factors that determine how the units of benefit and resource used by 
	this module relate to those of other modules.
	*/
	virtual void setLODWeights(physx::PxF32 benefitWeight, physx::PxF32 resourceWeight) = 0;

	/**
	\brief Retrieves the currently used LOD Weights.
	*/
	virtual void getLODWeights(physx::PxF32 & benefitWeight, physx::PxF32 & resourceWeight) const = 0;
};

PX_POP_PACK

}} // end namespace physx::apex

#endif // __NX_MODULE_H__
